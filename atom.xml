<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaybo&#39;s Blog</title>
  
  <subtitle>斜杠青年</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-20T10:45:01.473Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jaybo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用GitBook制作电子书，发布于网络并绑定个性域名</title>
    <link href="http://yoursite.com/2019/02/21/%E5%88%A9%E7%94%A8GitBook%E5%88%B6%E4%BD%9C%E7%94%B5%E5%AD%90%E4%B9%A6%EF%BC%8C%E5%8F%91%E5%B8%83%E4%BA%8E%E7%BD%91%E7%BB%9C%E5%B9%B6%E7%BB%91%E5%AE%9A%E4%B8%AA%E6%80%A7%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2019/02/21/利用GitBook制作电子书，发布于网络并绑定个性域名/</id>
    <published>2019-02-21T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.473Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用 GitBook 制作电子书，发布于网络并绑定个性域名？<a id="more"></a></p><h1 id="一、制作电子书"><a href="#一、制作电子书" class="headerlink" title="一、制作电子书"></a>一、制作电子书</h1><h2 id="0-GitBook介绍"><a href="#0-GitBook介绍" class="headerlink" title="0. GitBook介绍"></a>0. GitBook介绍</h2><p><a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="noopener">GitBook</a> 是一个使用 GitHub/Git 和 Markdown 来制作电子书的命令行工具（Node.js 库）。另外，有一个网站 <a href="http://link.zhihu.com/?target=http%3A//gitbook.com" target="_blank" rel="noopener">http://gitbook.com</a> 可以帮助用户更好的使用 Gitbook，它是使用 GitBook 格式创建和托管图书的在线平台。它提供托管，协作功能和易于使用的编辑器。Gitbook 与 <a href="http://link.zhihu.com/?target=http%3A//gitbook.com" target="_blank" rel="noopener">http://gitbook.com</a> 的关系类似 Git 和 GitHub，一个是工具，另一个是基于工具创建的网站。</p><blockquote><p>注：GitBook 平台在今年的 4 月 9 日发布了新的版本 v2。新的版本官网已经变成 <a href="https://www.gitbook.com/?t=11" target="_blank" rel="noopener"><code>www.gitbook.com</code></a> （旧的地址为 <a href="https://legacy.gitbook.com/" target="_blank" rel="noopener"><code>legacy.gitbook.com</code></a> ）。新旧版本有很多的不一样，网上很多资料都是针对旧版。 比如新版不再支持把每本书作为一个 <code>Git Repository</code>  来进行版本管理。更多 v2 的重大改变可以看 <a href="https://docs.gitbook.com/v2-changes/important-differences" target="_blank" rel="noopener">这里</a>。</p></blockquote><p>你可以利用 Git 命令管理电子书版本，如果你是 GitHub 的重度使用者，还可以把你的 GitBook 帐户和 GitHub 帐户关联起来，这样不论在任何一方修改了内容，都可以互相同步。下面是制作电子书和使用步骤。</p><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h2><p>由于 GitBook 是基于 Node.js 开发的，所以依赖 Node.js 环境。如果你的系统中还未安装 Node.js，请点击 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js下载页面</a>，根据你所使用的系统下载对应的版本。如果已安装则略过本步骤。</p><p>Windows 版和 Mac 版的 Node.js 都是常规的安装包，连续下一步安装即可。Linux 版可以通过 yum、apt-get 之类的工具安装，也可以通过源码包安装。</p><h2 id="2-安装GitBook命令行工具"><a href="#2-安装GitBook命令行工具" class="headerlink" title="2. 安装GitBook命令行工具"></a>2. 安装GitBook命令行工具</h2><p>打开“命令提示符”（Mac 系统打开“终端”）输入以下命令全局安装 gitbook-cli：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p><code>gitbook-cli</code> 是 GitBook 的一个命令行工具。它将自动安装所需版本的 GitBook 来构建一本书。</p><p>执行下面的命令，查看 GitBook 版本，以验证安装成功。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook --version</span><br></pre></td></tr></table></figure><p>GitBook  命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitbook init //初始化目录文件</span><br><span class="line">gitbook build [书籍路径] [输出路径] //构建书籍，生成静态网页，默认输出到 _book 目录</span><br><span class="line">gitbook serve [--port 端口号]  //包含build命令，生成静态网页并运行服务器</span><br><span class="line">gitbook pdf ././mybook.pdf  //生成 pdf/epub/mobi 格式的电子书</span><br><span class="line"></span><br><span class="line">gitbook help //列出gitbook所有的命令</span><br><span class="line">gitbook --help //输出gitbook-cli的帮助信息</span><br><span class="line">gitbook ls //列出本地所有的gitbook版本</span><br><span class="line">gitbook ls-remote //列出远程可用的gitbook版本</span><br><span class="line">gitbook fetch 标签/版本号 //安装对应的gitbook版本</span><br><span class="line">gitbook update //更新到gitbook的最新版本</span><br><span class="line">gitbook uninstall 2.0.1 //卸载对应的gitbook版本</span><br></pre></td></tr></table></figure><h2 id="3-新建GitBook项目"><a href="#3-新建GitBook项目" class="headerlink" title="3. 新建GitBook项目"></a>3. 新建GitBook项目</h2><p>新建一个目录，并进入该目录使用 gitbook 命令初始化电子书项目。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook init</span><br></pre></td></tr></table></figure><p>初始化后的目录中会出现 <code>README.md</code> 和 <code>SUMMARY.md</code> 两个基本文件，如果你希望将书籍创建到一个新目录中，可以通过运行 <code>gitbook init ./directory</code> 这样做。当然你也可以自己手动创建这两个文件。<code>README.md</code> 是电子书的介绍，<code>SUMMARY.md</code> 是电子书的目录结构。</p><p>注意：一个 GitBook 项目至少要包含 README.md 和 SUMMARY.md，书本的第一页内容是从文件 README.md 文件中提取的。如果这个文件名没有出现在 SUMMARY.md 文件中，则它会被添加为章节的第一个条目。而由于一些托管在 GitHub 上的书会将 README.md 作为项目的介绍而不是书的介绍，从 gitbook v2 起，可以在 book.json 中指定某个文件作为 README。如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"structure"</span>: &#123;</span><br><span class="line">        <span class="attr">"readme"</span>: <span class="string">"introduction.md"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人的一个实践情况：如果不想要书籍的目录默认把 README.md 文作为书籍第一章，可以新建 introduction.md 文件（名称随意），并在 readme 指定该文件，则书籍第一章为 introduction.md 内容。但是有个注意的是，如果在 summary.md 文件某个目录中有指定了 README.md 文件作为章节内容，则书籍第一章不会是 introduction.md 内容，而是 README.md 内容。</p></blockquote><h2 id="4-编辑书籍内容"><a href="#4-编辑书籍内容" class="headerlink" title="4. 编辑书籍内容"></a>4. 编辑书籍内容</h2><p>GitBook 使用 <code>SUMMARY.md</code> 来定义书本的章节和子章节的结构。它用来生成书本内容的预览表。它的格式是一个简单的链接列表。另外可以在里面添加一些 Markdown 格式的标题和分割线。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 概要</span><br><span class="line">- [章节 1](chapter1.md)</span><br><span class="line">- [章节 2](chapter2.md)</span><br><span class="line">- [章节 3](chapter3.md)</span><br><span class="line"></span><br><span class="line"># 基础</span><br><span class="line">- [章节 1](chapter1/README.md)</span><br><span class="line">  - [1.1 a](chapter1/a.md)</span><br><span class="line">  - [1.2 b](chapter1/b.md)</span><br><span class="line">---</span><br><span class="line">- [章节 2](chapter2/README.md)</span><br><span class="line">  - [2.1 c](chapter2/c.md)</span><br><span class="line">  - [2.2 d](chapter2/d.md)</span><br><span class="line"></span><br><span class="line"># 进阶</span><br><span class="line">- [章节 3](chapter3/README.md)</span><br></pre></td></tr></table></figure><p>接下来就可以在相应的 MD 文件里书写内容了。文件内容编写使用 Markdown 语法格式。另外，GitBook 的目录，限定为三级。</p><p>注：<code>README.md</code> 和 <code>SUMMARY.md</code> 这两个文件你也可以自己手动新建和编写，名称大小写无关。</p><h2 id="5-预览电子书"><a href="#5-预览电子书" class="headerlink" title="5. 预览电子书"></a>5. 预览电子书</h2><p>写完内容，可以通过以下方式来预览电子书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>该命令实际上是先调用 <code>gitbook build</code>  编译书籍，然后会启动一个 web 服务器，监听在本地的 4000 端口。在浏览器中输入 <code>http://localhost:4000</code>，即可预览查看。</p><blockquote><p>注：<code>gitbook build</code> 命令会在当前文件夹中生成 <code>_book</code>文件夹（生成 HTML 版本的电子书），用户可以将这个文件夹内容托管到网上，从而实现内容的发布。</p></blockquote><p>这里有个问题记录下，我在使用 <code>gitbook serve</code> 后报错，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Template render error: (F:\JavaEE-tutorial\ch1\02-Java基本语法.md) [Line 434, Column 22]</span><br><span class="line">  expected variable end</span><br></pre></td></tr></table></figure><p>根据错误，我有找到对应位置的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125; &#125;;</span><br></pre></td></tr></table></figure><p>即这行这里的数字 1 前面连续的花括号问题，后面尝试解决了：只要这两个花括号不要连续就行，比如空一格 <code>{ {</code> 就不会有错了。另外，我还发现 MD 源文章的标题不能使用半角下的圆括号 <code>（</code>、<code>)</code>，否则预览电子书的时候点击对应文章的目录没有反应。另外我也发现在基于 Hexo 博客搭建编写的文章里出现了连续花括号同样会报错，解决方法只要不连续就行。</p><h2 id="6-生成电子书"><a href="#6-生成电子书" class="headerlink" title="6. 生成电子书"></a>6. 生成电子书</h2><p>生成 PDF 格式电子书：<code>gitbook pdf .</code>，默认为 <code>book.pdf</code>，如果自定义名称，可：<code>gitbook pdf 目录 目录/书名.pdf</code>，如在当前文件夹下输出：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook pdf ./ ./书名.pdf</span><br></pre></td></tr></table></figure><p>注意：如上操作出现报错话，试一试先使用 npm 安装上 gitbook-pdf：<code>npm install gitbook-pdf -g</code>。参考：<a href="https://www.jianshu.com/p/7476afdd9248" target="_blank" rel="noopener">使用Gitbook写开源书籍，过一把作家瘾</a>。</p><p>另外，由于生成 PDF 文件依赖于 <code>ebook-convert</code>，故首先在该处 <a href="http://calibre-ebook.com/download" target="_blank" rel="noopener">ebook-convert下载链接</a> 点击下载所需要的版本。安装完毕，程序会自动将包含 <code>ebook-convert.exe</code> 的文件夹添加到 PATH 变量中。</p><p>需要在当前目录生成 epub 或者 mobi 格式的，分别执行下面的命令即可：<code>gitbook epub .</code>、<code>gitbook mobi .</code>。</p><p>如果需要定制 PDF 输出，可以在 <code>book.json</code> 中的配置 PDF 输出样式。可以在网上该样式配置，就不在这里详细讲解了。</p><p>提下，若想要输出的 PDF 目录对应的是数字页码，可以试试下面解决方式：</p><ul><li><a href="https://github.com/GitbookIO/gitbook/issues/1470" target="_blank" rel="noopener">Change PDF generation engine to either wkhtmltopdf or phantom.js</a> </li><li><a href="https://github.com/GitbookIO/gitbook/issues/1223" target="_blank" rel="noopener">Conversion to PDF with calibre should show table of content with page numbers</a> </li></ul><h2 id="7-使用插件"><a href="#7-使用插件" class="headerlink" title="7. 使用插件"></a>7. 使用插件</h2><p>Gitbook 本身功能丰富，但同时可以使用插件来进行个性化定制。Gitbook 插件里已经有 100 多个插件，可以在 <code>book.json</code> 文件的 <code>plugins</code> 和 <code>pluginsConfig</code> 字段添加插件及相关配置，添加后别忘了进行安装。</p><p>安装插件的方式非常简单，只需要将所需要的插件添加到 <code>book.json</code> 中，如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"mathjax"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行：<code>gitbook install</code>，即可安装，安装的插件在 node_modules 文件夹。</p><p>Gitbook 默认带有 5 个插件：</p><ul><li>highlight</li><li>search</li><li>sharing</li><li>font-settings</li><li>livereload</li></ul><p>如果要去除自带的插件， 可以在插件名称前面加 <code>-</code>。</p><p>本人有使用的 GitBook 插件：</p><ul><li><p>“anchor-navigation-ex”：</p><p>一个可以目录收缩的插件，比较实用。<a href="https://helight.info/2018-11-23/1146/" target="_blank" rel="noopener">https://helight.info/2018-11-23/1146/</a></p></li><li><p><del>“back-to-top-button”：击右下角按钮，回到顶部。</del> </p></li><li>“code”：代码块添加行号和复制按钮，复制按钮可关闭。</li><li>“copy-code-button”：为代码块添加复制的按钮。</li><li>“-lunr”, “-search”, “search-pro”：支持中文搜索, 在使用此插件之前，需要将默认的<code>search</code>和<code>lunr</code> 插件去掉。默认的 search 不支持中文查询。</li><li>“github”：在右上角显示 github 仓库的图标链接。</li><li>“github-buttons”：提供了一个非官方的 GitHub 的 star 和 fork 等的显示。</li><li>“splitter”：提供了一个可以拖动的分割正文和目录的垂直条。使侧边栏的宽度可以自由调节。</li><li>“-sharing”, “sharing-plus”：分享当前页面，比默认的 sharing 插件多了一些分享方式。</li><li><del>“page-toc-button”： 悬浮目录。使用 anchor-navigation-ex 已经可以了。</del></li><li>“klipse”：嵌入一块功能，可在代码段中实时交互，即（输入代码 &gt; 执行结果。</li><li>“pageview-count”：阅读量统计。</li><li>“auto-scroll-table”：为避免表格过宽，增加滚动条。</li><li>“lightbox”：点击查看大图。</li></ul><p>——参考：<a href="https://www.cnblogs.com/mingyue5826/p/10307051.html" target="_blank" rel="noopener">https://www.cnblogs.com/mingyue5826/p/10307051.html</a>  【荐】</p><ul><li>“disqus”：添加 disqus 评论。</li><li><p>“prism”：</p><p>系统自带插件的高亮功能并不完善，可使用 prism 插件增强，该插件需要先禁用 <code>highlight</code> 插件。使用 <code>prism</code> 高亮插件的优点在于，可以使用不同的配色方案，且语法关键词识别度比 <code>highlight</code> 插件高。<code>prism</code> 支持的语言可在其<a href="https://prismjs.com/#languages-list" target="_blank" rel="noopener">官方网站</a>查询。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"-highlight"</span>, <span class="string">"prism"</span>, <span class="string">"prism-themes"</span>]</span><br><span class="line">&#125;</span><br><span class="line">"pluginsConfig": &#123;</span><br><span class="line">    "prism": &#123;</span><br><span class="line">        "css": [</span><br><span class="line">            <span class="string">"prismjs/themes/prism-solarizedlight.css"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>“ace”：使 GitBook 支持 ace，作用：插入代码高亮编辑器。</p></li><li><p>“KaTex”：为了支持数学公式，可以使用 <code>KaTex</code> 和 <code>MathJax</code> 插件，官网上说 <code>Katex</code> 速度要快于 <code>MathJax</code>。</p><p>注意：MathJax 允许你在你的网页中包含公式，无论是使用 LaTeX、MathML 或者 AsciiMath 符号，这些公式都会被 javascript 处理为 HTML、SVG 或者 MathML 符号。但是 GitHub，GitLab 都不支持引入 js，这个方法在 GitHub，GitLab 上都无效，即在 GitHub 是看不到数学公式的效果。</p></li><li><p>“anchors”：添加 GitHub 风格的锚点样式。</p></li><li><p>“edit-link”：使用该插件可以链接到当前页的源文件上。</p></li></ul><p>——参考：<a href="http://gitbook.zhangjikai.com/plugins.html" target="_blank" rel="noopener">http://gitbook.zhangjikai.com/plugins.html</a>  【荐】</p><ul><li>“atoc”：插入 TOC 目录。</li><li>“latex-codecogs”：使用数学方程式。参考 <a href="https://lowzj.com/notes/math-formula.html" target="_blank" rel="noopener">https://lowzj.com/notes/math-formula.html</a></li></ul><h1 id="二、发布于网络"><a href="#二、发布于网络" class="headerlink" title="二、发布于网络"></a>二、发布于网络</h1><h2 id="1-在gitbook-com上发布和管理书籍"><a href="#1-在gitbook-com上发布和管理书籍" class="headerlink" title="1. 在gitbook.com上发布和管理书籍"></a>1. 在gitbook.com上发布和管理书籍</h2><p>以上所有的步骤都是在本地进行的，如果需要实现电子书的版本管理，或者把电子书发布到网络上，还可以通过 Git 命令将本地的项目托管到 GitBook.com 上。</p><p>首先进入 <a href="https://www.gitbook.com/" target="_blank" rel="noopener">GitBook.com</a> 注册一个账号(本人使用的 Google 账号登录)，选择“Create an organization”创建一个 Organization。另外，从官网可以看到：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190219145307.png" alt></p><p>一个组织下免费用户只能有 2 个协作者，一个公开空间，一个私有空间。如果想要创建多本公开图书，创建多个组织就行，再在每个组织下创建公开图书。</p><p>再创建完 Organization 后，在选择 “Creat a new Space” 创建一个 Space（旧版叫 Book），然后就可以在线写书了。</p><p>访问之前先进行几个设置，先到 Organization –&gt; “Settings” –&gt; “Your Organization URL” 设置你的 url，比如 <code>strivebo</code>，再打开电子书，进入 “Domains” –&gt; “GitBook URL” –&gt; 设置域名 <code>https://strivebo.gitbook.io/</code> 的后部分，比如设置为 <code>javaee</code>，这样就可以使用 <code>https://strivebo.gitbook.io/javaee</code> 在线访问了。</p><h2 id="2-在github-com上发布和管理书籍"><a href="#2-在github-com上发布和管理书籍" class="headerlink" title="2. 在github.com上发布和管理书籍"></a>2. 在github.com上发布和管理书籍</h2><p>如果你喜欢使用 GitHub 管理电子书。还可以把您的 GitBook 帐户和 GitHub 帐户关联起来，这样两者的修改内容就可以互相同步了。你可以在 Account Settings 中的 Github 设置选项中去进行绑定。</p><p>完成关联后即可设置同步电子书项目了。以电子书项目“JavaEE-tutorial”为例，进入某个电子书的设置页面，切换到“Integrations”选项卡。在“GitHub”中设置和添加需要同步的仓库。如图（下图为已经添加了 GitHub 仓库）：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190221143040.png" alt></p><blockquote><p>注：其中设置过程中，有个选择 ”Which content should be used for the first synchronization ?“，我们这里选择“I write my content on GitHub“选项，即选择 GitHub 内容自动同步到 GitBook。</p></blockquote><p>添加完成会自动导入你添加的 GitHub 仓库内容。以后你上传到 GitHub 的内容就会自动同步到 GitBook 了。</p><p>另外，你也可以托管到 Github Pages，这个就不细讲了。我的 GitHub Page 用来搭建个人博客了，如果想要了解如何使用 GitHub Page 可以找我写的搭建博客的文章看看。</p><p>忘了说，你还可以发布到虚拟空间，也就是自己买的云服务器，使用步骤：</p><ol><li>在本地写作完，<code>gitbook build</code> 生成静态网页，即会在书籍目录下生成 <code>_book</code> 的目录，</li><li>在使用只需要将这个目录的文件上传到我们的虚拟空间中就可以了。</li></ol><h1 id="三、绑定域名"><a href="#三、绑定域名" class="headerlink" title="三、绑定域名"></a>三、绑定域名</h1><p>虽然 GitBook 上的所有的图书都可以通过地址 <code>http://{Organization}.gitbooks.io/{Gitbookn}/</code> 访问， 但我们有时候还是希望将图书绑定我们自己的域名上。</p><p>如何做呢？以腾讯云操作如下：</p><p>第一步，GitBook 的网站上进入你的电子书的，打开 “Domains” –&gt; “Custom Domain” 设置你的个性域名，比如我设置了一个二级域名为：<code>javaee.strivebo.com</code>；</p><p>第二步，进入腾讯云 <a href="https://console.qcloud.com/cns/domains" target="_blank" rel="noopener">云解析</a>，如下操作，选择一级域名，点击「分配其子域名至项目」：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190221170338.png" alt></p><p>然后在弹出的对话框填入二级域名前缀，项目名称，选择「默认项目」如图：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190221170539.png" alt></p><p>第三步，打开「协作子域名」选择刚刚添加的二级域名，点击解析，添加一条 CNAME 记录，将 <code>javaee.strivebo.com</code> 解析为 <code>strivebo.gitbooks.io.</code>，如下图：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190221170902.png" alt></p><p>第四步，就是等待域名解析记录在全球范围内生效，然后就可以地址栏输入 <code>javaee.strivebo.com</code> 阅读图书了。等待的时候不是固定的，如果你等待了很久还是不能访问，不妨翻墙试一下。</p><blockquote><p>注意：在添加 CNAME 解析的时候记录值，记得后面 <code>.io</code> 还有一个 <code>.</code>，如果你不加，这里在添加完解析会默认给加上。</p></blockquote><p>===========================</p><p>Update 2019-7-26 这里更新下内容：</p><p>在第三步，设置解析的域名，官方目前给出的是，解析到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Add this CNAME record to your domain by visiting your DNS provider or registrar.</span><br><span class="line">CNAME  hosting.gitbook.com</span><br></pre></td></tr></table></figure><p>即解析到 <code>hosting.gitbook.com</code>。</p><p>如果你新建了多个组织用来制作多本免费的在线电子书，并且都各自绑定域名，注意，域名解析那都是设置为解析到这个。</p><p>另外有一点注意，域名解析那里设置的二级域名，<strong>在 GitBook 网站的 Custom Domain 那也是要设置同样的二级域名，</strong>否则在检查 DNS 解析会提示该错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The domain is missing a CNAME record pointing to hosting.gitbook.com or the changes haven&apos;t propagated yet.</span><br></pre></td></tr></table></figure><p>关于域名解析，可以使用 nslookup 命令看看（windows 下可用）。简单使用，输入：nslookup，然后输入网址。</p><p>参考：<a href="https://cloud.tencent.com/document/product/302/7800" target="_blank" rel="noopener">云解析 子域名分项目管理 - 操作指南 - 文档平台 - 腾讯云</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何使用 GitBook 制作电子书，发布于网络并绑定个性域名？
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="GitBook" scheme="http://yoursite.com/tags/GitBook/"/>
    
  </entry>
  
  <entry>
    <title>篇Ⅱ：NexT主题的配置和优化指南</title>
    <link href="http://yoursite.com/2019/02/17/%E7%AF%87%E2%85%A1%EF%BC%9ANexT%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/02/17/篇Ⅱ：NexT主题的配置和优化指南/</id>
    <published>2019-02-17T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.476Z</updated>
    
    <content type="html"><![CDATA[<p>NexT 主题的配置和优化指南。<a id="more"></a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>(1) 什么是 Hexo：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网传送门</a></p><p>(2) Hexo 官网：<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo.io</a></p><p>(3) Hexo 主题的选择：</p><ul><li>官网：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes | Hexo</a></li><li>GitHub：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Themes · hexojs</a></li><li>知乎：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的 Hexo 主题？</a> </li></ul><p>本人使用主题为 NexT v5.1.4。搭建过程各个软件和工具的版本信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nodejs：v8.10.0</span><br><span class="line">npm：5.6.0  #命令 npm -v 可以查看到</span><br><span class="line">NexT主题版本：5.1.4  #打开站点配置文件_config.yml搜索version可以找到</span><br></pre></td></tr></table></figure><blockquote><p>注：新版的 NexT 主题源码早已转移在了这个仓库 &lt;<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p></blockquote><p><code>hexo version</code> 的信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo-cli:1.1.0</span><br><span class="line">os:Windows_NT 6.1.7601 win32 x64</span><br><span class="line">http_parser:2.7.0</span><br><span class="line">node:8.10.0</span><br><span class="line">v8:6.2.414.50</span><br><span class="line">uv:1.19.1</span><br><span class="line">z1ib:1.2.11</span><br><span class="line">ares:1.10.1-DEU modules:57</span><br><span class="line">nghttp2:1.25.0openss1:1.0.2n icu:60.1</span><br><span class="line">unicode:10.0</span><br><span class="line">cldr:32.0</span><br><span class="line">tz:2017c</span><br></pre></td></tr></table></figure><h2 id="一、主题基本配置"><a href="#一、主题基本配置" class="headerlink" title="一、主题基本配置"></a>一、主题基本配置</h2><p>关于博客主题的选择问题，考虑了很久一直决定不下来选哪个主题合适，在尝试了多个觉得不错的主题之后，最终还是决定选择 GitHub 最多 star 的 NexT 主题了。有那么多人在用，普遍大众应该还是很认可的。NexT 主题版本更新日志和下载：<a href="https://theme-next.org/" target="_blank" rel="noopener">NexT – Theme for Hexo</a> | <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT主题 - GitHub</a></p><p>关于这个主题的相关配置、优化定制网上容易找到非常多的资料，但基本的配置，还是建议直接看官方文章：</p><ul><li><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">主题配置 - NexT 使用文档</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%8F%82%E8%80%83" target="_blank" rel="noopener">主题配置参考 · iissnan/hexo-theme-next Wiki</a>（ NexT 主题 GitHub 上其 wiki 页面关于主题设置教程）</li></ul><p>本文会介绍 NexT 主题大部分的基本配置修改以及优化定制博客。</p><p>网上比较全面的修改指南，供参考：</p><ul><li>2016-04-07 <a href="http://www.lzblog.cn/2016/04/07/Hexo%E7%AB%99%E7%82%B9%E3%80%81NexT%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%85%A8%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener">Hexo站点、NexT主题修改全记录</a></li><li>2018-05-01 <a href="https://segmentfault.com/a/1190000014676320" target="_blank" rel="noopener">关于Hexo6.0搭建个人博客(进阶篇)</a></li><li>2017-05-24 <a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></li><li>……</li></ul><h3 id="0-主题设置-动态背景-显示当前浏览进度"><a href="#0-主题设置-动态背景-显示当前浏览进度" class="headerlink" title="(0) 主题设置/动态背景/显示当前浏览进度"></a>(0) 主题设置/动态背景/显示当前浏览进度</h3><p>(1) 主题设置</p><p>主题设定：打开主题配置文件，搜索 scheme 关键字。 你会看到有四行 scheme 的配置。我选择了 scheme: Pisces，下面是我的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><ul><li>Muse：默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li><p>Mist：Muse 的紧凑版本，整洁有序的单栏外观</p></li><li><p>Pisces：双栏 Scheme，小家碧玉似的清新</p></li><li>Gemini：左侧网站信息及目录，块+片段结构布局 </li></ul><p>(2) 动态背景</p><p>目前 NexT 主题有 4 种动态背景：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Canvas-nest</span><br><span class="line">three_waves</span><br><span class="line">canvas_lines</span><br><span class="line">canvas_sphere</span><br></pre></td></tr></table></figure><p>设置方法很简单，直接设置里需要的动态背景为<code>true</code>。</p><p>(3) 显示当前浏览进度</p><p>修改<code>themes/next/_config.yml</code>， scrollpercent 值由 <code>false</code> 改为 <code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><h3 id="1-关于文章所属「分类」和「标签」的设置"><a href="#1-关于文章所属「分类」和「标签」的设置" class="headerlink" title="(1) 关于文章所属「分类」和「标签」的设置"></a>(1) 关于文章所属「分类」和「标签」的设置</h3><p>之前我使用的别的主题，只要在 source 文件夹下新建的文章前面按如下格式表明所属分类和标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 自学编程成功概率有多少可能</span><br><span class="line">date: 2017-05-26 19:57:47</span><br><span class="line">tags: [编程,感悟]</span><br><span class="line">categories: 技术</span><br></pre></td></tr></table></figure><p>但是在 NexT 主题下的设置的步骤如下：</p><p>1) 先<code>hexo new page categories</code>新建 categorier 文件夹，其中会自动生成一个<code>index.md</code>文件，修改（即添加一行）为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-01-23 17:14:51</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>同理，「标签」也一样，<code>hexo new page tags</code>，生成 tags 文件夹，其中会自动生成一个<code>index.md</code>文件，修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-01-23 17:14:51</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>2) 然后写的博客文章，表明所属「分类」和拥有哪些「标签」，官方文档所说的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><p>但是我亲测，如下也是可以的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories: 技术</span><br><span class="line">tags: [编程,感悟]</span><br></pre></td></tr></table></figure></p><p>另外，对于 NexT 这个主题，对于「关于」这个菜单和上面新建分类和标签一样，也是需要手动创建文件夹的，<code>hexo new page about</code>，这样会生成 about 文件夹，同时自动生成<code>index.md</code>文件，然后可以在这个<code>.md</code>文件中写上自我个人介绍。（亲测过，<code>index.md</code>这个文件的名字不能修改，否则「关于」菜单出错）</p><p>关于这部分的设置，官方文档称其为「Front-matter」，「Front-matter」 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th style="text-align:left">参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td style="text-align:left">layout</td><td>布局</td><td></td></tr><tr><td style="text-align:left">title</td><td>标题</td><td></td></tr><tr><td style="text-align:left">date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td style="text-align:left">updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td style="text-align:left">comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td style="text-align:left">tags</td><td>标签（不适用于分页）</td><td></td></tr><tr><td style="text-align:left">categories</td><td>分类（不适用于分页）</td><td></td></tr><tr><td style="text-align:left">permalink</td><td>覆盖文章网址</td></tr></tbody></table><h3 id="2-添加本地添加搜索菜单"><a href="#2-添加本地添加搜索菜单" class="headerlink" title="(2) 添加本地添加搜索菜单"></a>(2) 添加本地添加搜索菜单</h3><p>1) 安装 <code>hexo-generator-searchdb</code> 插件：<code>npm install hexo-generator-searchdb --save</code> </p><p>2) 打开站点配置文件找到 Extensions 在下面添加（其实，新增以下内容到任意位置即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">      path: search.xml</span><br><span class="line">      field: post</span><br><span class="line">      format: html</span><br><span class="line">      limit: 10000</span><br></pre></td></tr></table></figure><p>3) 打开主题配置文件找到 Local search，将 enable 设置为 true，启动本地搜索功能，这样就能在页面可以看到搜索菜单了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="3-添加文章字数统计、阅读时长（next主题已经集成）"><a href="#3-添加文章字数统计、阅读时长（next主题已经集成）" class="headerlink" title="(3) 添加文章字数统计、阅读时长（next主题已经集成）"></a>(3) 添加文章字数统计、阅读时长（next主题已经集成）</h3><p>Hexo 提供了 <code>hexo-wordcount</code> 插件，新版本的 next 中集成了这一点，只需要安装插件然后开启功能就 ok。</p><p>第一步：安装 word_count 插件，在博客根目录下打开终端：<code>npm install hexo-wordcount --save</code></p><p> 第二步：在主题配置文件 <code>Blog\themes\next\config.yml</code> 中打开 post_wordcount 统计功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true # 单篇 字数统计</span><br><span class="line">  min2read: true # 单篇 阅读时长</span><br><span class="line">  totalcount: false # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure><p>如果仅仅只是打开 wordcount、min2read，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的 xxx 字，xx 分钟等字样，只有光秃秃的数字在那里。</p><p>解决方案：找到 \themes\next\layout_macro\post.swig 文件，将“字”、“分钟” 字样添加到如下位置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.wordcount&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">     &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&lt;span title=&quot;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125;&quot;&gt;</span><br><span class="line">     &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>然后才可以看到显示：<code>阅读时长 ≈ 2 分钟</code>，但若是不需要显示 <code>≈</code> ，就修改这个地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">        &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&apos;post.min2read&apos;) &#125;&#125; &amp;asymp;&lt;/span&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>把这里的<code>&amp;asymp;</code>删除即可。</p><p>注：如果想要在文章中使用，可以这样插入 <code>&lt;i class=&quot;fa fa-smile-o&quot; style=&quot;font-size:28px;color:#FF8247;&quot;&gt;&lt;/i&gt;</code> 即可使用。</p><p>参考：<a href="http://www.crocutax.com/2017/05/11/Hexo%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E3%80%81%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E3%80%81%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/" target="_blank" rel="noopener">Hexo添加字数统计、阅读时长、友情链接</a></p><h3 id="4-设置友情链接"><a href="#4-设置友情链接" class="headerlink" title="(4) 设置友情链接"></a>(4) 设置友情链接</h3><p>在主题配置文件添加，示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># title</span><br><span class="line">links_title: Links</span><br><span class="line">links:</span><br><span class="line">  MacTalk: http://macshuo.com/</span><br><span class="line">  Title: http://example.com/</span><br></pre></td></tr></table></figure><p>另外，侧边栏友情链接及菜单等旁边的图标，可以到 <a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">图标库</a> 找到自己喜欢的图标然后复制到相应代码中，也可以到这里找：<a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome，一套绝佳的图标字体库和CSS框架</a>。</p><h3 id="5-设置侧边栏头像"><a href="#5-设置侧边栏头像" class="headerlink" title="(5) 设置侧边栏头像"></a>(5) 设置侧边栏头像</h3><p>编辑主题的 <code>_config.yml</code>，新增字段 <code>avatar</code>， 值设置成头像的链接地址。</p><p>其中，头像的链接地址可以是：</p><ol><li>完整的互联网 URL，例如：<code>https://avatars1.githubusercontent.com/u/32269?v=3&amp;s=460</code></li><li>站点内的地址，例如：<ul><li><code>/uploads/avatar.jpg</code> 需要将你的头像图片放置在 <code>站点的 source/uploads/</code>（可能需要新建<code>uploads</code>目录）</li><li><code>/images/avatar.jpg</code> 需要将你的头像图片放置在 <code>主题的 source/images/</code> 目录下。</li></ul></li></ol><h3 id="6-设置订阅微信公众号"><a href="#6-设置订阅微信公众号" class="headerlink" title="(6) 设置订阅微信公众号"></a>(6) 设置订阅微信公众号</h3><blockquote><p>注：此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后。</p></blockquote><p>在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。将公众号二维码存放于博客<code>source/uploads/</code>目录下。然后编辑 主题配置文件，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Wechat Subscriber</span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: false</span><br><span class="line">  qcode: /uploads/wechat.jpg</span><br><span class="line">  description: 欢迎扫描二维码关注公众号一起成长~</span><br></pre></td></tr></table></figure><h3 id="7-开启打赏、禁用打赏文字抖动"><a href="#7-开启打赏、禁用打赏文字抖动" class="headerlink" title="(7) 开启打赏、禁用打赏文字抖动"></a>(7) 开启打赏、禁用打赏文字抖动</h3><p><strong>1、开启打赏</strong></p><p>越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要主题配置文件中填入微信和支付宝收款二维码图片地址即可开启该功能。打赏功能配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: /path/to/wechat-reward-image</span><br><span class="line">alipay: /path/to/alipay-reward-image</span><br></pre></td></tr></table></figure><p>本人操作：把收款二维码存放在了 NexT 主题的<code>source/uploads/</code>目录下，然后配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Reward  赞赏  </span><br><span class="line">reward_comment: 觉得文章对您有帮助请我喝杯咖啡吧^_^ </span><br><span class="line">wechatpay: /uploads/wechatpay.jpg</span><br><span class="line">alipay: /uploads/alipay.jpg</span><br></pre></td></tr></table></figure><p><strong>2、禁用打赏文字抖动</strong></p><p>1）方法一：</p><p>具体的做法就是注释掉文字抖动函数，文件路径：<code>/themes/next/source/css/_common/components/post/post-reward.styl</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 注释打赏文字抖动函数，将下面代码注释掉</span><br><span class="line">#wechat:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#alipay:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><p>可以在 <code>themes\next\source\css\_custom\custom.styl</code> 中添加重叠样式（推荐）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//二维码不抖动</span><br><span class="line">#wechat:hover p, #alipay:hover p &#123;</span><br><span class="line">    animation: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-添加RSS订阅功能"><a href="#8-添加RSS订阅功能" class="headerlink" title="(8) 添加RSS订阅功能"></a>(8) 添加RSS订阅功能</h3><p><code>RSS(Really Simple Syndication)</code> 简易信息聚合，在互联网上被广泛采用的内容包装和投递协。是一种描述同步网站内容的格式，使用 <code>xml</code> 格式。当网站内容更新时，可以通过订阅 <code>RSS</code> 源在 <code>RSS</code> 阅读器上获取更新的信息。大多数内容提供的网站都会提供 <code>RSS</code> 订阅的功能，方便用户去获取最新的内容。</p><p>这里主介绍怎么给自己的 <code>hexo</code> 博客添加 <code>RSS</code> 源。</p><p>①在 hexo 的根目录下执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>②在主题配置文件 <code>/theme/next/_config.yml</code> 文件中配置该插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br><span class="line">    hub:</span><br><span class="line">    content:</span><br><span class="line">    content_limit:</span><br><span class="line">    content_limit_delim: ' '</span><br></pre></td></tr></table></figure><p>参数的含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type: RSS的类型(atom/rss2)</span><br><span class="line">path: 文件路径,默认是atom.xml/rss2.xml</span><br><span class="line">limit: 展示文章的数量,使用0或则false代表展示全部</span><br><span class="line">hub:</span><br><span class="line">content: 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false</span><br><span class="line">content_limit: 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现</span><br><span class="line">content_limit_delim: 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.</span><br></pre></td></tr></table></figure><p>此外还有一种方法，就是在 <code>next</code> 主题的 <code>_config.yml</code> 文件中有个 <code>rss</code> 的配置，直接设置为 <code>true</code> 就可以了。</p><p>配置好之后运行 <code>hexo g</code>就可以找到你博客的 <code>pubilc</code> 文件夹下发现 <code>atom.xml</code> 文件了，然后运行 <code>hexo</code> 服务就可以在个人站点处看到 <code>RSS</code> 的订阅图标了,点击这个图标就可以出现 <code>RSS</code> 订阅的地址,就可以添加到你的 <code>RSS</code> 阅读器方便查看博客的最新文章。</p><p>参考：<a href="https://segmentfault.com/a/1190000012647294" target="_blank" rel="noopener">为hexo博客添加RSS订阅功能</a></p><h3 id="9-文章字数统计、阅读时长开启和关闭，以及使用图标还是文本"><a href="#9-文章字数统计、阅读时长开启和关闭，以及使用图标还是文本" class="headerlink" title="(9) 文章字数统计、阅读时长开启和关闭，以及使用图标还是文本"></a>(9) 文章字数统计、阅读时长开启和关闭，以及使用图标还是文本</h3><p>打开 NexT 主题配置文件 <code>_config.yml</code>，修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_wordcount:</span><br><span class="line">  item_text: true # 文章 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: false # 是否换行显示 字数统计 及 阅读时长</span><br></pre></td></tr></table></figure><p>参考：<a href="https://shjhe.github.io/hexo/2018/07/04/Hexo%20Next%E4%B8%BB%E9%A2%98%E5%BC%80%E5%90%AF%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%8A%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/" target="_blank" rel="noopener">Hexo Next主题开启字数统计及阅读时长</a></p><p>另外，如果想要把「发表于」、「分类于」、「阅读时长」修改为英文，可以打开 <code>\themes\next\languages\zh-Hans.yml</code> 文件，修改 posted、visitors 等值为英文，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">  created: 创建于</span><br><span class="line">  modified: 更新于</span><br><span class="line">  sticky: 置顶</span><br><span class="line">  posted: Posted on #发表于</span><br><span class="line">  visitors: Visitors #阅读次数 </span><br><span class="line">  in: In #分类于</span><br><span class="line">  read_more: 阅读全文</span><br><span class="line">  untitled: 未命名</span><br><span class="line">  toc_empty: 此文章未包含目录</span><br><span class="line">  wordcount: 字数统计</span><br><span class="line">  min2read: 阅读时长</span><br><span class="line">  totalcount: Site words total count</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>我在配置过程中有被官方文档坑了，目前猜测是官方文档没及时更新原因。在此，我记录下遇到的坑：</p><h4 id="1）菜单图标显示异常"><a href="#1）菜单图标显示异常" class="headerlink" title="1）菜单图标显示异常"></a>1）菜单图标显示异常</h4><p>问题：「首页」、「分类」、「标签」等这些菜单旁边的图标都显示是问号，未显示正常图标，我按照官方示例配置是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / </span><br><span class="line">  categories: /categories/  </span><br><span class="line">  tags: /tags/  </span><br><span class="line">  archives: /archives/  </span><br><span class="line">  about: /about/    </span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #公益: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.    </span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br></pre></td></tr></table></figure><p>网上很多文章写的都是上面那样的配置，但后来找到原因了，真正的配置是下面这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  archives: /archives || archive</span><br><span class="line">  categories: /categories || th</span><br><span class="line">  tags: /tags || tags</span><br><span class="line">  about: /about || user</span><br><span class="line">  </span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>原来 NexT 这个主题中的「菜单设置」被注释掉的那些配置样例，才是正确的配置。OS：官方文档真是坑人啊。</p><h4 id="2）友情链接图标显示异常"><a href="#2）友情链接图标显示异常" class="headerlink" title="2）友情链接图标显示异常"></a>2）友情链接图标显示异常</h4><p>问题：「友情链接」图标未正常显示。</p><p>官方文档包括网上很多文章写的都是如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname</span><br><span class="line">  邮箱: mailto:test@gamil.com</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br><span class="line">  GitHub: github</span><br><span class="line">  邮箱: envelope</span><br></pre></td></tr></table></figure><p>但正确配置其实是如下，和菜单配置类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  邮箱: mailto:test@gamil.com || envelope</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><h2 id="二、进阶优化配置"><a href="#二、进阶优化配置" class="headerlink" title="二、进阶优化配置"></a>二、进阶优化配置</h2><p>添加第三方服务，官网文档：<a href="https://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">第三方服务集成 - NexT 使用文档</a>。</p><ul><li>评论系统</li><li>数据统计与分析</li><li>内容分享服务</li><li>搜索服务</li><li>其他服务</li></ul><h3 id="1-在线联系（DaoVoice）"><a href="#1-在线联系（DaoVoice）" class="headerlink" title="(1) 在线联系（DaoVoice）"></a>(1) 在线联系（DaoVoice）</h3><p>参考：  <a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a>（含全站总字数、DaoVoice 在线联系等等）。</p><p>首先在 <a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">DaoVoice</a> 注册账号，注册完成后会得到一个 app_id，记下这个 app_id 的值，然后打开 <code>/themes/next/layout/_partials/head.swig</code>，写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>接着打开主题配置文件，在最后写下如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里填你的获得的 app_id</span><br></pre></td></tr></table></figure><blockquote><p><em>注1：安装成功后可以在 DaoVoice 控制台上的聊天设置里设置聊天窗口样式。</em></p><p><em>注2：我的 DaoVoice 账户注册使用的 GitHub 账户。</em></p></blockquote><h3 id="2-评论Disqus和文章显示评论数——已更换为LeanCloud的Valine评论功能"><a href="#2-评论Disqus和文章显示评论数——已更换为LeanCloud的Valine评论功能" class="headerlink" title="(2) 评论Disqus和文章显示评论数——已更换为LeanCloud的Valine评论功能"></a>(2) 评论Disqus和文章显示评论数——已更换为LeanCloud的Valine评论功能</h3><p>Disqus 官网：<a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a> （本人使用的是谷歌账号注册和登录）</p><p>NexT 主题集成 Disqus 评论，可以打开 NexT 配置文件 <code>_config.yml</code> 搜索「disqus」可以找到。</p><p>一开始我采用了 Disqus 评论，操作参考：<a href="http://www.cylong.com/blog/2017/03/26/hexo-next-disqus/" target="_blank" rel="noopener">Hexo 集成 Disqus 评论</a>。在完成 Disqus 网站注册和配置后（如何配置就不说了，看链接），打开 NexT 主题配置文件 <code>config.yml</code> 文件。</p><p>①大于等于 5.1.1 版本，将 disqus 下的 enable 设定为 true，同时提供你的 shortname，count 用于指定是否显示评论数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname:</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure><blockquote><p>enable 和 count 都设置为 true 后，这样你的所有文章会显示评论数，及页面下面会自动加载 Disqus 的评论插件。 </p></blockquote><p>②小于 5.1.1 版本，设定 disqus_shortname 的值即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disqus_shortname: shortname</span><br></pre></td></tr></table></figure><p>接下来就可以进入后台管理设置你的评论了。</p><p><strong><em>——update：2019-02-14 已弃用 Disqus 评论。参考了知乎文章：<a href="https://www.zhihu.com/question/267598518" target="_blank" rel="noopener">Hexo（NexT 主题）评论系统哪个好？ - 知乎</a>，采用了  Valine，不用登陆就可以用。</em></strong> </p><blockquote><p><em>顺便提一下关于几个评论系统的介绍：多说和网易云已经倒下了，其次畅言需要备案，Disqus， Hypercomments 和 LiveRe 都是国外的，加载速度贼慢。</em></p></blockquote><p><strong><em>Valine 设置步骤：</em></strong></p><ol><li><p>先需要去注册一个账号：<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud官网，点我注册</a></p><p>注册完以后需要创建一个应用，名字可以随便起，然后 <strong>进入应用 -&gt; 设置 -&gt; 应用key</strong>，获取你的 appid 和 appkey。</p></li><li><p>拿到你的 appid 和 appkey 之后，打开主题配置文件 <code>_config.yml</code> 搜索 valine，填入 appid 和 appkey。</p></li></ol><p>我的配置：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">    enable: true</span><br><span class="line">    appid: 你的appid    </span><br><span class="line">    appkey: 你的appkey </span><br><span class="line">    notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">    verify: false # Verification code</span><br><span class="line">    placeholder: Just go go # comment box placeholder</span><br><span class="line">    avatar: mm # gravatar style   </span><br><span class="line">    guest_info: nick,mail,link # custom comment header</span><br><span class="line">    pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><p>另外：如果提示安全问题，请参考网上 <a href="https://11.tt/posts/2018/add-valine-to-your-blog/#%E9%85%8D%E7%BD%AE%E5%AE%89%E5%85%A8%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">该文</a> 添加安全域名。即在 Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名，把你的域名加进去。</p><p><strong><em>(1) Valine邮件提醒</em></strong></p><p>Valine 官方提供的邮件提醒功能是基于<code>Leancloud的密码重置邮件提醒</code>，操作步骤如下：</p><p>进入 <a href>Leancloud</a> -&gt; 选择你的评论所存放的<code>应用</code> -&gt; <code>设置</code> -&gt; <code>邮件模板</code>，按下图设置好用于<code>重置密码</code>的邮件主题&gt;然后保存：</p><ol><li><p>修改邮件主题：<code>你在 的评论收到了新的评论</code></p></li><li><p>修改内容：将下面的代码复制到“内容”中，并将其中的<code>你的网址首页链接</code>改为你的网址首页链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"你的网址首页链接"</span> <span class="attr">style</span>=<span class="string">"display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;"</span>&gt;</span>马上查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>点击“保存”按钮</p></li><li><p>修改 NexT 主题配置文件，搜索 <code>valine</code>（快速定位），将其中的<code>notify</code>改为<code>true</code>。</p></li></ol><p>设置完成后：</p><ol><li><p>发表评论需要像下面这样的验证</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216212041.png" alt></p></li><li><p>如果评论者 A 评论文章时候留下了邮箱，那么其他人比如 B，点击回复 A 的时候，那么 A 的邮箱就会收到相应的邮件通知，提示：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216212307.png" alt></p><p>注意：点击查看，会跳转到评论的博客主页，而不是对应的评论文章。</p></li></ol><p>注意事项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 发送次数过多，可能会暂时被Leancloud 屏蔽邮件发送功能</span><br><span class="line">- 由于`邮件提醒`功能使用的“Leancloud的密码重置邮件提醒”，只能传递`昵称`、`邮箱`两个属性，所以邮件提醒链接`无法直达指定文章页`。请悉知。</span><br><span class="line">- 开启`邮件提醒`会默认开启`验证码`选项。</span><br><span class="line">- 该功能目前还在测试阶段，谨慎使用。</span><br><span class="line">- 目前`邮件提醒`正处于测试阶段，仅在`子级`对存在邮件地址的`父级`发表评论时发送邮件</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.nhtzj.com/3315416634/" target="_blank" rel="noopener">NexT主题设置Valine评论系统邮件提醒</a></p><p><strong><em>(2)文章显示评论数问题：</em></strong> </p><p><strong>注意，换为  Valine 后，发现文章的评论数不显示，</strong>尝试了改动某处看是否能解决问题，发现解决了。操作这样的：把 disqus 的评论关闭，即设置主题配置文件下的 disqus 下的 enable 为 false，即可正常显示评论数。</p><h3 id="3-文章阅读次数（注：-使用的LeanCloud）"><a href="#3-文章阅读次数（注：-使用的LeanCloud）" class="headerlink" title="(3)文章阅读次数（注： 使用的LeanCloud）"></a>(3)文章阅读次数（注： 使用的LeanCloud）</h3><p>①打开 LeanCloud 官网，进入 <a href="https://leancloud.cn/login.html#/signup" target="_blank" rel="noopener">注册页面</a> 注册。完成邮箱激活后，点击头像，进入<code>控制台</code>页面，创建一个新应用(类型为<code>JavaScript SDK</code>)，点击应用进入；</p><p>②创建名称为 <code>Counter</code> 的 Class；</p><p>③修改配置文件，编辑网站根目录下的 <code>_config.yml</code> 文件，添加如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: 你的app_id</span><br><span class="line">  app_key: 你的app_key</span><br></pre></td></tr></table></figure><p>其中，app_id 和 app_key 在你所创建的应用的<code>设置-&gt;应用Key</code>中。</p><p>注：为了保证应用的统计计数功能仅应用于自己的博客系统，你可以在<code>应用-&gt;设置-&gt;安全中心</code>的<code>Web安全域名</code>中加入自己的博客域名，以保证数据的调用安全。</p><p>参考：</p><ul><li><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></li><li><a href="http://happywayq.com/Hexo%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E6%95%B0%E5%92%8C%E7%AB%99%E7%82%B9%E8%AE%BF%E9%97%AE%E6%95%B0/" target="_blank" rel="noopener">Hexo之NexT主题优化（4）-添加文章访问数和站点访问数</a></li><li><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="noopener">Hexo的NexT主题个性化：添加文章阅读量</a></li></ul><h3 id="4-动态背景、点击出现桃心效果、去除文章底部带-号的标签、文章下面标签样式更改"><a href="#4-动态背景、点击出现桃心效果、去除文章底部带-号的标签、文章下面标签样式更改" class="headerlink" title="(4 动态背景、点击出现桃心效果、去除文章底部带#号的标签、文章下面标签样式更改"></a>(4 动态背景、点击出现桃心效果、去除文章底部带#号的标签、文章下面标签样式更改</h3><p>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/qq_32454537/article/details/79482896" target="_blank" rel="noopener">2018最新版Hexo博客Next主题6.0配置优化</a></p><p>标签样式更改，打开 <code>\themes\next\source\css\_custom\custom.styl</code>，添加：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//文章下面的标签样式</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-tags</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(0,0,0,.12), <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,0,0,.24);</span><br><span class="line"><span class="attribute">transition</span>:.<span class="number">2s</span> ease-out;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&amp;:hover &#123;</span><br><span class="line">    color: $blue;</span><br><span class="line">    //text-decoration: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-更改正文和代码的字体-更改内容区域的宽度"><a href="#5-更改正文和代码的字体-更改内容区域的宽度" class="headerlink" title="(5) 更改正文和代码的字体/更改内容区域的宽度"></a>(5) 更改正文和代码的字体/更改内容区域的宽度</h3><p><strong>(1) 更改正文和代码字体的样式和大小</strong> </p><p>NexT 从 5.0.1 版本开始提供一个字体定制特性。以下的修改将覆盖<code>source/css/_variables/base.styl</code>「字体定制」的特性。 编辑主题下的 <code>source/css/_variables/custom.styl</code> 文件，新增两个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 正文字体的大小</span><br><span class="line">$font-size-base = 16px</span><br><span class="line"></span><br><span class="line">// 代码字体的大小</span><br><span class="line">$code-font-size = 14px</span><br></pre></td></tr></table></figure><p>注1：代码字体我设置的为 14px，正文字体设置的为 16px，字体族设置的为 <code>$font-family-base = Lato,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,sans-serif</code>。</p><p>注2：关于代码大小设置，除了可以修改主题下的 <code>source/css/_variables/custom.styl</code> 文件，还可以通过修改同目录下的 <code>source/css/_variables/base.styl</code> 文件达到同一目的，base.styl 会覆盖 custom.style 的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace</span><br><span class="line">$code-font-size                 = 15px</span><br></pre></td></tr></table></figure><p>另外，代码大小设置还可以直接改样式文件<code>`source/css/_common/_vendor/highlight/hilight.styl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$code-block</span><br><span class="line">  background: highlight-background</span><br><span class="line">  margin: 20px 0</span><br><span class="line">  padding: 15px</span><br><span class="line">  overflow: auto</span><br><span class="line">  font-size 15px //$code-font-size;    // 改这里</span><br><span class="line">  color: highlight-foreground</span><br><span class="line">  line-height:  $line-height-code-block</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/iissnan/hexo-theme-next/issues/306" target="_blank" rel="noopener">代码字体大小怎么改？ · Issue #306 · iissnan/hexo-theme-next</a></p><p><strong>(2) 修改代码区主题</strong> </p><p>新版的 Next 主题卡得很严，需要这样修改。需要动的地方有：主题的 <code>_config.yml</code> 文件，站点的 <code>_config.yml</code> 文件。</p><p>先在站点的配置文件中，搜索<code>hightlight</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br></pre></td></tr></table></figure><p>文字自动检测默认不启动，所以改成 <code>true</code> 使其起作用。看英文应该能明白什么意思。解释下，line_number 表示是否显示代码行号，auto_detect 表示是否对未标识哪种语言的代码进行自动检测，tab_replace 表示是否替换 tab 为空格。附上一个关于 Hexo 的站点及主题配置文件常见配置项的中文解释 <a href="http://ruikye.com/2014/08/30/Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%C2%B7-%E8%BF%9B%E9%98%B6%E7%AF%87/" target="_blank" rel="noopener">Hexo 搭建个人博客 · 进阶篇</a>，我有摘录并放在本文附录部分。</p><p>注意：我有把 auto_detect 设置为了 true，但 <code>hexo s</code> 生成博客时报错：<code>TypeError: Cannot set property &#39;lastIndex&#39; of undefined</code>，后来网上找到了同样遇到该问题的人，链接：<a href="http://masikkk.com/article/hexo-12-google-code-prettify/" target="_blank" rel="noopener">Hexo博客(12)使用google-code-prettify代码高亮 | masikkk</a>，根据文章说，将站点配置文件 <code>_config.yml</code> 中的 highlight 选项的 auto_detect 设为 false，完美解决。确实如此。</p><p>再到主题的配置文件找到 <code>highlight_theme: normal</code>，注释显示有五种显示主题可用，分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">normal</span><br><span class="line">night</span><br><span class="line">night eighties</span><br><span class="line">night blue</span><br><span class="line">night bright</span><br></pre></td></tr></table></figure><p>选择什么要看个人审美了。</p><p><strong>(3) 更改内容区域的宽度</strong> </p><p>NexT 对于内容的宽度的设定如下：</p><ul><li>700px，当屏幕宽度 &lt; 1600px</li><li>900px，当屏幕宽度 &gt;= 1600px</li><li>移动设备下，宽度自适应</li></ul><p>如果你需要修改内容的宽度，同样需要编辑样式文件。 编辑主题的 <code>source/css/_variables/custom.styl</code> 文件，新增变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><p>注，当你使用 Pisces 风格时可以用下面的方法，我即采用的如下设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//当你使用 Pisces 风格时可以用下面的方法，在 source/css/_variables/custom.styl 中添加</span><br><span class="line">$main-desktop = 1200px</span><br><span class="line">$content-desktop = 950px</span><br></pre></td></tr></table></figure><p>参考官网文档：</p><ul><li><a href="https://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">常见问题 - NexT 使用文档</a></li></ul><h3 id="6-添加自定义菜单"><a href="#6-添加自定义菜单" class="headerlink" title="(6) 添加自定义菜单"></a>(6) 添加自定义菜单</h3><p>以新建「相册」菜单为例：在博客目录下的 source 文件夹下新建名为 photo 文件夹，然后在 photo 文件夹下新建一个 index.md 文件，然后在该文件填写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 相册</span><br><span class="line">date: 2018-04-16 22:14:07</span><br><span class="line">type: &quot;photo&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后打开主题配置文件 <code>_config.yml</code>，在 menu 中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  archives: /archives || archive</span><br><span class="line">  categories: /categories || th</span><br><span class="line">  tags: /tags || tags</span><br><span class="line">  #添加了「相册」菜单</span><br><span class="line">  相册: /photo || camera</span><br></pre></td></tr></table></figure><blockquote><p><em>解释下：这里的「相册」是博客中显示的菜单名称，紧跟的 photo 要和前面 index.md 文件的 type 值一致，|| 后面的菜单的图标，图标名称来自于 <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">FontAwesome icon</a>，若没有配置图标，默认会使用问号图标。</em></p></blockquote><p>参考：<a href="https://juejin.im/post/58eb2fd2a0bb9f006928f8c7" target="_blank" rel="noopener">hexo高阶教程：next主题优化之加入网易云音乐、网易云跟帖、炫酷动态背景、自定义样式，打造属于你自己的定制化博客</a></p><h3 id="7-添加音乐、视频"><a href="#7-添加音乐、视频" class="headerlink" title="(7) 添加音乐、视频"></a>(7) 添加音乐、视频</h3><p><strong>1、添加单曲音乐</strong></p><p>进入 <a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a> 的官网，搜索歌曲，点开歌曲，点击「生成外链播放器」生成外链，直接拿来用就行。iframe 插件可以在代码中设置宽高等参数，auto 为设置是否自动播放，auto 设为 0 表示手动播放，为 1 表示自动播放。flash 不可以自己设置参数。</p><p>自动播放示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">350</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=185678&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="350" height="86" src="//music.163.com/outchain/player?type=2&id=185678&auto=1&height=66"></iframe><p><strong>2、添加歌单</strong></p><p>如果想要加入歌单，就需要找到歌单或者自己创建歌单，热后点击歌单，找到并点击进去「生成外链播放器」，其余操作就和上面一样了。不过，若歌单有变化的话，这个外链的歌曲同样跟着变。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">530</span> <span class="attr">height</span>=<span class="string">450</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=2637966813&amp;auto=0&amp;height=430"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="530" height="450" src="//music.163.com/outchain/player?type=0&id=2637966813&auto=1&height=430"></iframe><p><strong>3）添加视频</strong></p><p>打开视频网站，比如优酷、YouTube 等。以优酷为例，打开某个视频后，点击「分享」，再复制 iframe 代码粘贴到 Markdown 文章即可。示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">498</span> <span class="attr">width</span>=<span class="string">510</span> <span class="attr">src</span>=<span class="string">'http://player.youku.com/embed/XMTU0ODEwMzM3Ng=='</span> <span class="attr">frameborder</span>=<span class="string">0</span> '<span class="attr">allowfullscreen</span>'&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-设置标题样式（为浅蓝色）"><a href="#8-设置标题样式（为浅蓝色）" class="headerlink" title="(8) 设置标题样式（为浅蓝色）"></a>(8) 设置标题样式（为浅蓝色）</h3><p>进入主题目录 <code>hexo\themes\next\source\css\_common\components\post\</code> 修改 <code>post.sty</code> 文件，在配置的后面添加下面的代码。该文件是博文的样式表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*添加下面的CSS代码来修改博客标题样式*/</span><br><span class="line">.page-post-detail .post-title &#123;</span><br><span class="line">  font-size: 26px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  word-break: break-word;</span><br><span class="line">  font-weight: $posts-expand-title-font-weight</span><br><span class="line">  background-color: #b9d3ee;</span><br><span class="line">  border-radius:.3em;</span><br><span class="line">  line-height:1em;</span><br><span class="line">  padding-bottom:.12em;</span><br><span class="line">  padding-top:.12em;</span><br><span class="line">  box-shadow:2px 2px 7px #9fb6cd;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*添加上面的CSS代码来修改博客标题样式*/</span><br><span class="line">@import &quot;post-expand&quot;;</span><br><span class="line">@import &quot;post-collapse&quot;;</span><br><span class="line">@import &quot;post-type&quot;;</span><br><span class="line">@import &quot;post-title&quot;;</span><br></pre></td></tr></table></figure><p><em>注意：如果想把主页标题样式一同修改，可以用把 <code>.page-post-detail</code> 去掉。</em></p><p>参考：<a href="http://www.aisun.org/2017/10/hexo-next+dingzhi/" target="_blank" rel="noopener">hexo框架基于next主题定制</a>（各种优化，很全面）</p><h3 id="9-设置文章封面图片"><a href="#9-设置文章封面图片" class="headerlink" title="(9) 设置文章封面图片"></a>(9) 设置文章封面图片</h3><p>如果只是插入本地图片作为文章封面，即在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。</p><p>按如下方式操作：</p><p>1）修改 <code>\themes\next\layout\_macro\post.swing</code> 文件。将如下代码复制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.summary_img  %&#125;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"out-img-topic"</span>&gt;</span><br><span class="line">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-topic"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>添加到下图所示的位置:</p><p><img src="https://neveryu.github.io/images/hexo-next-five-1.png" alt></p><p>2）在新建的文章添加一个字段属性：<code>summary_img</code>。<code>summary_img</code> 的值是图片的路径，如： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: CSS 各种Hack手段</span><br><span class="line">date: 2017-06-25 03:25:24</span><br><span class="line">categories: 前端</span><br><span class="line">tags: [CSS]</span><br><span class="line">comments: false</span><br><span class="line">summary_img: /images/css-hack-1.png</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>当然也可以不设置<code>summary_img</code>的图片路径，即也就不会显示封面图。</p><p><strong>PS：这里有个注意点，亲测，图片存放的文件夹只能新建在 <code>source</code> 目录下。</strong></p><p>参考文章：</p><ul><li><a href="http://www.xinxiaoyang.com/programming/2016-11-25-hexo-image-bug/" target="_blank" rel="noopener">Hexo 图片插入</a></li><li><a href="https://neveryu.github.io/2017/07/15/hexo-next-five/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客（五）——插入封面</a> </li></ul><h3 id="10-网页加载进度条"><a href="#10-网页加载进度条" class="headerlink" title="(10) 网页加载进度条"></a>(10) 网页加载进度条</h3><p>打开 <code>/themes/next/layout/_partials/head.swig</code> 文件，在文件末尾添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 网页加载条 --&gt;</span><br><span class="line">&lt;script src=&quot;https://neveryu.github.io/js/src/pace.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后，打开 <code>/themes/source/css/_custom/custom.styl</code> 文件，在文件末尾添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">/*网页加载条*/</span><br><span class="line">/* This is a compiled file, you should be editing the file in the templates directory */</span><br><span class="line">.pace &#123;</span><br><span class="line">  -webkit-pointer-events: none;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace-inactive &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress &#123;</span><br><span class="line">  background: #1e92fb;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress-inner &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;</span><br><span class="line">  opacity: 1.0;</span><br><span class="line">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-activity &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 15px;</span><br><span class="line">  right: 15px;</span><br><span class="line">  width: 14px;</span><br><span class="line">  height: 14px;</span><br><span class="line">  border: solid 2px transparent;</span><br><span class="line">  border-top-color: #e90f92;</span><br><span class="line">  border-left-color: #e90f92;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  animation: pace-spinner 400ms linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-ms-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*网页加载条 END*/</span><br></pre></td></tr></table></figure><p>参考：<a href="https://neveryu.github.io/2017/07/15/hexo-next-five/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客（五） | Never_yu’s Blog</a></p><p>另外，还看到一个方法，参考：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hexo-NexT配置超炫网页效果 - 简书</a></p><blockquote><p>编辑主题配置文件搜索<code>pace</code>，将其值改为<code>ture</code>就可以了，选择一款你喜欢的样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; # Progress bar in the top during page loading.</span><br><span class="line">&gt; pace: ture</span><br><span class="line">&gt; # Themes list:</span><br><span class="line">&gt; #pace-theme-big-counter</span><br><span class="line">&gt; #pace-theme-bounce</span><br><span class="line">&gt; #pace-theme-barber-shop</span><br><span class="line">&gt; #pace-theme-center-atom</span><br><span class="line">&gt; #pace-theme-center-circle</span><br><span class="line">&gt; #pace-theme-center-radar</span><br><span class="line">&gt; #pace-theme-center-simple</span><br><span class="line">&gt; #pace-theme-corner-indicator</span><br><span class="line">&gt; #pace-theme-fill-left</span><br><span class="line">&gt; #pace-theme-flash</span><br><span class="line">&gt; #pace-theme-loading-bar</span><br><span class="line">&gt; #pace-theme-mac-osx</span><br><span class="line">&gt; #pace-theme-minimal</span><br><span class="line">&gt; # For example</span><br><span class="line">&gt; # pace_theme: pace-theme-center-simple</span><br><span class="line">&gt; pace_theme: pace-theme-minimal</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="11-底部：显示-或隐藏-底部”强力驱动”和版本"><a href="#11-底部：显示-或隐藏-底部”强力驱动”和版本" class="headerlink" title="(11) 底部：显示(或隐藏)底部”强力驱动”和版本"></a>(11) 底部：显示(或隐藏)底部”强力驱动”和版本</h3><p>打开 <code>themes/next/_config.yml</code> 文件，将 <code>powered</code> 设置为 <code>true</code>， 显示“强力驱动”；将 <code>enable</code> 设置为 <code>true</code>，显示版本信息。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 页脚</span><br><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  since: 2018</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  # icon: user</span><br><span class="line">  icon: sun-o</span><br><span class="line"></span><br><span class="line">  # If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Hexo link (Powered by Hexo).</span><br><span class="line"><span class="deletion">-  powered: true</span></span><br><span class="line"><span class="addition">+  powered: false</span></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line"><span class="deletion">-    enable: true</span></span><br><span class="line"><span class="addition">+    enable: false</span></span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: true</span><br></pre></td></tr></table></figure><p>参考：<a href="https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-52" target="_blank" rel="noopener">Hexo+NexT 打造一个炫酷博客 - 掘金</a>（各种定制优化，非常全面）</p><p>如果需要修改，可以参考下节 (12) 的内容。</p><h3 id="12-底部：设定站点建立时间和作者名称"><a href="#12-底部：设定站点建立时间和作者名称" class="headerlink" title="(12) 底部：设定站点建立时间和作者名称"></a>(12) 底部：设定站点建立时间和作者名称</h3><p>(1) 设定站点建立时间</p><p>这个时间将在站点的底部显示，例如 <code>© 2013 - 2015</code>。编辑主题配置文件 <code>_config.yml</code>，新增字段 <code>since</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure><p>其中，网站页面会在 <code>-</code> 后面的年份会自动根据当前年份显示。参考：<a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E5%AE%9A%E7%AB%99%E7%82%B9%E5%BB%BA%E7%AB%8B%E6%97%B6%E9%97%B4" target="_blank" rel="noopener">设定站点建立时间 · iissnan/hexo-theme-next Wiki</a></p><p>(2) 修改站点时间后面的作者名称</p><p>找到 <code>\themes\next\layout\_partials\</code>下面的<code>footer.swig</code>文件，打开可以发现如下语句：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216135929.png" alt></p><p>第一个框，是底部的站点时间后面的作者名称，如果想加东西，一定要在双大括号外面写。如：<code>xxx</code>，当然你要是想改彻底可以变量都删掉，看个人意愿。</p><p><strong><em>(3) 顺带补充其他——修改底部”强力驱动”和版本信息</em></strong></p><p>第二个框，是底部的 “由Hexo驱动” 的 Hexo 链接，先给删掉防止跳转，如果想跳转当然也可以自己写地址，至于中文一会处理。注意删除的时候格式不能错，只把<code>&lt;a&gt;</code>标签这部分删除即可，留着两个单引号’’，否则会出错。在我所使用的 next 版本删除 <code>&lt;a&gt;</code> 标签后结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.powered %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span>&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __('footer.powered', '') &#125;&#125;&#123;#</span><br><span class="line">#&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>第三个框，是更改底部的“主题-Next.XX”，这个比较爽直接将<code>-</code> 后面<code>&lt;/div&gt;</code> 之前的都删掉，，删掉之后在上一行 <code>-</code> 后面可以随意加上你想显示的东西，不要显示敏感信息哟，请自重。在我所使用的 next 版本删除 <code>-</code> 后面的对应代码的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; &amp;mdash; &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>注意，我这里的<code>&amp;mdash;</code> 对应 <code>-</code>， 这里后面可以加上自己想要添加的内容，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"https://pages.github.com/"</span>&gt;</span>Hosted By GitHub Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，处理剩余的中文信息。找到这个地方<code>\themes\next\languages\</code> 下面的语言文件zh-Hans.yml（这里以中文为例，有的习惯用英文的配置文件，道理一样，找对应位置即可） 打开之后，如图：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216143647.png" alt></p><p>看到了吧，这个就是传值传过去的，你想显示什么就在这里面大肆的去改动吧。其实在第二个框中，就可以把值都改掉，不用接受传值的方式，完全自己可以重写。不过我不建议那样做，因为传值这样只要是后续页面需要这几个值那么就都会通过取值去传过去，要是在刚才 footer 文件中直接写死，后续不一定哪个页面需要传值，但是值为空了或者还是原来的，可就尴尬了。所以还是这样改动吧。</p><p>参考：<a href="https://juejin.im/post/5b440ba251882519f6475079" target="_blank" rel="noopener">Hexo Next底部powered by的logo栏更改以及注意事项（附官方文档,文末有福利链） - 掘金</a></p><h3 id="13-底部：添加网站已运行时间"><a href="#13-底部：添加网站已运行时间" class="headerlink" title="(13) 底部：添加网站已运行时间"></a>(13) 底部：添加网站已运行时间</h3><p>在<code>themes/layout/_parrials/footer.swing</code> 中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加网站的运行时间--&gt;</span><br><span class="line">&lt;span id=<span class="string">"sitetime"</span>&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;script language=<span class="string">"javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siteTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="string">"siteTime()"</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> seconds = <span class="number">1000</span></span><br><span class="line"><span class="keyword">var</span> minutes = seconds * <span class="number">60</span></span><br><span class="line"><span class="keyword">var</span> hours = minutes * <span class="number">60</span></span><br><span class="line"><span class="keyword">var</span> days = hours * <span class="number">24</span></span><br><span class="line"><span class="keyword">var</span> years = days * <span class="number">365</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">var</span> todayYear = today.getFullYear()</span><br><span class="line"><span class="keyword">var</span> todayMonth = today.getMonth()</span><br><span class="line"><span class="keyword">var</span> todayDate = today.getDate()</span><br><span class="line"><span class="keyword">var</span> todayHour = today.getHours()</span><br><span class="line"><span class="keyword">var</span> todayMinute = today.getMinutes()</span><br><span class="line"><span class="keyword">var</span> todaySecond = today.getSeconds()</span><br><span class="line"><span class="keyword">var</span> t1 = <span class="built_in">Date</span>.UTC(<span class="number">2017</span>,<span class="number">4</span>,<span class="number">18</span>,<span class="number">11</span>,<span class="number">00</span>,<span class="number">00</span>)</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="built_in">Date</span>.UTC(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond)</span><br><span class="line"><span class="keyword">var</span> diff = t2-t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> diffYears = <span class="built_in">Math</span>.floor(diff/years)</span><br><span class="line"><span class="keyword">var</span> diffDays = <span class="built_in">Math</span>.floor((diff/days)-diffYears*<span class="number">365</span>)</span><br><span class="line"><span class="keyword">var</span> diffHours = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours)</span><br><span class="line"><span class="keyword">var</span> diffMinutes = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes)</span><br><span class="line"><span class="keyword">var</span> diffSeconds = <span class="built_in">Math</span>.floor((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"sitetime"</span>).innerHTML=<span class="string">" 本站已运行"</span>+diffYears+<span class="string">" 年 "</span>+diffDays+<span class="string">" 天 "</span>+diffHours+<span class="string">" 小时 "</span>+diffMinutes+<span class="string">" 分钟 "</span>+diffSeconds+<span class="string">" 秒&lt;br&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line">siteTime()</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/3a01cc514ce7" target="_blank" rel="noopener">Hexo和Next主题的相关设置（持续更新） - 简书</a></p><h3 id="14-底部：添加访问人数和访问量-使用的不蒜字统计-、全站总字数"><a href="#14-底部：添加访问人数和访问量-使用的不蒜字统计-、全站总字数" class="headerlink" title="(14) 底部：添加访问人数和访问量(使用的不蒜字统计)、全站总字数"></a>(14) 底部：添加访问人数和访问量(使用的不蒜字统计)、全站总字数</h3><p><strong>(1) 添加人数和访问量</strong></p><p>不蒜子是号称极简网页计数器，事实上也是如此，仅仅需要两步即可完成统计，分别为引入不蒜子 JS 和显示统计数，为访问量统计与访问人数统计。</p><p>①引入不蒜子 JS</p><p>打开 <code>\themes\next\layout_partials\footer.swig</code> 文件，在顶部添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>②显示统计数</p><p><em>访问量统计：</em></p><p>算法a：pv 的方式，单个用户连续点击 n 篇文章，记录 n 次访问量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>访问人数统计：</em></p><p>算法b：uv的方式，单个用户连续点击 n 篇文章，只记录 1 次访客数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着在合适的地方添加需要显示的统计数字代码（同上文件），我是在如下位置添加的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不蒜字统计 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  访问人数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;|&amp;nbsp;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">  总访问量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;|&amp;nbsp;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加博客全站总字数统计--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-pencil"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共 &#123;&#123; totalcount(site) &#125;&#125; 字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.custom_text %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-custom"</span>&gt;</span>&#123;#</span><br><span class="line">  #&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#</span><br><span class="line">#&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><em>注：之前就是使用的该方式添加的访问人数、访问量，但后来发现博客并不显示了，猜测可能是服务商关闭或是别的什么问题。</em> </p><p>参考：</p><ul><li><a href="https://blog.csdn.net/FanLinXi_WuXi/article/details/81988904" target="_blank" rel="noopener">Hexo+Github博客小功能之添加不蒜子访问统计</a></li><li><a href="https://www.zxpblog.cn/2018/08/11/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Hexo搭建属于自己的博客</a> </li></ul><p><strong>(2) 添加博客全站字数统计</strong></p><p>添加单篇文章的字数统计，参考「(3) 添加文章字数统计、阅读时长（next主题已经集成）」小节内容。</p><p>底部添加全站总字数，方法类似。先安装：<code>npm install hexo-wordcount --save</code>，打开 <code>/themes/next/layout/_partials/footer.swig</code> 在合适位置添加相应代码，我的和不蒜字统计在一起。</p><p>添加在别的地方，参考：<a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">Hexo-NexT配置超炫网页效果 - 简书</a></p><p><strong>!!!最后，根据 (11)、(12)、(13) 、(14) 节的的修改后的结果：</strong></p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216134149.png" alt></p><h3 id="15-设置文章加密访问"><a href="#15-设置文章加密访问" class="headerlink" title="(15) 设置文章加密访问"></a>(15) 设置文章加密访问</h3><p>打开 <code>themes/next/layout/_partials/head.swig</code>文件，在 ``之前插入代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后写文章时加上<code>password: xxx</code>，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析 | 遇见西门</a>（非常全面~）</p><h3 id="16-文章末尾添加”本文结束”标记-文章末尾追加版权信息"><a href="#16-文章末尾添加”本文结束”标记-文章末尾追加版权信息" class="headerlink" title="(16) 文章末尾添加”本文结束”标记/文章末尾追加版权信息"></a>(16) 文章末尾添加”本文结束”标记/文章末尾追加版权信息</h3><p>参考：<a href="https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-52" target="_blank" rel="noopener">Hexo+NexT 打造一个炫酷博客 - 掘金</a></p><h3 id="17-取消文章目录对标题的自动编号和取消目录"><a href="#17-取消文章目录对标题的自动编号和取消目录" class="headerlink" title="(17) 取消文章目录对标题的自动编号和取消目录"></a>(17) 取消文章目录对标题的自动编号和取消目录</h3><p>(1) 取消文章目录对标题的自动编号</p><p>修改 NexT 主题配置文件 <code>_config.yml</code>，搜索  <code>number</code> ，值改为 <code>false</code>。</p><p>(2) 取消目录</p><p>如果想干脆取消目录，修改 NexT 主题配置文件 <code>_config.yml</code>，搜索  <code>toc:</code> ，修改 toc 下的 enable 值改为 <code>false</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: false</span><br><span class="line"></span><br><span class="line">  number: false</span><br></pre></td></tr></table></figure><p>参考：<a href="https://segmentfault.com/q/1010000008494901" target="_blank" rel="noopener">hexo的NexT主题，怎么取消“文章目录”对标题的自动编号？</a></p><h3 id="18-在右上角或者左上角实现fork-me-on-github"><a href="#18-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="(18) 在右上角或者左上角实现fork me on github"></a>(18) 在右上角或者左上角实现fork me on github</h3><p>点击 <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a> 或者 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a> 挑选自己喜欢的样式，并复制代码。 例如，我是使用的一款右上角的，复制如下代码：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216021508.png" alt></p><p>然后粘贴刚才复制的代码到 <code>themes/next/layout/_layout.swig</code> 文件中（放在 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code> 的下面），并把 <code>href</code> 改为你的 GitHub 地址。</p><p>参考：<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程 - SegmentFault 思否</a></p><h3 id="19-底部大改版：添加自定义版权等信息、访问人数-次、网站运行时间、修改底部的桃心"><a href="#19-底部大改版：添加自定义版权等信息、访问人数-次、网站运行时间、修改底部的桃心" class="headerlink" title="(19) 底部大改版：添加自定义版权等信息、访问人数/次、网站运行时间、修改底部的桃心"></a>(19) 底部大改版：添加自定义版权等信息、访问人数/次、网站运行时间、修改底部的桃心</h3><p>注：已对「(12) 设定站点建立时间」、「(13) 添加网站已运行时间」做的修改做了更换；以及隐藏了底部”强力驱动”和版本内容（如何隐藏见该文 (11) 节操作）。</p><p><strong>(1) 底部添加自定义版权信息</strong> </p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216155259.png" alt></p><blockquote><p><em>注：如上，左侧是之前的，右侧是修改后的。</em> </p></blockquote><p>打开 <code>\themes\next\layout\_partials\</code> 文件夹下的 <code>footer.swig</code> 文件。现把修改后的代码摘入如下，方便复制：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span>&#123;#</span><br><span class="line">#&#125;&#123;% set current = date(Date.now(), "YYYY") %&#125;&#123;#</span><br><span class="line">#&#125;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">black</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span>Copyright &amp;nbsp;<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">black</span>&gt;</span>&amp;copy;<span class="tag">&lt;/<span class="name">font</span>&gt;</span> &#123;% if theme.footer.since and theme.footer.since != current %&#125;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">black</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span>&#123;&#123; theme.footer.since &#125;&#125; - <span class="tag">&lt;/<span class="name">font</span>&gt;</span>&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">black</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"copyrightYear"</span>&gt;</span>&#123;&#123; current &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; theme.footer.icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span> <span class="attr">itemprop</span>=<span class="string">"copyrightHolder"</span> <span class="attr">style</span>=<span class="string">"font-family:STLiti;color:black;"</span>&gt;</span>&#123;&#123; theme.footer.copyright || config.author &#125;&#125; . All Rights Reserved.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if theme.post_wordcount.totalcount %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-area-chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>&#123;&#123; __('post.totalcount') &#125;&#125;&amp;#58;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.totalcount') &#125;&#125;"</span>&gt;</span>&#123;#</span><br><span class="line">    #&#125;&#123;&#123; totalcount(site, '0,0.0a') &#125;&#125;&#123;#</span><br><span class="line">  #&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是效果：<img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216155600.png" alt></p><p>这里使用的是「华文隶书」字体，你也可以通过修改<code>face=STLiti</code> 换为别的字体。要注意的是，当你这里使用了「华文隶书」字体，别人访问该网页的电脑或手机若没有安装该字体，则不会显示此字体样式。我自己在手机端访问，就发现不会显示此字体样式。</p><p><strong>但倘若是想要别人在没有安装「华文隶书」字体的电脑或手机上显示该字体样式，有办法吗？</strong>答案是有的。只需要把该字体 ttf 文件放在 NexT 主题源码中，比如 <code>\themes\next\source\images\</code> 文件夹下，然后打开 <code>\themes\next\source\css\_custom\custom.styl</code> 文件，添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//压缩的字体</span><br><span class="line">@font-face &#123;</span><br><span class="line">font-family: STLiti;</span><br><span class="line">src: url("/images/STLITI.TTF");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即可。</p><blockquote><p>这里提下，电脑安装了 Office， 会自动安装一些字体，包括「华文隶书」。如何安装字体：<a href="https://support.office.com/zh-cn/article/%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93%E4%BB%A5%E4%BE%BF%E5%9C%A8-office-%E4%B8%AD%E4%BD%BF%E7%94%A8-0ee09e74-edc1-480c-81c2-5cf9537c70ce" target="_blank" rel="noopener">下载和安装自定义字体以便在 Office 中使用 - Office 支持</a></p><ul><li>方法1：双击下载好的 ttf 文件，点击「安装」即可。</li><li>方法2：复制下载好的 ttf 文件，粘贴到 <code>C:\Windows\Fonts</code> 会自动安装字体。</li></ul><p>卸载字体：进入 <code>C:\Windows\Fonts</code> 选择需要卸载的字体删除即可。</p></blockquote><p><strong>(2) 底部添加访问人数、人次，全站总字数，以及网站运行时间</strong></p><p>打开 <code>\themes\next\layout\_partials\</code> 文件夹下的 <code>footer.swig</code> 文件，添加如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--此处为建站时间 --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"04/17/2017 20:01:01"</span>);</span><br><span class="line">    now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">    days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">    hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">    mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">    seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">    snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML =dnum+<span class="string">"&amp;thinsp;天"</span>; </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">"&amp;thinsp;时"</span> + mnum + <span class="string">"&amp;thinsp;分"</span> + snum + <span class="string">"&amp;thinsp;秒"</span>; </span><br><span class="line">&#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>再打开 <code>\themes\next\layout\_third-party\analytics\</code> 文件夹下的 <code>busuanzi-counter.swig</code> 文件，删除全部内容，粘贴如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"busuanzi-count"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">DarkSlateGray</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-uv"</span> <span class="attr">title</span>=<span class="string">"访问人数"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"busuanzi-value"</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">DarkSlateGray</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"总字数"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-edit"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&amp;ensp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; totalcount(site) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>字,<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span> <span class="attr">title</span>=<span class="string">"网站运行时间"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span> <span class="attr">title</span>=<span class="string">"网站运行时间"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">DarkSlateGray</span> <span class="attr">face</span>=<span class="string">STLiti</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"site-pv"</span> <span class="attr">title</span>=<span class="string">"总访问量"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"busuanzi-value"</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>注：这里同上一样，使用了「华文隶书」字体。</em>   </p></blockquote><p>最后在打开 next 主题配置文件 <code>_config.yml</code> 找到 busuanzi_count，修改为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user #图标</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><p>记得 enable 设置为 true。</p><p><strong>(3) 备案信息</strong></p><p>打开 <code>/themes/next/layout/_layout.swig</code> 文件，添加如下代码：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216161815.png" alt></p><blockquote><p><em>注：如上，左侧是之前的，右侧是添加的代码。</em> </p></blockquote><p>现把添加后的代码摘入如下，方面复制：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer-inner"</span>&gt;</span></span><br><span class="line">    &#123;% include '_partials/footer.swig' %&#125;</span><br><span class="line">    &#123;% include '_third-party/analytics/analytics-with-widget.swig' %&#125;</span><br><span class="line">    <span class="comment">&lt;!--备案等自定义↓--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-family:STLiti;display:inline-block;height:20px;line-height:20px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">""</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/gov.png"</span> <span class="attr">style</span>=<span class="string">"float:left;"</span>/&gt;</span>赣公网安备 xxxxxxxxxxxx号<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span> <span class="attr">style</span>=<span class="string">"color: #555;"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.miitbeian.gov.cn"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>赣ICP备xxxxx号<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">sapn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    &#123;% block footer %&#125;&#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>其中，备案信息开头的图片存放在 <code>\themes\next\source\images\</code> 文件夹下。</em></p><p>效果：<img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216162228.png" alt></p><p>!!!最后的博客底部效果，如下图： </p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216174015.png" alt></p><p>如果没有备案，不想底部显示备案信息，可以考虑显示其他，比如相同位置添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--版权等自定义↓--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-family:Courier New;display:inline-block;height:20px;line-height:20px;"</span>&gt;</span></span><br><span class="line">    Powered by <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://hexo.io/zh-cn/index.html"</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,Theme by </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://theme-next.iissnan.com/"</span>&gt;</span>NexT<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. </span><br><span class="line">    Hosted by <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://pages.github.com/"</span>&gt;</span>GitHub Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>!!!最后博客底部效果，如图：</strong></p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216185828.png" alt></p><p><strong>(4) 修改底部的桃心</strong></p><p>打开 <code>\themes\next\layout\_partials\footer.swig</code> 文件，修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-&#123;&#123; theme.footer.icon &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"with-love"</span> <span class="attr">id</span>=<span class="string">"animate"</span> <span class="attr">style</span>=<span class="string">"font-size: 13px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再打开 <code>\themes\next\source\css\_common\components\footer\footer.styl</code> 文件，在相应处添加或修改为如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config('footer.icon.animated') &#123;</span><br><span class="line"><span class="selector-id">#animate</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: iconAnimate <span class="number">1.88s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.with-love</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#9a6eac</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-左侧添加社交链接和协议"><a href="#20-左侧添加社交链接和协议" class="headerlink" title="(20) 左侧添加社交链接和协议"></a>(20) 左侧添加社交链接和协议</h3><p>打开 next 主题配置文件<code>_config.yml</code> ，找到 social_icons，设置 icons_only 和 transition 为 true：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: true # false</span><br><span class="line">  transition: true  # false</span><br></pre></td></tr></table></figure><p>然后 <code>hexo s</code> 预览可以看到：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216165239.png" alt></p><p>再打开 <code>\themes\next\layout\_macro\</code> 文件夹下的 <code>sidebar.swig</code> 文件，在如下两处添加代码：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216165438.png" alt></p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216165514.png" alt></p><blockquote><p><em>注：如上，左侧是之前的，右侧是修改后的。</em> </p></blockquote><p>先把两处改动摘入如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"links-of-author-item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span>增加的下面这行 悬浮显示文字<span class="attr">--</span>&gt;</span></span><br><span class="line">    &#123;% set sidebarURL = link.split('||')[0] | trim %&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; link.split('||')[0] | trim &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; name + ' &amp;rarr; ' + sidebarURL &#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span>增加的下面这部分，知识共享协议 <span class="attr">--</span>&gt;</span></span><br><span class="line">&#123;% if theme.sidebar.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cc-license motion-element"</span> <span class="attr">itemprop</span>=<span class="string">"license"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-sa/4.0/"</span> <span class="attr">class</span>=<span class="string">"cc-opacity"</span> <span class="attr">rel</span>=<span class="string">"external nofollow noopener noreferrer"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/cc-by-nc-sa.svg"</span> <span class="attr">alt</span>=<span class="string">"Creative Commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;# Blogroll #&#125;</span><br></pre></td></tr></table></figure><p>其中，svg 文件存放在 <code>\themes\next\source\images\</code> 文件夹下。</p><p>效果：<img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190216171849.png" alt></p><h3 id="21-关于页面样式的修改，如链接的颜色、回顶部按钮样式、底部页码等等"><a href="#21-关于页面样式的修改，如链接的颜色、回顶部按钮样式、底部页码等等" class="headerlink" title="(21) 关于页面样式的修改，如链接的颜色、回顶部按钮样式、底部页码等等"></a>(21) 关于页面样式的修改，如链接的颜色、回顶部按钮样式、底部页码等等</h3><p>打开 <code>\themes\next\source\css\_custom\</code> 文件夹下的 <code>custom.styl</code> 文件，添加如下内容，修改内容已有注释写明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">// 更改文中链接的颜色</span><br><span class="line">.post-body a &#123;</span><br><span class="line">  color: $orange;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">  border-bottom: 1;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: $blue;</span><br><span class="line">    //text-decoration: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 右下角返回顶部按钮样式</span><br><span class="line">.back-to-top:hover &#123;</span><br><span class="line">    color: rgb(136, 255, 13);</span><br><span class="line">background-color: rgba(0, 0, 0, 0.75); //black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章```代码块顶部样式</span><br><span class="line">.highlight figcaption &#123;</span><br><span class="line">    margin: 0em;</span><br><span class="line">    padding: 0.5em;</span><br><span class="line">    background: #eee;</span><br><span class="line">    border-bottom: 1px solid #e9e9e9;</span><br><span class="line">&#125;</span><br><span class="line">.highlight figcaption a &#123;</span><br><span class="line">    color: rgb(80, 115, 184);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//修改文章内code样式</span><br><span class="line">code &#123;color:#c7254e;background:#f9f2f4;border:1px solid #d6d6d6;&#125;</span><br><span class="line"></span><br><span class="line">// [Read More]按钮样式: 黑底绿字</span><br><span class="line">.post-button .btn:hover &#123;</span><br><span class="line"></span><br><span class="line">    color: rgb(136, 255, 13) !important;</span><br><span class="line">background-color: rgba(0, 0, 0, 0.75); //black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面底部页码</span><br><span class="line">.pagination .page-number.current &#123;</span><br><span class="line"></span><br><span class="line">    border-radius: 100%;</span><br><span class="line">    background-color: rgba(100, 100, 100, 0.75);</span><br><span class="line">&#125;</span><br><span class="line">// 页面底部页码, 去除鼠标置于上方时，数字上方的线</span><br><span class="line">.pagination .prev, .pagination .next, .pagination .page-number &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    border: none;</span><br><span class="line">color: rgb(1, 1, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 页面底部页码，鼠标置于上方，黑底绿字</span><br><span class="line">.page-number:hover,.page-number:active&#123;</span><br><span class="line">color: rgb(136, 255, 13);</span><br><span class="line">border-radius: 100%;</span><br><span class="line">    //background-color: rgba(255, 0, 100, 0.75); //品红</span><br><span class="line">background-color: rgba(0, 0, 0, 0.75); //black</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于页面的很多设置都可以在此设置。</p><p>除了上面这些，我还设置了其他很多，比如页面底部页码、网页加载条、返回顶部按钮、左侧信息栏等样式。可参考：<a href="https://github.com/Vincentqyw/blog-code/blob/master/themes/next/source/css/_custom/custom.styl" target="_blank" rel="noopener">Vincentqyw的custom.styl</a>、<a href="https://github.com/Lruihao/lruihao.github.io/blob/hexo/themes/next/source/css/_custom/custom.styl" target="_blank" rel="noopener">Lruihao的custom.styl</a>。</p><p>另外在网上有看到别人的博客有个页面效果——文章之间、以及文章与下面分页之间有隔横，这个效果样式一直想拿到，觉得那样的更好看。后面联系到了博客作者，问了这事，他说是用的最新版的 NexT 主题，默认就是这样。再然后我找到了 NexT 版本更新说明的博客网站 <a href="https://theme-next.org/" target="_blank" rel="noopener">NexT – Theme for Hexo</a> 发现它也是那样的效果（最新源码：<a href="https://github.com/theme-next/hexo-theme-next/tree/v6.0.6" target="_blank" rel="noopener">hexo-theme-next</a>），看来真是新版 NexT 默认样式。前端我只会一点，不会改啊，只能这样了，日后有时间在探究吧~</p><blockquote><p>2019-06-16 更新：现在知道了，只需要在主题配置文件设置 scheme 为 Gemini 即可。</p></blockquote><h3 id="22-更换博客背景图"><a href="#22-更换博客背景图" class="headerlink" title="(22) 更换博客背景图"></a>(22) 更换博客背景图</h3><p>打开 <code>\themes\next\source\css\_custom\</code> 文件夹下的 <code>custom.styl</code> 文件，添加如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//背景图</span><br><span class="line"><span class="selector-tag">body</span> &#123; </span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(/images/background.jpg);</span><br><span class="line">    background-attachment: fixed; // 不随屏幕滚动而滚动fixed,scroll,inherit</span><br><span class="line">    background-repeat: no-repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺</span><br><span class="line">    background-size: cover; // contain等比例铺满屏幕 //cover拉伸铺满</span><br><span class="line">    background-position: bottom;//x,y轴调整</span><br><span class="line">    +<span class="selector-tag">mobile</span>()&#123;</span><br><span class="line">      //background-position: 0% -20%;https://i.loli.net/2018/12/29/5c270a0523154.jpg</span><br><span class="line">      //https://i.loli.net/2018/12/29/5c270fc2bfcad.png</span><br><span class="line">      background-image: url(https://ziyuan.lruihao.cn/images/bg_cell.png);</span><br><span class="line">      <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，背景图片为 background-image 后面的 url 地址，即存放在 <code>\themes\next\source\images\</code> 文件夹下。</p><h3 id="23-设置博客的图标favicon"><a href="#23-设置博客的图标favicon" class="headerlink" title="(23) 设置博客的图标favicon"></a>(23) 设置博客的图标favicon</h3><p>第一步：首先要有一个常见格式名（如<code>.jpg</code>, <code>.png</code>等）的图片作为备选 favicon，选择一个 favicon 制作网站完成制作，例如 <a href="http://favicon.htmlkit.com/favicon/" target="_blank" rel="noopener">FavIcon from Pics</a>、<a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a>、<a href="https://tool.lu/favicon/" target="_blank" rel="noopener">favicon制作 - 在线工具</a>，最好设置为 32x32，除了自己制作，当然也可以去一些网站上找，如：<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>。</p><p>第二步：将<code>favicon.ico</code>文件放在网站根目录下的 source 文件夹，如 <code>/themes/next/source/images</code> 文件夹下，并且修改配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png #小图标 默认的NexT</span><br><span class="line">  medium: /images/favicon.ico#中图标 默认NexT</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png #苹果触摸图标</span><br><span class="line">  safari_pinned_tab: /images/logo.svg #safari固定标签</span><br></pre></td></tr></table></figure><p>可以看到有四种效果，一般我们只需将 medium 换成我们自己图标路径就行了。然后刷新网站，就可以看到效果了。效果：<img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190218151352.png"></p><p>参考：<a href="https://segmentfault.com/a/1190000014676320" target="_blank" rel="noopener">关于Hexo6.0搭建个人博客(进阶篇)</a></p><h3 id="24-文章标题下显示评论或Comments字样"><a href="#24-文章标题下显示评论或Comments字样" class="headerlink" title="(24) 文章标题下显示评论或Comments字样"></a>(24) 文章标题下显示评论或Comments字样</h3><p>打开：<code>\themes\next\layout\_macro\post.swig</code> 文件，搜索 <code>&lt;span class=&quot;post-meta-item-icon&quot;&gt;</code>，在所有搜索到的该 span 标签下添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>评论：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：（看自个想要中文还是英文字眼显示）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>Comments：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为我用的是 valine 评论，所以我也可以只在 valine 下添加如上代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.valine.enable and theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-comments-count"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-comment-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>Comments：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;#comments"</span> <span class="attr">itemprop</span>=<span class="string">"discussionUrl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-comments-count valine-comment-count"</span> <span class="attr">data-xid</span>=<span class="string">"&#123;&#123; url_for(post.path) &#125;&#125;"</span> <span class="attr">itemprop</span>=<span class="string">"commentCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>不过还是建议在搜索到的该标签下都添加，以防今后换别的评论系统不显示。</p><h3 id="25-设置文章标题下的发表、分类、访问次数、文章字数、阅读时间等为英文"><a href="#25-设置文章标题下的发表、分类、访问次数、文章字数、阅读时间等为英文" class="headerlink" title="(25) 设置文章标题下的发表、分类、访问次数、文章字数、阅读时间等为英文"></a>(25) 设置文章标题下的发表、分类、访问次数、文章字数、阅读时间等为英文</h3><p>打开 <code>\themes\next\languages\zh-Hans.yml</code>，在 post 下相应处修改为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">  created: Post created #创建于</span><br><span class="line">  modified: Post modified #更新于</span><br><span class="line">  sticky: 置顶</span><br><span class="line">  posted: Posted on #发表于</span><br><span class="line">  visitors: Visitors #阅读次数 </span><br><span class="line">  in: In #分类于</span><br><span class="line">  read_more: 阅读全文</span><br><span class="line">  untitled: 未命名</span><br><span class="line">  toc_empty: 此文章未包含目录</span><br><span class="line">  wordcount: Words #字数统计</span><br><span class="line">  min2read: Reading time #阅读时长</span><br><span class="line">  totalcount: Site words total count</span><br></pre></td></tr></table></figure><p>注：<code>#</code> 为注释。</p><h3 id="26-设置文章加密"><a href="#26-设置文章加密" class="headerlink" title="(26) 设置文章加密"></a>(26) 设置文章加密</h3><p>参考：<a href="https://www.zhyong.cn/posts/68c4/" target="_blank" rel="noopener">next 主题添加密码访问 | YouForever</a>，使用的插件 hexo-blog-encrypt  地址：<a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">https://github.com/MikeCoder/hexo-blog-encrypt</a></p><h3 id="99-第三方服务整合的比较全面的DEMO欣赏"><a href="#99-第三方服务整合的比较全面的DEMO欣赏" class="headerlink" title="(99) 第三方服务整合的比较全面的DEMO欣赏"></a>(99) 第三方服务整合的比较全面的DEMO欣赏</h3><ul><li><p><a href="https://lruihao.cn/" target="_blank" rel="noopener">博採眾長</a></p><blockquote><p>「关于」页面特别地还有个网易音乐播放，不错，另外，博客最底部的优化的不错，打算借鉴。</p></blockquote></li><li><p><a href="https://www.vincentqin.tech/" target="_blank" rel="noopener">Vincent Qin</a></p></li><li><p><a href="http://wustxiao.cn/" target="_blank" rel="noopener">wustxiao’s blog</a></p></li><li><p><a href="http://www.aisun.org/" target="_blank" rel="noopener">Zack’s Blog</a></p></li><li><p><a href="https://l-cw.github.io/" target="_blank" rel="noopener">进击的学霸的博客</a></p></li></ul><h2 id="三、博客速度-SEO优化"><a href="#三、博客速度-SEO优化" class="headerlink" title="三、博客速度/SEO优化"></a>三、博客速度/SEO优化</h2><h3 id="1-SEO"><a href="#1-SEO" class="headerlink" title="(1) SEO"></a>(1) SEO</h3><p>参考：<a href="https://segmentfault.com/a/1190000009254968" target="_blank" rel="noopener">hexo 博客 seo 优化</a></p><h3 id="2-速度优化"><a href="#2-速度优化" class="headerlink" title="(2) 速度优化"></a>(2) 速度优化</h3><p><em>注：关于访问速度优化，本人还未实践…</em> </p><p>参考：</p><ul><li><a href="http://waberyang.com/2017/03/12/Hexo%E5%8D%9A%E5%AE%A2-Next%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF/" target="_blank" rel="noopener">Hexo博客-Next性能优化之路 | Waber’s Blog</a></li><li><a href="https://www.jianshu.com/p/93b63852f0b3" target="_blank" rel="noopener">Hexo博客之速度优化 - 简书</a></li><li><a href="https://blog.csdn.net/dataiyangu/article/details/84963491" target="_blank" rel="noopener">hexo next主题深度优化(六)，使用hexo-neat插件压缩页面，大幅度提升页面性能和响应速度</a></li></ul><h2 id="四、主题制作"><a href="#四、主题制作" class="headerlink" title="四、主题制作"></a>四、主题制作</h2><ul><li><a href="http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/" target="_blank" rel="noopener">从零开始制作 Hexo 主题</a></li><li><a href="https://segmentfault.com/a/1190000006057336" target="_blank" rel="noopener">写一个自己的Hexo主题</a></li></ul><h2 id="附录-配置文件说明"><a href="#附录-配置文件说明" class="headerlink" title="附录-配置文件说明"></a>附录-配置文件说明</h2><p>Hexo 的各种通用的配置都是在博客根目录行下的 <code>_config.yml</code> 文件中设置的。下面介绍一些常用的配置项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># Site 基本信息</span><br><span class="line">title: Ruikye                      # 博客标题，如左上角显示</span><br><span class="line">subtitle: ruikye 的个人博客         # 博客副标题</span><br><span class="line">description: 移动开发技术分享博客     # 用于搜索引擎搜索到的描述信息</span><br><span class="line">author: 零雨の夜                    # 博客署名，一般会现在在博客的最下方，rg: &amp;copy;2014 零雨の夜</span><br><span class="line">email: xxx@xxx.com                # 可不填</span><br><span class="line">language: zh-CN                   # 让博客支持中文</span><br><span class="line">...</span><br><span class="line"># Writing</span><br><span class="line">...</span><br><span class="line">highlight:              # 代码高亮</span><br><span class="line">  enable: true          # 开启代码高亮</span><br><span class="line">  line_number: false    # 是否显示行号</span><br><span class="line">  tab_replace: true     # 是否替换 tab 为空格</span><br><span class="line">...</span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 1             # 文章分页时，每页最多显示文章数，eg: 我的博客在首页和归档页最多只显示一篇文章</span><br><span class="line">pagination_dir: page    # 分页目录</span><br><span class="line">...</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://github.com/hexojs/hexo/wiki/Plugins</span><br><span class="line">## Themes: https://github.com/hexojs/hexo/wiki/Themes</span><br><span class="line">theme: bs-light         # 这里配置博客的主题风格，主题安装在 themes/ 目录下，这里的值就是主题的文件夹名字 </span><br><span class="line">exclude_generator:</span><br><span class="line">plugins:</span><br><span class="line">- hexo-generator-feed   # 安装、启用的插件，这里是启动 RSS 订阅的插件</span><br><span class="line"># Deployment</span><br><span class="line">## Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: github                                                  # 博客托管服务器类型</span><br><span class="line">  repository: https://github.com/rakkang/rakkang.github.io.git  # 托管服务器地址</span><br><span class="line">  brach: master                                                 # 博客使用的代码分支</span><br></pre></td></tr></table></figure><p>除了 Hexo 的通用配置外，每个主题还有各自的配置文件，主题的配置文件放在：<code>themes/[xxx]/_config.yml</code>, 如：<code>themes/bs-light/_config.yml</code>，下面以 <code>bs-light</code> 为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 导航栏，如右上角的显示，Tips: RSS 栏是插件添加的不再这里</span><br><span class="line">menu:</span><br><span class="line">  首页: /                 # 格式是：[显示标签]:[索引目录]</span><br><span class="line">  存档: /archives</span><br><span class="line"># 文章右边的小部件</span><br><span class="line">widgets:</span><br><span class="line"># search/tag/category/recent_posts/tagcloud   ----&gt; 这里是 bs-light 的可用小部件</span><br><span class="line">- search                 # 搜索框</span><br><span class="line">- recent_posts           # 最近发布的文章</span><br><span class="line">- category               # 存档目录</span><br><span class="line">- tagcloud               # 文章的标签集合</span><br><span class="line"># 如果在文章的 *.md 中使用 <span class="comment">&lt;!-- more --&gt;</span>，那么之后的内容不会在首页显示，而是显示 阅读全文 的链接，显示可以更改</span><br><span class="line"># 如：更多，查看原文等</span><br><span class="line">excerpt_link: 阅读全文</span><br><span class="line"># 博客的社交分享，eg: 博客底部的两个图标</span><br><span class="line">social:</span><br><span class="line"># key weibo/twitter/google/github/stackoverflow/rss</span><br><span class="line"># value url</span><br><span class="line"># e.g github: https://github.com/DaiXiang</span><br><span class="line">  github: https://github.com/rakkang</span><br><span class="line">  rss: /atom.xml</span><br><span class="line">...</span><br><span class="line">cnzz_analytics: true     # 博客的访问统计，这里使用 CNZZ 的统计</span><br><span class="line"># google_analytics:</span><br><span class="line"># rss:</span><br><span class="line"># comment_provider:      # 评论功能，一般使用国内的 多说评论</span><br><span class="line"># Facebook comment</span><br></pre></td></tr></table></figure><hr><p><em>update：2018-01-30</em></p><p><em>update：2019-02-13 标题由「Hexo之NexT主题的配置及遇到的问题」改为了「NexT主题的优化定制修改指南.」；增加了很多内容，如「2.第三方服务及其他修改」这节内容；其他地方做了一些删减和修改。</em> </p><p><em>update：2019-02-14 补充完善和添加了很多内容。</em>  </p><p><em>update：2019-02-15 添加了「添加RSS订阅功能」、「取消文章目录对标题的自动编号和取消目录」等小节、以及站点底部和页面样式的一些修改等</em></p><p><em>update：2019-02-17 修改了一点页面样式；增加了「三、博客速度/SEO优化」节；增加了博客 favicon</em>  </p><p><em>update：2019-06-16</em></p><blockquote><p>1、设置了 scheme: Gemini。注：新版的 NexT 主题源码早已转移在了这个仓库 <em><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></em>  </p><p>2、修改 <code>/themes/source/css/_custom/custom.styl</code>：取消了「网页加载进度条」；设置了顶部条 <code>height: 2px</code>；设置底部页码 <code>border-radius: 0%</code>；</p><p>3、注释了 <code>source/css/_variables/custom.styl</code> 中的这两行代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $main-desktop = 1200px</span><br><span class="line"> $content-desktop = 950px</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在 <code>source/css/_variables/Gemini.styl</code> 文件中设置 <code>$main-desktop</code> 为 75%：<code>$main-desktop=75%</code></p></blockquote><p><em>update：2019-07-04</em> </p><blockquote><p>1、打开 <code>/themes/source/css/_custom/custom.styl</code>：①侧边栏信息样式 border-radius 修改为了 0， <code>border-radius: 0px;</code>，②更换了博客背景图，③ 修改尾部 .footer 的 +mobel() 下的样式 bottom 为 120 px，用来解决手机端底部的显示阻挡页面翻页的按钮。④设置了 body 样式，从而在手机端不显示背景图 ⑤设置了顶部条在手机端显示白色，高度为0px。⑤修改了顶部条样式 ⑥去除了标题颜色等样式，添加了点别的样式 ⑦设置了 body 样式下的手机端字体大小为 14 px ⑧以及一些其他小的修改</p><p>2、打开 <code>/themes/next/layout/_layout.swig</code>，设置底部版声明的字体样式为黑色 <code>color:black</code></p><p>3、添加了「禁用打赏文字抖动」</p></blockquote><p><em>update：2019-07-07</em></p><blockquote><p>1、添加了文章标题下的评论字样的显示。</p><p>2、修改了文章标题下的发表、分类、访问次数、文章字数、阅读时间等为英文。</p><p>3、增加了菜单</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NexT 主题的配置和优化指南。
    
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>篇Ⅰ：基于Hexo+GitHub Page搭建免费博客并绑定域名以及博客备份</title>
    <link href="http://yoursite.com/2019/02/14/%E7%AF%87%E2%85%A0%EF%BC%9A%E5%9F%BA%E4%BA%8EHexo+GitHub%20Page%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/2019/02/14/篇Ⅰ：基于Hexo+GitHub Page搭建免费博客并绑定域名以及博客备份/</id>
    <published>2019-02-14T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.475Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Hexo+GitHub Page 搭建免费博客并绑定域名，以及博客备份。<a id="more"></a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这里引用阮一峰老师网络日志里说的，对于喜欢写博客的人，会经历三个阶段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一阶段，刚接触 Blog，觉得很新鲜，试着选择一个免费空间来写。</span><br><span class="line">第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。</span><br><span class="line">第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</span><br></pre></td></tr></table></figure><p>大多数博客作者，都停留在第一和第二阶段，因为第三阶段不太容易到达：你很难找到俯首听命、愿意为你管理服务器的人。</p><p>但是其实该情况早已改变，很多程序员早已在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 网站上搭建 Blog。他们既拥有绝对管理权，又享受 GitHub 带来的便利——不管何时何地，只要向主机提交 commit，就能发布新文章。更妙的是，这一切还是免费的，GitHub 提供无限流量，世界各地都有理想的访问速度。</p><p>好了，本文就来讲如何在 GitHub 上搭建博客及采用 Git 分支进行文章备份。</p><p>基于 Hexo+GitHub Page 搭建博客的教程，网上这样的文章很多，在这之前我也记录过一篇 <a href="http://blog.csdn.net/u012195214/article/details/72454346" target="_blank" rel="noopener">基于Hexo+GitHub Page搭建免费个人博客教程</a>。网上相关文章也很多：</p><ul><li><a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></li><li><a href="https://github.com/uolcano/blog/issues/11" target="_blank" rel="noopener">利用GitHub Pages建立项目或个人网站</a> </li><li><a href="http://www.lzblog.cn/2016/04/06/%E5%9C%A8win7%E4%B8%AD%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AE%89%E8%A3%85Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">在win7中一步一步安装Hexo搭建个人博客</a> </li><li><a href="http://blog.csdn.net/sunshine940326/article/details/57413678" target="_blank" rel="noopener">了解githubPages+hexo搭建博客的原理</a></li><li><a href="https://github.com/uolcano/blog/issues/11" target="_blank" rel="noopener">利用GitHub Pages建立项目或个人网站</a></li><li>……</li></ul><p>本文主要是梳理搭建步骤，特别地，本文主要特点有采用 Git 分支进行对博客源文章进行备份。 </p><h1 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h1><p>在搭建过程之前，先了解下 npm。</p><p>先简单介绍下 npm：npm 是 Node 的模块管理器，功能极其强大。它是 Node 获得成功的重要原因之一。正因为有了 npm，我们只要一行命令，就能安装别人写好的模块 。<code>npm install</code>命令用来安装模块到 node_modules目录。</p><blockquote><p>NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从 NPM 服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从 NPM 服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到 NPM 服务器供别人使用。<br>由于新版的 nodejs 已经集成了 npm，所以之前 npm 也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功。</li></ul><p>—— <em>From： <a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">菜鸟教程</a></em>  </p></blockquote><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有 -g 而已，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express# 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure><p>本地安装：</p><blockquote><p>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。可以通过 require() 来引入本地安装的包。</p></blockquote><p>全局安装：</p><blockquote><p>将安装包放在 /usr/local 下或者你 node 的安装目录。可以直接在命令行里使用。</p></blockquote><p>如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。</p><h2 id="1-搭建步骤"><a href="#1-搭建步骤" class="headerlink" title="1. 搭建步骤"></a>1. 搭建步骤</h2><p><strong>(1) 第一步：Github Pages</strong> </p><blockquote><p>Github Pages 免费的静态站点，其特点：免费托管、自带主题、支持自制页面等。</p></blockquote><p>创建 Github Pages 比较简单，只要你有一个 GitHub 账号在创建一个仓库就行了，但是这个仓库是有规则的，其格式必须为：<code>yourusername.github.io</code>。然后根据提示一直下一步即可，非常简单。比如我的账户名为<code>strivebo</code>，则格式为<code>strivebo.github.io</code>。（这里在 GitHub 上创建仓库我就不多讲了吧？）</p><p><strong>(2) 第二步：Hexo相关操作</strong></p><p>我把用到的命令先记录在此：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章，缩写为：hexo n</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录,,缩写为：hexo g</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）,缩写为：hexo s  </span></span><br><span class="line">hexo s -p <span class="number">8080</span>  <span class="comment">#本地预览的时候修改端口为8080 </span></span><br><span class="line">hexo s -debug <span class="comment">#本地预览调试</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub，缩写为：hexo d</span></span><br><span class="line">hexo clean  <span class="comment"># 清除缓存文件 db.json 和已生成的静态文件 public </span></span><br><span class="line">hexo help  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">---------------以下为组合命令----------------------------------</span><br><span class="line">hexo s -g  <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g  <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure></p><p><strong>具体的操作步骤：</strong> </p><ol><li><p>安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a> 和 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">node.js</a>（笔者实践使用的 <code>Git-2.15.0-64-bit.exe</code> 和 <code>node-v9.4.0-x64.msi</code> 版本）；</p></li><li><p>新建目录，如名称为 blog 的文件夹，然后在该目录下的<code>Git Bash</code> （安装了 Git 就有这个，鼠标右键会出现）下输入<code>npm install -g hexo</code> </p><blockquote><p>基于上面对 npm 的了解，此命令为全局安装 hexo；也有看到教程写的是：<code>npm install -g hexo-cli</code>这个（<strong>并且官方文档也是用的这个命令说是安装 hexo</strong>）；或者好像也可以使用<code>npm install hexo --save</code>进行安装（<strong>亲测：不可以先使用这个命令！</strong>），安装完毕生成了<code>node_node_modules</code>文件夹（莫非这个命令才是此版本 node.js 对应的安装方式？），然后再执行<code>hexo</code>或者是后面的需要用到的<code>hexo g</code>命令，都会生成<code>db.json</code>文件，我现在还不知道其作用，当然<code>hexo g</code>还会生成 public 文件内容（文章被编译形成的文件夹）。</p></blockquote><p> 去网上找了下解释：<a href="https://segmentfault.com/q/1010000009487303" target="_blank" rel="noopener">hexo和hexo-cli的关系？</a></p><blockquote><p>① hexo 本身是一个静态博客生成工具，具备编译 Markdown、拼接主题模板、生成 HTML、上传 Git 或 FTP 等基本功能。将这些功能封装为命令，提供给用户通过 hexo server / hexo deploy 等命令调用的模块，就是 hexo-cli 了。CLI = Command Line Interface 命令行界面。</p><p>② 后者是前者的命令行模式，即 <code>hexo-cli</code>为<code>hexo</code>的命令行模式。</p></blockquote></li><li><p>再在该目录下，Git Bash 下敲<code>hexo init</code>，会自动下载如下文件及文件夹到这个目录，但不包括 public 文件夹。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">node_node_modules 文件夹（纳闷：按道理不是在npm install -g hexo生成吗？）</span><br><span class="line">scaffolds 文件夹</span><br><span class="line">source 文件夹</span><br><span class="line">themes 文件夹</span><br><span class="line">.gitignore </span><br><span class="line">_config.yml </span><br><span class="line">package.json </span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><p> 备注：public 文件夹为 <code>hexo generate</code>或<code>hexo g</code>（其实是这个「编译过程」）生成静态页面才会生成的文件夹。</p></li><li><p>然后  <code>hexo generate</code> 或 <code>hexo g</code>生成 <code>public</code> 文件夹（该文件夹下为 <code>.md</code> 文件编译后生成的静态文件，包括html/css/js/图片等等）和<code>db.json</code>文件</p><blockquote><p><code>public</code>文件夹下为<code>.md</code>文件编译后形成的文件，也正是被 <code>hexo deploy</code>部署到 GitHub 上的文件。</p></blockquote></li><li><p>可以<code>hexo s</code>开启本地预览端口，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 进行预览，可以看到默认主题下的博客，如果遇到 4000 端口被占用的问题，可以使用比如 <code>hexo s -p 8080</code> 指定 8080 端口预览。<strong>好了！ 本地搭建的活干完了！</strong> </p><p> 现在可以试试写文章了实践了，执行<code>hexo new &quot;第一篇博客.md&quot;</code>，这样就在 source 目录下生成该博客文章了，然后可以进行写作了，再去执行<code>hexo g</code>编译和<code>hexo s</code>预览了，另外如果文章写错了需修改，可以重新生成；网站显示异常时，可以先使用<code>hexo clean</code>清除缓存文件 <code>db.json</code> 和已生成的静态文件目录 public，再<code>hexo g</code>重新生成。</p></li><li><p>本地预览完毕，则<code>hexo deploy</code>或 <code>hexo d</code> 发布至 GitHub，访问地址格式如：<a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a></p><blockquote><p>注：若在发布至 GitHub 提示 <code>Deployer not found: github 或者 Deployer not found: git</code> , 原因是需要安装一个插件，命令是：<code>npm install hexo-deployer-git --save</code>（网上搜了下，这步的含义说是在安装 git 插件）</p></blockquote><p> 发布之后，该文件下该目录下生成了 <strong><code>.deploy_git</code></strong> 文件夹（目测了下：该文件有一个<code>.git</code>文件夹；其他文件和<code>public</code>文件夹下内容一样）。<strong>那该文件夹干嘛的？</strong> </p><p> 网上看到的解释 1：</p><blockquote><p>.deploy_git： 这个应该是 git 部署用的文件。比如你写好的博客想部署到 GitHub Pages 上去的话，可以用 git 部署插件，那个插件会创建这个目录</p></blockquote><p> 网上看到的解释 2：</p><blockquote><p>注意，使用这种方式，只会将 hexo 编译后生成的 html、css、js 等上传到 github.io 代码库中，并不会将本地的其它源码提交；<br>同时，在本地生成一个 .deploy_git 目录，表示是 hexo 专用的 git 库；</p></blockquote><p> 我在部署，即上传至 GitHub 完毕之后，查看到 master 分支上的文件和<code>.deploy_git</code>文件夹下的文件相同，所以我的猜测正如网上看到的解释的意思：<strong>hexo d 只会发布编译后生成的文件，<code>.deploy_git</code>目录表示 hexo 专用的 git 库，在 <code>hexo d</code> 进行发布部署的时候，会拷贝 <code>public</code> 文件夹所有内容至 <code>.deploy_git</code> 目录下，再把该文件内容推送到 GitHub 仓库。</strong>在后面的实践中，证实了这点！  </p><p> 这里有个思考的地方？<code>hexo d</code> 发布的时候为什么就会发布到仓库下 master 的分支（我仓库下明明还有 backup 分支）呢？哈哈，我<strong>猜测</strong>是在设置<code>_config.yml</code>该文件的时候：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:strivebo/strivebo.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p> 我这里 branch 设置的为 master，所以默认部署到 master 分支。</p><p> 其中这里的配置我解释下：如<code>repository</code>配置为<code>git@github.com:strivebo/strivebo.github.io.git</code> 写上这样的表示采用的 ssh 方式，若为<code>https://github.com/strivebo/strivebo.github.io.git</code>表示采用 https 方式提交。注意的地方，type 值这里为 git，我看网上很多人说之前很多人设置的值为 github，被坑了。</p></li></ol><p><strong>(3) 更换主题</strong> </p><p>对于默认主题我们不喜欢怎么办？不着急，是可以换主题的，可以到官网推荐的主题选择：<a href="https://hexo.io/themes/，或者到" target="_blank" rel="noopener">https://hexo.io/themes/，或者到</a> GitHub 上搜索关键字「hexo-theme」也能搜到很多；然后就是直接下载下来就行，解压出来里面文件夹复制粘贴到博客根目录的 themes 文件夹下，最后配置好<code>主题配置文件_config.yml</code>和<code>站点配置文件_config.yml</code>(即博客根目录下的<code>_config.yml</code>)，其中站点配置文件只要把<code>theme</code>值改为复制粘贴过来的主题的那个文件夹名称就行。</p><p>然后编译、发布、预览就可以看到效果了！</p><h2 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2. 域名绑定"></a>2. 域名绑定</h2><p>不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果想更个性一点，想拥有一个属于自己的域名，那也是 OK 的。</p><p>分两大步骤：先到服务商比如<a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>旗下<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>进行的操作；然后在仓库项目的操作。</p><p>关于域名的注册，以前域名的注册总是推荐去国外的 <a href="https://sg.godaddy.com/zh/offers/domains?isc=gennlcn08&amp;currencytype=CNY&amp;mkwid=sqRPKLZmr_pcrid_229777822940_pkw_godaddy_pmt_e_pdv_c_&amp;gclid=EAIaIQobChMIkvWy89Xy2AIVxgQqCh2yNQ3hEAAYASAAEgK9e_D_BwE" target="_blank" rel="noopener">godaddy</a> , 但是现在国内的 <a href="https://wanwang.aliyun.com/?utm_content=se_980922&amp;gclid=EAIaIQobChMI7ouSmqKT1wIViAgqCh3jEAOkEAAYASAAEgK87vD_BwE" target="_blank" rel="noopener">阿里云旗下万网</a> 也很多人在使用，价格也不贵，一般首次注册使用还是很便宜的，但据大家说在万网注册 .cn 等后缀域名是需要在国内备案的，如果在国外服务商注册，如  <a href="https://sg.godaddy.com/zh/offers/domains?isc=gennlcn08&amp;currencytype=CNY&amp;mkwid=sqRPKLZmr_pcrid_229777822940_pkw_godaddy_pmt_e_pdv_c_&amp;gclid=EAIaIQobChMIkvWy89Xy2AIVxgQqCh2yNQ3hEAAYASAAEgK9e_D_BwE" target="_blank" rel="noopener">godaddy</a>  注册，就不用备案。</p><p><em>关于备案问题，我有在网上了解了下，以下摘自网上：</em></p><blockquote><p>域名的备案根据你的服务器主机而定，主机在哪就在哪里备案；</p><p>只有中国国内的空间才要求备案，接入商会严格把关的，不备案的网站是绝对不能访问的；</p><p>网站备案主要是看你的网络主机是哪家公司的，就在哪家公司做备案；</p><p>备案与域名注册商无关，与服务器有关，也就是说你的域名可以接入其他任何一家 IDC，但如果你的服务器在万网，那么万网作为服务器接入商，你的备案信息就必须先经过万网的审核后才能递交工信部终审；</p><p>注册 cn 域名做网站并不是一定需要备案的，主要还是看用的是哪时主机。如果用的是国内主机，那么就必须备案，如果用的是国外的空间，那么就不需要备案，直接使用即可。不过需要注意的是，根据 CN 域名管理机构 CNNIC 的规定，cn 域名在注册时需要注册人提交身份证扫描件进行审核，在审核通过后才能正常使用，否则就会注册失败；</p><p>其实是一句话，域名如果绑定指向到国内网站空间就要备案。也就是说如果你这个域名只是纯粹注册下来，用作投资或者暂时不用，是无需备案的。域名指向到国外网站空间，也是无需备案的。但是 CN 域名是特例，CN 域名指向到国外网站空间也要备案，不备案就是暂停解析状态，无法指向到任何 IP。由于域名备案基本取决于网站空间的情况，所以备案也是空间服务商提供备案，不是域名注册商。</p><p>…….</p></blockquote><p>看了网上一些解释，我大概明白了，是否备案与域名无关，得看购买的主机/服务器在哪，在国内的才需要备案。我想我利用的是 GitHub Page 服务，相当于服务器在国外，所以不用备案吧。下面以在万网注册为例。</p><p><strong>(1) 万网的操作——域名解析设置</strong> </p><p>登入万网购买域名。然后：管理控制台 → 域名与网站（万网） → 域名；在购买的那个域名处，点击「解析」，进行如下设置。</p><p>绑定域名分 2 种情况：带 www 和不带 www 的。</p><p>域名配置最常见有 2 种方式，CNAME 和 A 记录，CNAME 填写域名，A 记录填写 IP，由于不带 www 方式只能采用 A 记录，所以必须先 ping 一下你的 <code>用户名.github.io</code> 的 IP，然后到你的域名 DNS 设置页，将 A 记录指向你 ping 出来的 IP，将 CNAME 指向你的 <code>用户名.github.io</code>，这样可以保证无论是否添加 www 都可以访问，如下：</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路</th><th>记录值</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>默认</td><td>103.245.222.133</td></tr><tr><td>CNAME</td><td>www</td><td>默认</td><td>strivebo.github.io</td></tr></tbody></table><p><strong>(2) 对仓库的操作——添加CNAME文件</strong></p><p>在 GitHub 博客仓库 master 分支根目录创建一个 <code>CNAME</code> 文件(无后缀)，里面填写你的域名，加不加 <code>www</code> 看自己喜好，因为经测试：</p><ul><li>如果你填写的是没有 www 的，比如 mygit.me，那么无论是访问 <code>http://www.mygit.me</code> 还是 <code>http://mygit.me</code>，都会自动跳转到 <code>http://mygit.me</code></li><li>如果你填写的是带 www 的，比如 <code>www.mygit.me</code> ，那么无论是访问 <code>http://www.mygit.me</code> 还是 <code>http://mygit.me</code>，都会自动跳转到 <code>http://www.mygit.me</code></li><li>如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 <code>http://abc.mygit.me</code> 没问题，但是访问 <code>http://mygit.me</code> ，不会自动跳转到 <code>http://abc.mygit.me</code></li></ul><p>关于添加 <code>CNAME</code> 文件简单提下，如果你不想如上直接在远程仓库创建 <code>CNAME</code> 文件，可按如下操作在本地添加完再部署：</p><blockquote><p>在博客目录的 source 文件夹下添加 <code>CNAME</code> 文件，<code>hexo g</code> 编译会自动生成这个文件于 public 中，<code>hexo d</code> 部署的时候会把 public 文件夹下文件复制于 <code>.deploy_git</code> 目录下进行发布。</p></blockquote><p>参考资料：<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">使用hexo+github搭建免费个人博客详细教程</a>  </p><h2 id="3-域名绑定个人实践"><a href="#3-域名绑定个人实践" class="headerlink" title="3. 域名绑定个人实践"></a>3. 域名绑定个人实践</h2><p>(1) 域名注册和解析</p><p>一开始我使用的都是阿里云的，包括购买域名、域名解析，后来域名快要到期了，准备续费三年，发现有点小贵，于是想着买一个新的域名会不会更便宜呢？然后有在腾讯云下搜了下相同名称但后缀为 <code>.com</code> 的域名发现比在阿里云续费三年价格还便宜一点点，遂直接在腾讯云买了个新的域名（<a href="https://dnspod.cloud.tencent.com/" target="_blank" rel="noopener">购买传送门</a>），解析用的是腾讯云的免费解析套餐（<a href="https://buy.cloud.tencent.com/cns" target="_blank" rel="noopener">云解析套餐 - 腾讯云</a> 可以了解下）。以下是我的解析设置：</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>线路类型</th><th>记录值</th></tr></thead><tbody><tr><td>www</td><td>CNAME</td><td>默认</td><td>strivebo.github.io.</td></tr><tr><td>@</td><td>CNAME</td><td>默认</td><td>strivebo.github.io.</td></tr></tbody></table><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190214160616.png" alt></p><p>从上图可以了解到，添加 www、@ 记录，CNAME 的类型，这样话，不管地址栏输入的是带 www 的<code>www.strivebo.com</code> ，还是不带 www 的 <code>strivebo.com</code> 都是可以访问到目标网页。</p><p>(2) 创建CNAME文件</p><p>在本地博客根目录下的 <code>source</code> 文件夹中，新建一个名为 <code>CNAME</code> 的文件，注意这个文件不带 <code>任何后缀名</code>。打开 <code>CNAME</code> 文件，在里面填写你购买的域名，加不加<code>www</code>看前文的说明，就不赘述了。</p><p><del>(3) SSL证书</del>  </p><p>什么是 SSL 证书？</p><blockquote><p>首先说明 SSL（安全套接层，Secure Sockets Layer）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。SSL 证书遵循 SSL 协议，可安装在服务器上，实现数据传输加密。</p><p>CA（数字证书认证，Certificate Authority）机构，是承担公钥合法性检验的第三方权威机构，负责指定政策、步骤来验证用户的身份，并对 SSL 证书进行签名，确保证书持有者的身份和公钥的所有权。CA 机构为每个使用公开密钥的用户发放一个 SSL 证书，SSL 证书的作用是证明证书中列出的个人/企业合法拥有证书中列出的公开密钥。CA 机构的数字签名使得攻击者不能伪造和篡改证书。</p><p>SSL 证书实际上就是 CA 机构对用户公钥的认证，内容包括电子签证机关的信息、公钥用户信息、公钥、权威机构的签字和有效期等。</p></blockquote><p>简单看，安装了 SSL 证书，可以让你的网站支持 HTTPS 地址形式，地址栏不再提示连接不安全。了解下：<a href="https://cloud.tencent.com/product/ssl" target="_blank" rel="noopener">SSL证书_SSL数字证书_HTTPS加密 - 腾讯云</a>。</p><p>腾讯云提供免费 SSL 证书申请，如何申请：<a href="https://cloud.tencent.com/document/product/400/8422" target="_blank" rel="noopener">SSL 证书 域名型（DV）免费SSL证书 - 腾讯云</a>。申请到后的证书可下载到本地，或者部署到云服务。</p><p>SSL 证书如何安装和部署指引：<a href="https://cloud.tencent.com/document/product/400/4143" target="_blank" rel="noopener">SSL 证书 证书安装指引 - 腾讯云</a>、<a href="https://blog.csdn.net/StaunchKai/article/details/82901437" target="_blank" rel="noopener">hexo 博客开启 https (SSL 证书)</a>。</p><p>其实对于 GitHub Page  现在可以对自定义域名支持 HTTPS：</p><blockquote><p>GitHub 官方在 2018 年5 月 1 号宣布，GitHub Pages 的自定义域名获得对 HTTPS 的支持。</p><p>设置操作：打开仓库的Settings，找到 GitHub Pages 项，找到 Enforce HTTPS，打上勾即可。</p></blockquote><h2 id="4-问题汇总"><a href="#4-问题汇总" class="headerlink" title="4. 问题汇总"></a>4. 问题汇总</h2><p><strong>问题 1：</strong> 执行 hexo deploy 命令，README 文件就消失，有什么解决方法吗？</p><p>在 Hexo 目录下的 source 目录下新建一个 <code>README.md</code>文件，修改 Hexo 目录下的配置文件<code>_config.yml</code>，将<code>skip_render</code>参数的值设置为上。即 <code>skip_render: README.md</code>保存退出即可。使用 hexo d 命令就不会渲染 README.md 这个文件了。</p><p>参考资料：<a href="https://www.zhihu.com/question/28058973" target="_blank" rel="noopener">怎么用hexo上传一个README.md到github?</a> </p><h1 id="二、博客备份"><a href="#二、博客备份" class="headerlink" title="二、博客备份"></a>二、博客备份</h1><h2 id="1-备份详解"><a href="#1-备份详解" class="headerlink" title="1. 备份详解"></a>1. 备份详解</h2><p>博客搭建完毕，就可以通过 <code>https://strivebo.github.io</code> 类似这样的格式访问了。如果要绑定了域名就可以使用域名访问了。</p><p>这里有个问题是：部署上去的，即发布到 GitHub 的都是编译后的文件，如 <code>html</code>、<code>css</code>，<code>js</code>等文件，但是自己写的 <code>.md</code> 文章实际是没有上传至 GitHub 的，<strong>如果需要备份这些源文件，该怎么备份呢？或者换了别的电脑该怎么更新博客呢？</strong></p><p><strong>(1) 如果备份分支 backup 为默认分支</strong> </p><p>如果备份分支 backup 为默认分支：在完成上面部署至 GitHub 之后，可以把该博客目录于 GitHub 博客这个仓库进行关联（即绑定），这样就在该根目录生成记录版本控制信息的<code>.git</code>目录，这里这块知识就是 git 有关知识了，自行网上了解下 <code>.git</code> 目录作用。同时也能注意到博客根目录下有个<code>.gitigore</code>文件，就是可以<strong>设置文件要还是不要 push 到 GitHub 仓库去</strong>。 </p><p>因为首次 GitHub 上没有非默认分支，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin backup:backup</span><br></pre></td></tr></table></figure><p>这条命令的作用是：把本地 backup 分支推送到名字为 origin 的远程服务器的 backup 分支上，但因为远程服务器没有 backup 分支，会自动新建该同名分支，<strong>然后在 GitHub 网站的 setting 页面设置 backup 为默认分支。</strong>  其中，这步操作，就把需要备份文件比如 source 文件夹下的的博客「源文件」已经上传至分支 backup。</p><p>然后下次就算换电脑了，可以直接 clone 该博客仓库，得到 backup 分支的数据（即得到了 GitHub 默认分支 backup 数据），然后再如最开始安装 nodejs、Git 以及安装 hexo，最后再执行相关命令得到编译后的文件（即 public 目录），最后<code>hexo d</code>部署至 GitHub 博客仓库的 master 上。</p><p><strong>(2) 如果部署分支 master 为默认分支</strong> </p><p>如果部署分支 master 为默认分支 ：换了电脑之后，clone 仓库后默认显示 master 分支数据，然后执行格式 <code>git checkout -b &lt;本地分支名称&gt; origin/&lt;远程分支名称&gt;</code>，如 <code>git checkout -b backup orgin/backup</code> 该语句作用是在本地创建新的分支，分支的名称是 backup，第二个 backup 也是我想要 clone 的远程分支的名字，这样 GitHub 上非默认分支的数据也 clone下来了，而且还进行了绑定；</p><p>再<code>git checkout backup</code> 这样就切换到本地 backup 分支了，然后进行写文章，编译，部署等操作，因为部署只会部署<code>.deloper_git</code>文件夹下文件内容，所以这样的方式也是可行的。</p><p>但是这里有个问题是，备份分支 backup 并没有备份「node_modules」文件夹，所以需要重新安装<code>hexo</code>，即执行一开始讲到的<code>npm install -g hexo</code>，如果不行，则用这个<code>npm install -g hexo-cli</code>试试来安装 hexo，然后可以用 hexo 命令进行一系列如编译、部署等操作了。</p><p>这里又有个问题出现了，<code>hexo g</code>编译文章后，使得<code>package.json</code>和<code>package-lock.json</code>文件改动了，如果担心这里的变动引起不必要的问题，可以干脆在<code>.gitignore</code>文件中设置忽略这两个文件不被提交。</p><p>实际操作中，发现每次 add 命令把修改提交到暂缓区后，还是会提示<code>package.json</code>文件的已修改，同时也切换不了到本地 master 分支，得了，commit 一次，然后切换到本地 master 分支查看，发现比远程 master 分支多了<code>node_modules</code>文件夹和<code>db.json</code>文件。</p><p>然后<code>hexo d</code>就可以发布部署<code>public</code>文件夹内容至 GitHub 上了，OK。</p><p>最后，进行 Git 有关操作 <code>git push origin backup:backup</code> 进行备份源文件（不包括<code>.gitgnore</code>设置的那些被忽略提交的文件和目录，哈哈，比如<code>node_modules</code>这个目录就不会被提交到备份分支 backup 啊）！</p><p><strong>相关学习：</strong> </p><ul><li><p><a href="https://www.zhihu.com/question/62331583" target="_blank" rel="noopener">npm install 生成的package-lock.json是什么文件？有什么用？</a> </p><blockquote><p>大致意思是，如果改了 package.json，且 package.json 和 lock 文件不同，那么执行<code>npm i</code>时 npm 会根据 package 中的版本号以及语义含义去下载最新的包，并更新至 lock。</p><p>如果两者是同一状态，那么执行<code>npm i</code>都会根据 lock 下载，不会理会 package 实际包的版本是否有新。</p></blockquote></li><li><p><a href="http://front-ender.me/architecture/npmignore.html" target="_blank" rel="noopener">.npmignore文件的干嘛的</a> </p></li></ul><h2 id="2-备份实战"><a href="#2-备份实战" class="headerlink" title="2. 备份实战"></a>2. 备份实战</h2><p>本人 GitHub 博客那个仓库设置的是 master 为默认分支；另外我本机安装版本为 Git v2.15.0，nodejs v9.4.0。</p><ol><li><p><code>git clone git@github.com:strivebo/strivebo.github.io.git</code>克隆默认分支 master 分支数据；</p></li><li><p>使用<code>git branch -a</code>可以查看到本地只有 master 分支以及远程有 master 和 backup 分支，于是<code>git checkout -b backup origin/backup</code> 可以本地自动新建了 backup 分支并且与远程 backup 分支绑定了，同时切换到了本地 backup 分支，并且可以看到本地分支内容和远程一样，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scaffolds 文件夹</span><br><span class="line">source 文件夹</span><br><span class="line">themes 文件夹</span><br><span class="line">.gitignore </span><br><span class="line">_config.yml </span><br><span class="line">package.json </span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure></li><li><p>使用<code>npm install -g hexo</code>或者<code>npm install -g hexo-cli</code>安装 hexo，完毕之后未在博客根目录生成<code>node_modules</code>文件夹，并且继续敲<code>hexo init</code>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Local hexo not found in G:\strivebo.github.io</span><br><span class="line">ERROR Try running: &apos;npm install hexo --save&apos;</span><br></pre></td></tr></table></figure><p>于是敲<code>npm install hexo --save</code>，可以看到博客根目录生成了<code>node_modules</code>文件夹及内容，然后可以使用<code>hexo init</code>来生成一些文件了，但是因为我远程的备份分支 backup 本来就是备份了这个步骤生成的文件（除了 node_modules 文件夹内容未备份），比如 themes 文件等都是远程备份了的；</p></li><li><p>然后<code>hexo g</code>编译 source 中的博客文章，生成 public 文件夹，编译后的 html/css/js 等文件也存于此，<code>hexo s</code>本地预览；</p></li><li><p>然后本地在 source 新增博客文章，以及文章修改，<code>hexo g</code>、<code>hexo g</code>即可，最后 <code>hexo d</code>发布部署至 GitHub（其实 <code>hexo d</code>会自动生成一个<code>.deploy_git</code>文件夹，并且实质是把 public 文件夹内容复制于该文件夹进行发布的，该文件夹下有个隐藏文件夹<code>.git</code>维护着 <strong>发布</strong> 这个过程的版本控制信息。）</p></li></ol><hr><p><em>update：2019-07-21</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 Hexo+GitHub Page 搭建免费博客并绑定域名，以及博客备份。
    
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub 学习3：GitHub学生包申请</title>
    <link href="http://yoursite.com/2019/02/13/Git&amp;GitHub%20%E5%AD%A6%E4%B9%A03%EF%BC%9AGitHub%E5%AD%A6%E7%94%9F%E5%8C%85%E7%94%B3%E8%AF%B7/"/>
    <id>http://yoursite.com/2019/02/13/Git&amp;GitHub 学习3：GitHub学生包申请/</id>
    <published>2019-02-13T13:08:54.000Z</published>
    <updated>2019-09-20T10:45:01.471Z</updated>
    
    <content type="html"><![CDATA[<p>介绍 GitHub 学生包的申请。<a id="more"></a></p><h1 id="一、Github学生包介绍"><a href="#一、Github学生包介绍" class="headerlink" title="一、Github学生包介绍"></a>一、Github学生包介绍</h1><h2 id="1-Github学生包是什么？"><a href="#1-Github学生包是什么？" class="headerlink" title="1. Github学生包是什么？"></a>1. Github学生包是什么？</h2><p>GitHub 学生包是一个由 GitHub 免费提供给学生的福利，里面包括了计算机专业可能用到的很多付费资源，其中包含一系列网站服务的打折/代金券或者软件授权，通过认证后即可领取。申请地址：<a href="https://education.github.com/pack" target="_blank" rel="noopener">Student Developer Pack - GitHub Education</a>。 </p><h2 id="2-怎么认证？"><a href="#2-怎么认证？" class="headerlink" title="2. 怎么认证？"></a>2. 怎么认证？</h2><p>GitHub 提供了两种认证方式，一是 edu 邮箱认证，二是证件认证。如果申请到 edu 邮箱，可以先使用第一种方式试试；如果申请不到 edu 邮箱，那没办法只能使用第二种方式。</p><p>申请：打开 GitHub 学生包页面，点击”Get your pack”按钮，然后下面会有提示让你进行登陆 GitHub 账户和学生认证，只要上传你的学生证或者录取通知书就可以了。</p><h2 id="3-领取的学生包都有什么？"><a href="#3-领取的学生包都有什么？" class="headerlink" title="3. 领取的学生包都有什么？"></a>3. 领取的学生包都有什么？</h2><ul><li>Atom：这个本来就是一个开源的免费编辑器，写代码和 Markdown 挺好用的。</li><li>AWS educate：这个是亚马逊为学生提供的学生包，可以提供一个 110刀 的云服务器的额度。</li><li>Bitnami：这是一个一键部署云应用的平台。</li><li>CARTO：大数据可视化分析平台。</li><li>Crowdflower：一个通过人工智能机器学习等来完善数据，增强数据的平台。</li><li>Datadog：也是大数据相关。</li><li><strong>DigitalOcean：</strong>这个是一个 AWS 类似的云主机平台，但是由于之前学生优惠被滥用，所以现在不仅将 100 刀的优惠降为了 50 刀，并且对于学生资格审查很严格，通过了 GitHub 认证以后，还要进行 PayPal 或者信用卡认证，甚至可能要求你发身份证自拍照。</li><li>Flatron school：一个 Web 开发的学习平台。</li><li><strong>GitHub：</strong>可以在 GitHub 无限制的创建私人项目（注：自 GitHub 买给微软爸爸后，越来越大气了，现在任何人账户都可以免费新建私有项目，非学生包特权或其他条件）。</li><li>Hackhands：一个可以为你提供编程学习在线支持的网站。</li><li>Microsoft Imgine：原来叫做 DreamSpark，是微软做的一个学生免费计划，其中最有用的就是 Azure 云服务的 100 刀额度，可惜在中国不支持。</li><li><strong>Namecheap：</strong>这个可以领取一年的免费 .me 域名和 ssl 证书。</li><li>Sendgrid：一个邮件发送平台。</li><li>Sentry：在线调试平台。</li><li>Stripe：支付平台。</li><li>Taplytics：一个移动端 A/B 测试平台。</li><li>Thinkful：Web 技术学习平台。</li><li>Transifex：Web 技术学习平台。</li><li>Travis CI：一个软件项目的集成整合平台。</li><li>Unreal Engine：大名鼎鼎的虚幻引擎，可以用来学学游戏制作。</li></ul><p>以上的这些东西很多，但作为学生，我们没有精力也没有必要去全部都使用，而是选择自己感兴趣的，需要的东西去学习。</p><blockquote><p>——<em>From：<a href="https://blog.koswu.com/archives/186/" target="_blank" rel="noopener">学习总结第十五天-github学生包的申请</a></em> </p></blockquote><p>有很多人申请这个，是为了享受上面我有标注粗体的几个福利，即 DigitalOcean 的 50刀优惠券、Github 的 5 个私有仓库、Namecheap 的 1 年免费域名。</p><h1 id="二、如何认证"><a href="#二、如何认证" class="headerlink" title="二、如何认证"></a>二、如何认证</h1><h2 id="1-两种认证方式"><a href="#1-两种认证方式" class="headerlink" title="1. 两种认证方式"></a>1. 两种认证方式</h2><p>进入 <a href="https://education.github.com/pack" target="_blank" rel="noopener">Github学生包</a> 点击按钮 Get your pack，进入申请页面。申请需要身份认证（两种认证方式任选一种）：</p><ul><li>学生邮箱认证，简单方便，安全系数高，成功概率低；</li><li>学生证件认证，复杂繁琐，安全系数低，成功概率高。</li></ul><p><strong>1. 学生邮箱认证：</strong></p><p>如果你有学校的 edu 邮箱，可以添加进 GitHub 账户邮箱中，以认证学生身份。此方法由于被部分国人频繁使用，造成 GitHub 对 edu 邮箱的不信任，因此成功率可能较低。</p><p>但是由于此方法简单方便且安全系数高，不会泄露过多隐私，建议尝试一次申请，若申请不成功，再改为学生证申请。</p><p>注：可以谷歌搜索关键字「你学校名称 邮箱注册」找到相应的网页进入进行注册，我就是这么做到的。</p><p><strong>2. 学生证件认证：</strong></p><p>如果没有学校 edu 邮箱，或学校邮箱申请失败，可以通过上传学生证件照来认证学生身份。摘录于网上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在纯色背景（白色最佳，例如在 A4 打印纸上）拍摄学生证件，具有明确学校名称，日期，姓名等。</span><br><span class="line">2. 附上关键部分的英文翻译，可参考网上模板（出国留学者经常需要翻译学生证件）：</span><br><span class="line">3. （可选）身份证 ID 建议打码并在图片角落注明打码原因。</span><br><span class="line">4. （可选）学生证件照片添加签注（在证件头像附近添加，保证难以 PS 掉），以防他用。</span><br></pre></td></tr></table></figure><p>再看下这篇文章 <a href="https://levy.at/blog/3" target="_blank" rel="noopener">扯一扯Github的Student Dev-pack&lt;多图&gt;</a> 里提到的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">其中最关键的就是那张上传的图片，其中务必需要包含几个内容：</span><br><span class="line"></span><br><span class="line">    - 学籍信息以及有效时间：我提供了我的学生卡和清华的校园卡，其清晰度足以辨认其 2012-2016 的有效期</span><br><span class="line">    - 身份信息：居民身份证即可。</span><br><span class="line"></span><br><span class="line">为了以防万一我还提供了一张一寸标准照，把他们放在一起拍了一张照片上传上去。总之能证明你在当下是学生以及那证件是你的即可。</span><br><span class="line"></span><br><span class="line">提交后，GitHub 可能需要几周来回复你的申请，如果觉得慢可以给 education@github.com 发一发邮件。我就是在发了邮件后 3 天得到了那边的回复。</span><br></pre></td></tr></table></figure><h2 id="2-认证实践经历1：使用edu邮箱"><a href="#2-认证实践经历1：使用edu邮箱" class="headerlink" title="2. 认证实践经历1：使用edu邮箱"></a>2. 认证实践经历1：使用edu邮箱</h2><p>我因为网上申请到了自己学校 edu 邮箱，故使用的第一种方式申请。</p><p>申请过程信息记录：申请页面的申请学校填写的为学校中文名字，毕业年份填写的实际毕业年份，申请理由我写的如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I want to use the github student package to build a private repository managing project courses and conducting related research.</span><br></pre></td></tr></table></figure><p>看网上有人为了加快申请认证的进度，或者很久都没申请结果的消息，会点击网页 <a href="https://education.github.com/contact" target="_blank" rel="noopener">Contact us</a> 提交一个询问或说帮助，以加快申请进度。我也这样做了，subject 栏写上<code>the progress of Student Developer Pack</code>，help 栏写上了<code>Please speed up the progress, thank you very much.</code>。当然你也可以写的更详细点，但一定要真诚。</p><p>在过一两天后，我登录学校邮箱查看，发现并没有收到任何回复，但登录 GitHub 学生包页面发现竟然是已经申请成功了。当时不知道怎么回事，后来发现原来是学校那个 edu 邮箱接收邮件被网关拦截了，需要打开才能看到邮件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注：如果想要更加保险些，可以在申请的学校名称栏写上`学校中文名+学校名字的官网英文翻译`，申请理由可以写的更详细，但不管怎样，一定要陈恳点，用英文写。</span><br><span class="line"></span><br><span class="line">另外要说下，毕业年份的填写，为了保险起见，我填写的为真实的毕业年份。但网上也有人填写的的年份很远，不知道有没有什么影响，如果没有影响，那是可以的，毕竟，比如 GitHub 私有仓库是在你毕业年份之前才能享受的福利。</span><br></pre></td></tr></table></figure><p>GitHub 学生包申请认证详细步骤参考：</p><ul><li><a href="http://blog.csdn.net/qq_36667170/article/details/79084166" target="_blank" rel="noopener">GitHub教程 学生认证——学生包申请</a></li><li><a href="https://www.jianshu.com/p/9f47151f4633" target="_blank" rel="noopener">Get Your Github Student Developer Pack</a></li></ul><h2 id="3-认证实践经历2：使用学生信息"><a href="#3-认证实践经历2：使用学生信息" class="headerlink" title="3. 认证实践经历2：使用学生信息"></a>3. 认证实践经历2：使用学生信息</h2><p>校园卡正面和背面和学生拍了个照，然后使用 Typora 引入图片，然后写上这么一份说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">I am a graduate student in this school.</span><br><span class="line"></span><br><span class="line">The first picture, on the left, is the front of my campus card, with the card number xxxxxxxxxxxx. The 2017 number in this figure indicates that I was enrolled in 2017, namely the class of 2017. I graduated in 2020, but it is not shown here.The first picture on the right is my student card.</span><br><span class="line"></span><br><span class="line">The second picture is the back of my campus card.</span><br></pre></td></tr></table></figure><p>然后导出为图片格式，上传。</p><p>申请理由写的是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am a second-year postgraduate student from China, and I used Github to share my code with my classmates and friends since I entered university.</span><br><span class="line"></span><br><span class="line">I plan to use github to do more things, such as deploying web pages to cloud hosts, binding domain names for websites, and so on.</span><br></pre></td></tr></table></figure><h1 id="三、学生包福利的使用"><a href="#三、学生包福利的使用" class="headerlink" title="三、学生包福利的使用"></a>三、学生包福利的使用</h1><h2 id="1-利用-DigitalOcean-的-50-美金优惠券搭建梯子"><a href="#1-利用-DigitalOcean-的-50-美金优惠券搭建梯子" class="headerlink" title="1. 利用 DigitalOcean 的 50 美金优惠券搭建梯子"></a>1. 利用 DigitalOcean 的 50 美金优惠券搭建梯子</h2><ul><li><a href="https://withcic.cn/blog/2016/04/23/github-student-digitalocean/" target="_blank" rel="noopener">利用github学生包注册DigitalOcean的VPS</a> </li><li><a href="http://songheqi.me/2017/06/28/DigitalOcean-Shadowsocks-Namecheap/" target="_blank" rel="noopener">使用 GitHub 学生优惠包进行 DigitalOcean 搭建 VPS 及 Namecheap 域名绑定</a></li><li><a href="https://juejin.im/post/582c018d570c35006ce4bfd2" target="_blank" rel="noopener">一举两得！用DO搭建独立域名博客 + SS梯子</a></li></ul><h2 id="2-使用优惠包的-GitHub-建立私有仓库"><a href="#2-使用优惠包的-GitHub-建立私有仓库" class="headerlink" title="2. 使用优惠包的 GitHub 建立私有仓库"></a>2. 使用优惠包的 GitHub 建立私有仓库</h2><ul><li><a href="https://www.wxz.name/2016/11/06/registeremail/" target="_blank" rel="noopener">学生邮箱申请及Github私有仓库申请</a></li></ul><hr><p><em>update：2018-07-21</em> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍 GitHub 学生包的申请。
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub 学习2：GitHub使用</title>
    <link href="http://yoursite.com/2019/02/13/Git&amp;GitHub%20%E5%AD%A6%E4%B9%A02%EF%BC%9AGitHub%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/13/Git&amp;GitHub 学习2：GitHub使用/</id>
    <published>2019-02-13T13:08:54.000Z</published>
    <updated>2019-09-20T10:45:01.470Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 使用指南。<a id="more"></a></p><h1 id="一、GitHub-使用技巧"><a href="#一、GitHub-使用技巧" class="headerlink" title="一、GitHub 使用技巧"></a>一、GitHub 使用技巧</h1><h2 id="1-突破GitHub单个大文件上传限制"><a href="#1-突破GitHub单个大文件上传限制" class="headerlink" title="1. 突破GitHub单个大文件上传限制"></a>1. 突破GitHub单个大文件上传限制</h2><p>GitHub 上新建的仓库容量大小限制在 1G，单个文件不能超过 100M，有 50M 的文件，就会警告了。 可通过以下命令查找超过 100M 的文件：<code>find ./ -type f -size +102400k</code>。 想要突破 GitHub 的限制，支持单个文件超出 100M，可以使用  <a href="https://github.com/git-lfs/git-lfs" target="_blank" rel="noopener">Git LFS</a>。 </p><p>参考：<a href="https://blog.csdn.net/tyro_java/article/details/53440666" target="_blank" rel="noopener">突破github的100M单个大文件上传限制 </a></p><h2 id="2-Git只Clone仓库指定文件或文件夹"><a href="#2-Git只Clone仓库指定文件或文件夹" class="headerlink" title="2. Git只Clone仓库指定文件或文件夹"></a>2. Git只Clone仓库指定文件或文件夹</h2><p>步骤总结如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="tag">&lt;<span class="name">repo</span>&gt;</span> #新建仓库并初始化</span><br><span class="line">cd <span class="tag">&lt;<span class="name">repo</span>&gt;</span> #切换到该仓库目录</span><br><span class="line">git remote add origin <span class="tag">&lt;<span class="name">url</span>&gt;</span>#拉取remote的all objects信息，url为仓库地址</span><br><span class="line">git config core.sparsecheckout true#设置允许克隆子目录，即开启sparse clone</span><br><span class="line">echo "参考论*" &gt;&gt; .git/info/sparse-checkout#设置需要pull的目录，*表示所有，!表示匹配相反的</span><br><span class="line">git pull --depth=1 origin master#将origin端指定目录下的文件pull到本地</span><br></pre></td></tr></table></figure><p>通过本人亲自实践，有几点说的：</p><ol><li><p>像这步命令<code>echo &quot;参考论&quot; &gt;&gt; .git/info/sparse-checkouth</code>会在<code>.git/info/</code>目录下生成<code>sparse-checkout</code>无后缀文件，打开看到内容可以看到设置为了<code>参考论</code>，即会下载匹配<code>参考论</code>的目录下所有文件。也可以修改为别的，比如修改诸如为<code>参考论文/files/101</code>，匹配<code>参考论文/files/101</code>文件或文件夹？。</p></li><li><p>通过实践，发现其实不管如何设置下载指定的文件或文件夹，其实它都是有下载整个仓库容量大小，正如知乎<a href="https://www.zhihu.com/question/21114773/answer/34943423" target="_blank" rel="noopener">宫玖的回答 - 知乎</a>，@依云指出：</p><blockquote><p>你一定没有亲自去尝试这个功能。「checkout」!=「clone/fetch」。实际上整个仓库还是会全部拖回本地，只是检出的时候不检出别的目录而已。</p></blockquote></li><li><p><code>git pull --depth=1 origin master</code> ：depth 用于指定克隆深度，为 1 即表示只克隆最近一次 commit，可以不加，否则可能出现问题。补充： <a href="https://mozillazg.com/2016/01/git-revert-depth-1.html" target="_blank" rel="noopener">git clone 时使用了 –depth 后，如何再重新拉取全部的历史</a>。</p></li></ol><p>PS：后来发现，其实直接打开想要下载的文件，在右上角可以直接鼠标右键点击<code>Raw</code>选择链接另存为即可下载。或是使用浏览器插件【<a href="https://chrome.google.com/webstore/detail/gitzip-for-github/ffabmkklhbepgcgfonabamgnfafbdlkn" target="_blank" rel="noopener">GitZip for github</a> 】可以非常方便下载，推荐。</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/qq_36560161/article/details/78260532" target="_blank" rel="noopener">git clone克隆或下载一个仓库单个文件夹</a></li><li><a href="http://www.cnblogs.com/juking/p/7223669.html" target="_blank" rel="noopener">git只clone仓库中指定子目录和指定文件的实现</a></li></ul><h2 id="3-利用GitHub进行多人协作开发"><a href="#3-利用GitHub进行多人协作开发" class="headerlink" title="3. 利用GitHub进行多人协作开发"></a>3. 利用GitHub进行多人协作开发</h2><h3 id="1-开发并且提交代码"><a href="#1-开发并且提交代码" class="headerlink" title="(1) 开发并且提交代码"></a>(1) 开发并且提交代码</h3><p>首先要从 GitHub 上 clone 自己仓库代码到本地，你需要执行如下命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果没有配置ssh，可以 git clone https://github.com/strivebo/git-practice.git</span><br><span class="line">git clone git@github.com:strivebo/git-practice.git</span><br></pre></td></tr></table></figure><p>然后代码下载到本地了，修改代码，然后可以提交代码，命令如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .# 表示提交所有改动，指定提交某个文件的改动，则可 git add hello.txt</span><br><span class="line">git commit  -m '修改原因，相关说明信息'</span><br></pre></td></tr></table></figure><p>执行<code>git commit</code>之后，只是提交到了本机的仓库，而不是 GitHub 上你账号的仓库。你需要执行 push 命令，把 commit 提交到服务器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git push #直接到远程默认仓库，或者下面这个：</span><br><span class="line">git push orgin master #push到名为orgin的远程仓库的指定分支master</span><br></pre></td></tr></table></figure><p>这样就完成了修改远程仓库代码了。</p><h3 id="2-多人协作开发"><a href="#2-多人协作开发" class="headerlink" title="(2) 多人协作开发"></a>(2) 多人协作开发</h3><p>Q：假如想要进行多人协作开发。比如要对 xiaoming 的名为 git-test 的仓库贡献自己写的代码，比如说添加新功能，怎么操作呢？</p><blockquote><p>A：首先你需要 fork 一份 xiaoming 的 git-test 仓库到自己 GitHub 仓库，这个时候这个仓库就是你的了，再 clone 到本地磁盘，然后按上小节流程操作就可以完成对自己 fork 来的远程 git-test 仓库的代码修改工作。</p><p>然后可以发起 pull request 给 xiaoming 请求合并代码就行，随即 xiaoming 本人就会看到你写的代码，如果他觉得不错，没问题，他就可以进行合并了。（关于如何发起 pull request，请点击本小节参考资料查阅，有截图~）</p></blockquote><p>但这里的合作开发会有一个问题，如何与 xiaoming 的仓库代码保持同步？</p><p>因为在自己做开发的过程中，难免会遇到“Fork”的项目已经有了新的更新，这时当然是希望自己仓库中的代码也能同步进行更新。可是，你本地仓库所连接的远程仓库的是你自己的 GitHub 仓库，而不是原作者的仓库。 <strong>解决方法其实很简单，为你的本地仓库再添加一个远程仓库源。</strong> 步骤如下：</p><p>①先查看当前项目所连接的远程仓库：<code>git remote -v</code>，一般情况可以看到目前连接了自己的远程仓库，截图我就略了；</p><p>②然后添加源作者 xiaoming 的远程仓库连接：<code>git remote add upstream git@github.com:xiaoming/git-test.git</code></p><p>这个命令什么意思呢？就是对本地仓库再关联一个远程连接，名称为 upstream，地址为<code>git@github.com:xiaoming/test.git</code>（如果要取消该关联，使用这个命令：<code>git remote rm upstream</code>）</p><p>③</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（1）从原仓库获取最新版本到本地</span><br><span class="line">git fetch upstream master</span><br><span class="line"></span><br><span class="line">（2）保证当前位于 master 分支上</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">（3）将最新版本整合到本地 master 分支上</span><br><span class="line">git merge upstream/master</span><br><span class="line"></span><br><span class="line">（4）将更新发送到自己的 GitHub 仓库里</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>或者①②③步可以用： <code>git pull upstream master</code> 这条命令替代，不过这样不太安全，因为你 fetch（获取）之后可以通过：<code>git log --oneline --graph --decorate --all</code>来查看更新的情况，再决定是否 merge（整合）到一起。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190127214003.png" alt></p><p>如上操作完毕，这样自己 fork 过来的仓库代码就和原作者仓库代码保证一致了。</p><p>也可参考该文：<a href="https://blog.csdn.net/qq1332479771/article/details/56087333" target="_blank" rel="noopener">github上fork了别人的项目后，再同步更新别人的提交</a>，该文第二种方法即上面讲的方式，命令如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v </span><br><span class="line">git remote add upstream git@github.com:xxx/xxx.git</span><br><span class="line">git fetch upstream</span><br><span class="line">git merge upstream/master</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/8c69d1021d98" target="_blank" rel="noopener">如何利用 Git 与 GitHub 进行多人协作开发</a></li><li><a href="https://gist.github.com/suziewong/4378619#gistcomment-1873334" target="_blank" rel="noopener">github的多人协作</a></li></ul><h2 id="4-同一台电脑配置多个Git账号"><a href="#4-同一台电脑配置多个Git账号" class="headerlink" title="4. 同一台电脑配置多个Git账号"></a>4. 同一台电脑配置多个Git账号</h2><p>在日常使用 GitHub 作为仓库使用的时候，有时可能会遇到这样的一些情况：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 有两个 github 账号，一台电脑怎么同时连接这两个账号进行维护呢？</span><br><span class="line">2. 自己用一个 github 账号，平时用来更新自己的一些资料；公司使用的 gitlab（也是 git 的衍生产品）</span><br></pre></td></tr></table></figure><p>SSH Key 的配置：</p><ol><li><p><code>Windows</code> 下打开 <code>Git Bash</code>，创建 <code>SSH Key</code>，按提示输入密码，可以不填密码一路回车</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C "注释" #如：ssh-keygen -t rsa -C “123456@qq.com”</span><br></pre></td></tr></table></figure></li><li><p>生成另外一个账号新的 SSH keys</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "注释"#如：ssh-keygen -t rsa -C "123456@sina.com"</span><br></pre></td></tr></table></figure><p>平时我们都是直接回车，默认生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。这里特别需要注意，出现提示输入文件名的时候(<code>Enter file in which to save the key (\~/.ssh/id_rsa): id_rsa_new</code>)要输入与默认配置不一样的文件名，比如：我这里填的是 <code>id_rsa_new</code>。</p><p>其实也可以一个命令操作，是使用 -f 参数指定文件名：<code>ssh-keygen -t rsa -C &quot;注释&quot; -f id_rsa_new&quot;</code></p></li><li><p>配置 <code>C:\Users\用户名\.ssh\config</code> 文件。在 <code>.ssh</code>文件夹下新建 config 文件（无后缀名），修改如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">#github2</span><br><span class="line">Host second.github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_new</span><br></pre></td></tr></table></figure><p><em>注：令不同 Host 实际映射到同一<code>HostName</code>，但密钥文件不同。Host 前缀可自定义。</em></p><p>它们具体的含义如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#Host myhost（这里是自定义的host简称，以后连接远程服务器就可以用命令ssh myhost）[注意下面有缩进]</span><br><span class="line">#User 登录用户名(如：git)</span><br><span class="line">#HostName 主机名可用ip也可以是域名(如:github.com或者bitbucket.org)</span><br><span class="line">#Port 服务器open-ssh端口（默认：22,默认时一般不写此行）</span><br><span class="line">#IdentityFile 证书文件路径（如~/.ssh/id_rsa_*)</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi xiaoming! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">$ ssh -T git@second.github.com</span><br><span class="line">Hi zhangsan!  You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ol><p>解决方案总结为：</p><ol><li>生成私钥/公钥，密钥文件命名避免重复</li><li>设置不同 Host 对应同一 HostName 但密钥不同</li><li>取消 git 全局用户名/邮箱设置，为每个仓库独立设置用户名/邮箱</li></ol><p>如何取消 Git 全局用户名/邮箱设置，如下：</p><ol><li><p>使用 <code>git config --list</code> 查看当前配置</p><p>如果你之前在设置本地仓库和 <code>github</code> 连接的时候设置过 <code>user.name</code> 和 <code>user.email</code>, 那么你必须首先清楚掉该设置，因为不清楚掉该设置，两个账号在提交资料的时候，验证肯定冲突（只能设置一个全局的<code>user.name</code> 和 <code>user.email</code>，而你现在有两个账号就对应两个不同的）。</p></li><li><p>取消 global</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure></li><li><p>设置每个项目 repo 的自己的 user.email</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  user.email "xxxx@xx.com"</span><br><span class="line">git config  user.name "suzie"</span><br></pre></td></tr></table></figure></li></ol><p>或者直接直接编辑电脑<code>.gitconfig</code> 文件（Windows 系统在<code>C:\Users\用户名\.gitconfig</code>目录），把 <code>name</code> 和 <code>email</code> 都去掉，从而取消全局用户/邮箱设置。</p><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/3fc93c16ad2d" target="_blank" rel="noopener">一台电脑绑定两个github帐号教程</a></li><li><a href="https://github.com/jawil/notes/issues/2" target="_blank" rel="noopener">同一台电脑配置多个git账号</a></li><li><a href="https://blog.csdn.net/jifaliwo123/article/details/79126785" target="_blank" rel="noopener">一台电脑绑定两个git帐号(GitHub和GitLab)</a></li></ul><h2 id="5-Git配置多个SSH-key？为什么？"><a href="#5-Git配置多个SSH-key？为什么？" class="headerlink" title="5. Git配置多个SSH-key？为什么？"></a>5. Git配置多个SSH-key？为什么？</h2><p>背景：当有多个 git 账号时，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a. 一个 gitee，用于公司内部的工作开发；</span><br><span class="line">b. 一个 github，用于自己进行一些开发活动；</span><br></pre></td></tr></table></figure><p>操作步骤：</p><p>①生成一个公司用的 SSH-Key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 'xxxxx@company.com' -f ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure><p>②生成一个 github 用的SSH-Key</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 'xxxxx@qq.com' -f ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure><p>③在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"></span><br><span class="line">#github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure><p>④用ssh命令分别测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://gitee.com/help/articles/4229#github" target="_blank" rel="noopener">Git配置多个SSH-Key</a></li><li><a href="https://blog.csdn.net/yimingsilence/article/details/79980135" target="_blank" rel="noopener">一台电脑配置多个ssh key（不同的多个邮箱ssh key，多git账号，智能选择对应的ssh key）</a></li><li><a href="https://www.jianshu.com/p/f7f4142a1556" target="_blank" rel="noopener">管理git生成的多个ssh key</a></li></ul><h2 id="6-如何将GitHub已有的项目转移到组织仓库中去"><a href="#6-如何将GitHub已有的项目转移到组织仓库中去" class="headerlink" title="6. 如何将GitHub已有的项目转移到组织仓库中去"></a>6. 如何将GitHub已有的项目转移到组织仓库中去</h2><p>打开仓库，点击 setting，拉到最下面，点击 Transfer，会看到要求输入如下：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190127214816.png" alt></p><p>在这里分别输入要转移的项目名称，第二行输入组织名。输入完毕之后点击<code>I understand transfer this repository</code>。</p><p>参考资料：<a href="https://blog.csdn.net/u011328417/article/details/74584487" target="_blank" rel="noopener">github如何将已有的项目转移到组织仓库中去</a></p><h2 id="7-如何在GitHub上添加协议？"><a href="#7-如何在GitHub上添加协议？" class="headerlink" title="7. 如何在GitHub上添加协议？"></a>7. 如何在GitHub上添加协议？</h2><p>①进入你的“代码仓库”，点击”Create new file”，这时 GitHub 的新页面上，有一个空格让你填入文件名称。</p><p>②在输入框输入文件名”LICENSE”，这里输入框的右侧会出现包含所有开源协议的列表，选择合适的开源协议，选择你需要的协议；</p><p>③点击“Commit new file”，这时你添加的开源协议就在代码仓库的菜单中了。</p><p>参考：<a href="https://www.jianshu.com/p/e4d6e6a05f14" target="_blank" rel="noopener">如何在github上添加协议</a></p><h2 id="8-保持码云Gitee和GitHub同步更新？"><a href="#8-保持码云Gitee和GitHub同步更新？" class="headerlink" title="8. 保持码云Gitee和GitHub同步更新？"></a>8. 保持码云Gitee和GitHub同步更新？</h2><p>使用 GitHub 时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况（原因你懂的）。如果我们希望体验 Git 飞一般的速度，可以使用国内的 Git 托管服务——<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>（<a href="https://gitee.com/" target="_blank" rel="noopener">gitee.com</a>）。和 GitHub 相比，码云也提供免费的 Git 仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5 人以下小团队免费。</p><p>使用码云和使用 GitHub 类似，在此不赘述了。下面主要讲的是从 GitHub 上 clone 下来的仓库如何与 Gitee 保持同步更新，操作如下：</p><p>切换到本地仓库目录，先使用命令：<code>git remote -v</code> 查看是否关联了远程仓库。如果显示如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">origin    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>说明本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向 GitHub。我们可以关联一个远程仓库并指向 Gitee，这样本地库就既关联 GitHub，又关联码云。</p><p>PS：使用多个远程库时，我们要注意，Git 给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p><p>接下来，我们再关联码云远程仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add gitee git@gitee.com:liaoxuefeng/learngit.git</span><br></pre></td></tr></table></figure><p>注意：远程库的名称叫<code>gitee</code>，不叫<code>origin</code>。</p><p>现在，我们用<code>git remote -v</code>查看远程库信息，可以看到两个远程库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)</span><br><span class="line">gitee    git@gitee.com:liaoxuefeng/learngit.git (push)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (fetch)</span><br><span class="line">github    git@github.com:michaelliao/learngit.git (push)</span><br></pre></td></tr></table></figure><p>如果要推送到 GitHub，使用命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure><p>如果要推送到码云，使用命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push gitee master</span><br></pre></td></tr></table></figure><blockquote><p>注意：本人用的同一个 ssh-key 的情况下，在提交代码使用简短命令：<code>git push</code>时候貌似只提交到了 GitHub 远程仓库；若要提交到 Gitee，则再需<code>git push gitee master</code>。</p></blockquote><p>参考：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">使用码云 - 廖雪峰的官方网站</a></p><h2 id="9-如何正确接收-GitHub-的消息邮件"><a href="#9-如何正确接收-GitHub-的消息邮件" class="headerlink" title="9. 如何正确接收 GitHub 的消息邮件"></a>9. 如何正确接收 GitHub 的消息邮件</h2><p>参考：<a href="https://github.com/cssmagic/blog/issues/49" target="_blank" rel="noopener">如何正确接收 GitHub 的消息邮件</a> </p><h2 id="10-精准分享关键代码"><a href="#10-精准分享关键代码" class="headerlink" title="10. 精准分享关键代码"></a>10. 精准分享关键代码</h2><p>比如你有一个文件里的某一行代码写得非常酷炫或者关键，想分享一下。可以在 url 后面加上，比如，点击下面这 个 url：<a href="https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L240" target="_blank" rel="noopener">https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L240</a>，你便会跳到 <code>alloy_touch.js</code> 的第 240 行。如果是想分享多行代码，也很简单：url 后面加上 <code>#L</code> 开始行号 <code>-L</code> 结束行号，比如，AlloyTouch 的运动缓动和逆向缓动函数如下面代码段所示：<a href="https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39-L45" target="_blank" rel="noopener">https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39-L45</a>，其实也不用记忆你直接在网址后面操作，GitHub 自动会帮你生成 url。比如你点击 39 行，url 变成了：<a href="https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39" target="_blank" rel="noopener">https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39</a>，再按住 shift 点击 45 行，url 变成了：<a href="https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39-L45" target="_blank" rel="noopener">https://github.com/AlloyTeam/AlloyTouch/blob/master/alloy_touch.js#L39-L45</a>，然后你这个 url 就可以复制分享出去了，点击这个 url 的人自动会跳到 39 行，并且 39-45 行高亮。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190303114615.png" alt></p><h2 id="11-通过提交的msg自动关闭issues"><a href="#11-通过提交的msg自动关闭issues" class="headerlink" title="11. 通过提交的msg自动关闭issues"></a>11. 通过提交的msg自动关闭issues</h2><p>比如有人提交了个 issues <a href="https://github.com/AlloyTeam/AlloyTouch/issues/6" target="_blank" rel="noopener">https://github.com/AlloyTeam/AlloyTouch/issues/6</a>，然后你去主干上改代码，改完之后提交填 msg 的时候，填入：<code>fix https://github.com/AlloyTeam/AlloyTouch/issues/6</code>，这个 issues 会自动被关闭。当然不仅仅是 fix 这个关键字。下面这些关键字也可以：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">close</span><br><span class="line">closes</span><br><span class="line">closed</span><br><span class="line">fixes</span><br><span class="line">fixed</span><br><span class="line">resolve</span><br><span class="line">resolves</span><br><span class="line">resolved</span><br></pre></td></tr></table></figure><h2 id="12-gitattributes设置项目语言"><a href="#12-gitattributes设置项目语言" class="headerlink" title="12. gitattributes设置项目语言"></a>12. gitattributes设置项目语言</h2><p>GitHub 会根据相关文件代码的数量来自动识别你这个项目哪个语言代码项目。这就带来了一个问题，比如 AlloyTouch 最开始被识别成 HTML 项目，因为 HTML 例子比 JS 文件多。怎么办呢？gitattributes 来帮助你搞定。在项目的根目录下添加如下 <code>.gitattributes</code> 文件便可，里面的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.html linguist-language=JavaScript</span><br></pre></td></tr></table></figure><p>主要意思是把所有 html 文件后缀的代码识别成 js 文件。</p><h2 id="13-查看自己项目的访问数据"><a href="#13-查看自己项目的访问数据" class="headerlink" title="13. 查看自己项目的访问数据"></a>13. 查看自己项目的访问数据</h2><p>在自己的项目下，点击 Insights，然后再点击 Traffic，里面有 Referring sites 和 Popular content 的详细数据和排名。如：Referring sites</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190303115918.png" alt></p><p>其中 Referring sites 代表大家都是从什么网站来到你的项目的，Popular content 代表大家经常看你项目的哪些文件。</p><h2 id="14-trending排行榜"><a href="#14-trending排行榜" class="headerlink" title="14. trending排行榜"></a>14. trending排行榜</h2><p>来看看怎么查看某类型语言的每日排行榜。比如 JavaSrcipt 每日排行榜：</p><ul><li>JavaScript：<a href="https://github.com/trending/javascript?since=daily" target="_blank" rel="noopener">https://github.com/trending/javascript?since=daily</a></li><li>Java：<a href="https://github.com/trending/java?since=daily" target="_blank" rel="noopener">https://github.com/trending/java?since=daily</a></li><li>Python：<a href="https://github.com/trending/python?since=daily" target="_blank" rel="noopener">https://github.com/trending/python?since=daily</a></li></ul><p>GitHub 推荐：<a href="https://github.com/explore" target="_blank" rel="noopener">https://github.com/explore</a></p><h2 id="15-使用GitHub-release发布应用"><a href="#15-使用GitHub-release发布应用" class="headerlink" title="15. 使用GitHub release发布应用"></a>15. 使用GitHub release发布应用</h2><p>(1) 创建release</p><ol><li><p>在 repo 的主页上，点击 release，进入 release 界面 </p></li><li><p>在 release 界面点选 create a new release </p></li><li><p>填写相关信息，上传文件 </p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190309121245.png" alt></p><ol><li><p>publish release </p></li><li><p>通过 GitHub 官方提供的 api 可访问我们的 release 信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/repos/:owner/:repo/releases/:id</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>参考：<a href="https://blog.csdn.net/Eggy2015/article/details/52138751" target="_blank" rel="noopener">github release 功能的使用及问题解决 </a></p><h1 id="二、GitHub项目美化"><a href="#二、GitHub项目美化" class="headerlink" title="二、GitHub项目美化"></a>二、GitHub项目美化</h1><h2 id="1-GitHub项目徽章的添加和设置"><a href="#1-GitHub项目徽章的添加和设置" class="headerlink" title="1. GitHub项目徽章的添加和设置"></a>1. GitHub项目徽章的添加和设置</h2><p>GitHub 项目的 README.md 中可以添加徽章（Badge）对项目进行标记和说明，这些好看的小图标不仅简洁美观，而且还包含了清晰易读的信息。</p><p>徽标主要由图片和对应的链接（当然，你可以不填）组成，徽标图片的话一般由左半部分的名称和右半部分的值组成。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190127215817.png" alt></p><p>GitHub 徽标的官方网站是：<a href="https://link.juejin.im/?target=http%3A%2F%2Fshields.io%2F" target="_blank" rel="noopener">shields.io/</a>，我们可以在官网预览绝大部分的徽标样式，然后选择自己喜欢的（当然首先需要适用于自己的目标项目）徽标，添加到自己的项目文档中去。</p><p>参考资料：</p><ul><li><a href="https://shikieiki.github.io/2017/03/01/%E4%B8%BA%E4%BD%A0%E7%9A%84Github%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E5%BE%BD%E7%AB%A0%E5%92%8C%E8%BF%9B%E5%BA%A6%E6%9D%A1/" target="_blank" rel="noopener">为你的Github README生成漂亮的徽章和进度条</a></li><li><a href="https://juejin.im/entry/5907fa59570c3500582d326c" target="_blank" rel="noopener">GitHub 项目徽章的添加和设置</a></li></ul><h2 id="2-为GitHub项目添加表情"><a href="#2-为GitHub项目添加表情" class="headerlink" title="2. 为GitHub项目添加表情"></a>2. 为GitHub项目添加表情</h2><p>GitHub 支持的表情，官网查询：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p><p>格式，如：<code>:blush:</code>，显示为:blush:</p><h1 id="三、GitHub使用细节"><a href="#三、GitHub使用细节" class="headerlink" title="三、GitHub使用细节"></a>三、GitHub使用细节</h1><h2 id="1-本地查看远程分支"><a href="#1-本地查看远程分支" class="headerlink" title="1. 本地查看远程分支"></a>1. 本地查看远程分支</h2><p>git clone 默认会把远程仓库整个给 clone下来，但只会在本地默认创建一个 master 分支，如果远程还有其他的分支，此时用 <code>git branch -a</code> 查看所有分支。</p><h2 id="2-GitHub支持多种协议"><a href="#2-GitHub支持多种协议" class="headerlink" title="2. GitHub支持多种协议"></a>2. GitHub支持多种协议</h2><p>GitHub 给出的地址不止一个，除了 <code>git@github.com:xiaoming/test.git</code> 这个地址，还可以使用<code>https://github.com/xiaoming/test.git</code>  这样的地址。实际上，Git 支持多种协议，默认的 <code>git://</code> 使用ssh，但也可以使用 https 等其他协议。</p><p>使用 https 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p><h2 id="3-设置默认被推送的分支"><a href="#3-设置默认被推送的分支" class="headerlink" title="3. 设置默认被推送的分支"></a>3. 设置默认被推送的分支</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin test #设置默认被推送的分支</span><br><span class="line">git push#这个时候我推送的远程分支应该是 origin/test</span><br></pre></td></tr></table></figure><p>查看<code>git push</code>关联的远程分支：<code>git branch -v</code>。</p><h2 id="4-ssh-keygen命令"><a href="#4-ssh-keygen命令" class="headerlink" title="4. ssh-keygen命令"></a>4. ssh-keygen命令</h2><p>ssh-keygen 命令用于为“ssh”生成、管理和转换认证密钥，它支持 RSA 和 DSA 两种认证密钥。语法：<code>ssh-keygen(选项)</code></p><p>参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-b：指定密钥长度；</span><br><span class="line">-e：读取openssh的私钥或者公钥文件；</span><br><span class="line">-C：添加注释；</span><br><span class="line">-f：指定用来保存密钥的文件名；</span><br><span class="line">-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；</span><br><span class="line">-l：显示公钥文件的指纹数据；</span><br><span class="line">-N：提供一个新密语；</span><br><span class="line">-P：提供（旧）密语；</span><br><span class="line">-q：静默模式；</span><br><span class="line">-t：指定要创建的密钥类型。</span><br></pre></td></tr></table></figure><p>如：<code>ssh-keygen -t rsa -C &quot;123456@qq.com&quot;</code></p><h2 id="5-Git忽略提交-gitignore文件"><a href="#5-Git忽略提交-gitignore文件" class="headerlink" title="5. Git忽略提交(.gitignore文件)"></a>5. Git忽略提交(.gitignore文件)</h2><p>在使用 Git 的过程中，我们喜欢有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。简单来说一个场景：在你使用<code>git add .</code>的时候，遇到了把你不想提交的文件也添加到了缓存中去的情况，比如项目的本地配置信息，如果你上传到 Git 中去其他人 pull 下来的时候就会和他本地的配置有冲突，所以这样的个性化配置文件我们一般不把它推送到 GIt 服务器中，但是又为了偷懒每次添加缓存的时候都想用<code>git add .</code>而不是手动一个一个文件添加，该怎么办呢？很简单，Git 为我们提供了一个<code>.gitignore</code>文件只要在这个文件中申明那些文件你不希望添加到 Git 中去，这样当你使用<code>git add .</code>的时候这些文件就会被自动忽略掉。</p><p>对于经常使用 Git 的朋友来说，<code>.gitignore</code>配置一定不会陌生。这种方式通过在项目的某个文件夹下定义<code>.gitignore</code>文件，在该文件中定义相应的忽略规则，来管理当前文件夹下的文件的 Git 提交行为。<code>.gitignore</code>文件是可以提交到公有仓库中，这就为该项目下的所有开发者都共享一套定义好的忽略规则。在<code>.gitingore</code>文件中，遵循相应的语法，在每一行指定一个忽略规则。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.log</span><br><span class="line">*.temp</span><br><span class="line">/vendor</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">Git忽略提交规则 - .gitignore配置运维总结</a></p><h2 id="6-如何在README-md中嵌入一个Gist？"><a href="#6-如何在README-md中嵌入一个Gist？" class="headerlink" title="6. 如何在README.md中嵌入一个Gist？"></a>6. 如何在README.md中嵌入一个Gist？</h2><p>适用于 GitHub 的网页，通过 Jekyll，使用 Markdown 中的脚本标记，然后由 Jekyll 处理。因为 Markdown支持 html，所以可以直接使用&lt; script&gt;标签嵌入 Gist。</p><p>只需复制 GitHub 提供的 Gist 的嵌入网址，示例，复制以下内容并粘贴到 Markdown 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; script src =“https://gist.github.com/nisrulz/11c0d63428b108f10c83.js”&gt;&lt; / script&gt;</span><br></pre></td></tr></table></figure><p>这样能看到想要的结果。注：以上使用的 Jekyll 方式，亲测，如果是直接嵌入 README.md 文件是不行的，因为 GitHub为了安全性都不能引入自定义的 JS 和 CSS。</p><p>参考：</p><ul><li><a href="https://stackoverflow.com/questions/11622509/github-how-to-embed-a-gist-into-readme-md" target="_blank" rel="noopener">Github: How to embed a gist into README.md? - Stack Overflow</a></li><li><a href="https://codeday.me/bug/20171022/88303.html" target="_blank" rel="noopener">Github：如何在README.md中嵌入一个gist？</a></li><li><a href="https://stackoverflow.com/questions/51956361/custom-css-file-for-readme-md-in-a-github-repo" target="_blank" rel="noopener">Custom css file for readme.md in a Github repo - Stack Overflow</a></li></ul><h2 id="7-其他网页上面嵌入个人的GitHub仓库？"><a href="#7-其他网页上面嵌入个人的GitHub仓库？" class="headerlink" title="7. 其他网页上面嵌入个人的GitHub仓库？"></a>7. 其他网页上面嵌入个人的GitHub仓库？</h2><p>是否想在其他网页上面嵌入自己的 GitHub 仓库页面，有个 star 或 fork 按钮，如下图：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190131161941.png" alt></p><p>可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://ghbtns.com/github-btn.html?user=strivebo&amp;amp;repo=websites-and-tools&amp;amp;type=watch&amp;amp;count=true&amp;amp;size=large"</span> <span class="attr">allowtransparency</span>=<span class="string">"true"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"156px"</span> <span class="attr">height</span>=<span class="string">"30px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://ghbtns.com/github-btn.html?user=strivebo&amp;amp;repo=websites-and-tools&amp;amp;type=fork&amp;amp;count=true&amp;amp;size=large"</span> <span class="attr">allowtransparency</span>=<span class="string">"true"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">scrolling</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"156px"</span> <span class="attr">height</span>=<span class="string">"30px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把 user 和 repo 改成你自己的就可以了。注：亲测，GitHub 网站页面暂不支持。</p><h2 id="8-GitHub快捷方式"><a href="#8-GitHub快捷方式" class="headerlink" title="8. GitHub快捷方式"></a>8. GitHub快捷方式</h2><ul><li>issue 中输入冒号 <code>:</code> 添加表情</li><li>任意界面 <code>shift + ？</code>显示快捷键</li><li>issue 中选中文字，R 键快速引用</li></ul><h1 id="参考及推荐资料"><a href="#参考及推荐资料" class="headerlink" title="参考及推荐资料"></a>参考及推荐资料</h1><ul><li><a href="https://github.com/waylau/github-help" target="_blank" rel="noopener">waylau/github-help</a></li><li><a href="http://wiki.jikexueyuan.com/project/github-secret/" target="_blank" rel="noopener">GitHub 秘籍-极客学院Wiki</a></li><li><a href="http://www.cnblogs.com/iamzhanglei/p/6177961.html" target="_blank" rel="noopener">你必须收藏的Github技巧  - 博客园</a></li></ul><hr><p><em>update：2019-07-21</em> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 使用指南。
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于写作(3)：Typora写作指南（图床采用：PicGo+腾讯云COS）</title>
    <link href="http://yoursite.com/2019/02/13/%E5%85%B3%E4%BA%8E%E5%86%99%E4%BD%9C(3)%EF%BC%9ATypora%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%BE%E5%BA%8A%E9%87%87%E7%94%A8%EF%BC%9APicGo+%E8%85%BE%E8%AE%AF%E4%BA%91COS%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/13/关于写作(3)：Typora写作指南（图床采用：PicGo+腾讯云COS）/</id>
    <published>2019-02-13T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.473Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 写作软件 Typora 的介绍和使用。<a id="more"></a></p><h3 id="1-Typora介绍"><a href="#1-Typora介绍" class="headerlink" title="(1) Typora介绍"></a>(1) Typora介绍</h3><p>Markdown 这种格式被许多写作网站支持，可以说技术人写作必备。本人目前一直在用的 Markdown 编辑器如那件为 Typora，虽然也很多在线编辑器，但总觉得有些不方便，想一想没联网的时候呢。<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a> 是一款非常好用跨平台 Markdown 编辑器，编写过程中所见及所得，当然也能切换到源码方式，非常方便。</p><p>Typora 在安装后默认的主题有这么几个：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Github</span><br><span class="line">Newsprint</span><br><span class="line">Night</span><br><span class="line">Pixyll</span><br><span class="line">Whitey</span><br></pre></td></tr></table></figure><p><strong>美化Typora的中文字体——设置为「微软雅黑」</strong></p><p>不管切换哪一个主题，中文字体都默认显示为“宋体”，觉得丑可以考虑更改为其他字体。操作：打开“文件” –&gt; “偏好设置” –&gt; 找到「主题」栏，“打开主题文件夹”，该路径默认为<code>C:\Users\用户名\AppData\Roaming\Typora\themes</code>，你也可以直接找到该路径打开，然后就是修改 CSS 了。</p><p>打开<code>github.css</code>，仅在 body{} 模块的”font-family”后面增加<code>Microsoft YaHei</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>,<span class="string">"Open Sans"</span>,<span class="string">"Clear Sans"</span>,<span class="string">"Helvetica Neue"</span>,Helvetica,Arial,sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(51, 51, 51);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Typora 即可。</p><h3 id="2-Typora快捷键"><a href="#2-Typora快捷键" class="headerlink" title="(2) Typora快捷键"></a>(2) Typora快捷键</h3><ul><li><code>Ctrl+Shitf+L</code>：左侧显示和隐藏目录</li><li><code>Ctrl+/</code>：切换到源码模式</li><li></li></ul><h3 id="3-Typora安装新主题"><a href="#3-Typora安装新主题" class="headerlink" title="(3) Typora安装新主题"></a>(3) Typora安装新主题</h3><p>首先进入 Typora 官网 Themes 页面：<a href="https://theme.typora.io/" target="_blank" rel="noopener">Typora主题</a>，然后选择一个中意的主题，比如 Catfish 主题，然后点击该主题的名称。点击对应主题后进入主题介绍和下载界面，我们然后点击 Download 下载该主题，下载好的主题存放在本地磁盘。然后我们打开下载的压缩包，可以看到：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190201171633.png" alt></p><p>把其中<code>catfish</code>、<code>catfish.css</code>、<code>catfish.styl</code>拷贝到主题所在的文件夹下即可，当然把压缩包所有文件全部拷贝也可以。最后打开 Typora 可以看到主题菜单栏多出了 Catfish 主题，选择即可使用该主题。</p><h3 id="4-Typora引入图片地址（采用PicGo-腾讯云COS）-荐"><a href="#4-Typora引入图片地址（采用PicGo-腾讯云COS）-荐" class="headerlink" title="(4) Typora引入图片地址（采用PicGo+腾讯云COS）[荐]"></a>(4) Typora引入图片地址（采用PicGo+腾讯云COS）[荐]</h3><p>作为一个比较常用 Markdown 写文章、博客的人，在 Markdown 里插入图片是经常操作的一件事，虽然可以采用把图片放在本地然后引入的方式，但觉得非常不方便，比如图片多了的时候，就烦恼了。</p><p>后来我了解到了网络图床，可能你不知道图床是什么，简单说，就是可以把你需要的图床上传到图床网站，然后 Markdown 文档中引入图片的网络地址即可。</p><p>之后我就选择了七牛云作为图床，因为听说有免费的 10G 免费存储空间，我觉得也够了，另外也听说很多人在用。配合上传工具（我使用的是浏览器插件「极简图床」）进行上传，还是非常方便的。但在使用期间出现过了「极简图床」不能登录的情况，另外，七牛云也出现了变化，官方发邮件提示测试域名要被回收，测试域名回收后以前那些上传的图片地址就失效了。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190201174237.png" alt></p><p>这就非常尴尬了。</p><p>于是，我考虑着得找个比较好的解决方式。在与别人交流相关问题后，有让我了解到了腾讯 COS 和 PicGo 工具，后面我就实操了，哈哈，简直不能太方便。</p><p>另外，当时看官方说明，腾讯云 COS 有 50G 的永久免费存储空间，不过截止到现在 2019-02-01 登陆了官网查看，才发现了 2019-01-25 腾讯云对象存储 COS 免费额度已经发生了变更，变成了这样：</p><table><thead><tr><th>用户类型</th><th>免费额度</th><th>有效期</th></tr></thead><tbody><tr><td>个人用户</td><td>50GB标准存储容量</td><td>6个月</td></tr><tr><td>企业用户</td><td>1TB标准存储容量</td><td>6个月</td></tr></tbody></table><p>个人用户免费额度有效时间 6 个月。不过发现站内信给我的通知，我未受此次变更影响，也就是说我还是能享受 50G 的永久免费存储空间，突然有种「早就是优势」的赶脚。</p><p>GitHub 地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Molunerfinn/PicGo</a>，如何使用 PicGo 可以参考该文：<a href="https://sspai.com/post/42310" target="_blank" rel="noopener">PicGo：基于 Electron 的图片上传工具 - 少数派</a>。该工具目前支持微博图床、七牛图床、腾讯云 COS 等等。</p><p>使用 PicGo 上传图片到腾讯云 COS，参考：<a href="https://sspai.com/post/44495" target="_blank" rel="noopener">图床上传工具PicGo v1.5更新：支持腾讯云COSv5版本、支持GitHub图床、支持上传前重命名文件等等 - 少数派</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 写作软件 Typora 的介绍和使用。
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="Typora" scheme="http://yoursite.com/tags/Typora/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub 学习4：GitHub支持的Markdown写作指南</title>
    <link href="http://yoursite.com/2019/02/13/%E5%85%B3%E4%BA%8E%E5%86%99%E4%BD%9C(1)%EF%BC%9AGitHub%E6%94%AF%E6%8C%81%E7%9A%84Markdown%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/02/13/关于写作(1)：GitHub支持的Markdown写作指南/</id>
    <published>2019-02-13T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.472Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 的 MarkDown 语法在标准的 Markdown 语法基础上做了扩充，称之为 GitHub Flavored Markdown，简称 GFM，GFM 在 GitHub 上有广泛应用，除了 README 文件外，issues 和 wiki 均支持 Markdown语法。<a id="more"></a></p><h2 id="一、Markdown最常用格式"><a href="#一、Markdown最常用格式" class="headerlink" title="一、Markdown最常用格式"></a>一、Markdown最常用格式</h2><h3 id="0-标题"><a href="#0-标题" class="headerlink" title="0. 标题"></a>0. 标题</h3><p>标题是每篇文章必备而且最常用的格式。在 Markdown 中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。还可增加二、三、四、五、六级标题，总共六级，只需要增加 # ，增加一个 # ，标题字号相应降低一级。如图：</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-0-%E6%A0%87%E9%A2%98.png" alt></p><h3 id="1-列表（有序、无序列表）"><a href="#1-列表（有序、无序列表）" class="headerlink" title="1. 列表（有序、无序列表）"></a>1. 列表（有序、无序列表）</h3><p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。<em>注：-、1.和文字之间要保留一个字符的空格。</em></p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-1-%E5%88%97%E8%A1%A8.png" alt></p><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h3><p>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。在引用文字前加上 &gt; 并与文字保留一个字符的空格，即可。</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-2%E5%BC%95%E7%94%A8.png" alt></p><h3 id="3-粗体和斜体"><a href="#3-粗体和斜体" class="headerlink" title="3. 粗体和斜体"></a>3. 粗体和斜体</h3><p>Markdown 的粗体和斜体也非常简单：用两个 <em> 包含一段文本就是粗体的语法；用一个 </em> 包含一段文本就是斜体的语法；用三个 * 包含一段文本就是粗体+斜体的语法。</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-3-%E7%B2%97%E4%BD%93%E6%96%9C%E4%BD%93.png" alt></p><h3 id="4-链接与图片"><a href="#4-链接与图片" class="headerlink" title="4. 链接与图片"></a>4. 链接与图片</h3><p>链接：在 Markdown 中，插入链接只需要使用 <code>[显示文本](链接地址)</code> 即可。</p><p>图片：在 Markdown 中，插入图片只需要使用 <code>![显示文本](图片链接地址)</code> 即可。</p><p><em>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！</em></p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-4%E9%93%BE%E6%8E%A5%E4%B8%8E%E5%9B%BE%E7%89%87.png" alt></p><h3 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5. 分割线"></a>5. 分割线</h3><p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可分割两段文字内容。如图：</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-5-%E5%88%86%E5%89%B2%E7%BA%BF.png" alt></p><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6. 表格"></a>6. 表格</h3><p>当你需要在 Markdown 文稿中键入表格，示例如下：</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/2-6-7.png" alt></p><h2 id="二、Markdown还可以做什么？"><a href="#二、Markdown还可以做什么？" class="headerlink" title="二、Markdown还可以做什么？"></a>二、Markdown还可以做什么？</h2><h3 id="1-代码高亮"><a href="#1-代码高亮" class="headerlink" title="1. 代码高亮"></a>1. 代码高亮</h3><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/1-1%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE.png" alt></p><h3 id="2-制作待办事项To-do-List"><a href="#2-制作待办事项To-do-List" class="headerlink" title="2. 制作待办事项To-do List"></a>2. 制作待办事项To-do List</h3><p>待办事项和清单在日常工作、生活中经常被使用。在 Markdown 中，只需要在待办的事项文本或者清单文本前加上 - [ ]、- [x] 即可。</p><p>- [ ] 表示未完成，- [x] 表示已完成。</p><p><em>注：键入字符与字符之间都要保留一个字符的空格。</em></p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/1-2%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9.png" alt></p><h3 id="3-高效绘制-流程图、序列图、甘特图、表格"><a href="#3-高效绘制-流程图、序列图、甘特图、表格" class="headerlink" title="3. 高效绘制 流程图、序列图、甘特图、表格"></a>3. 高效绘制 流程图、序列图、甘特图、表格</h3><h4 id="流程图："><a href="#流程图：" class="headerlink" title="流程图："></a>流程图：</h4><p>在 Markdown 中，一段流程图语法以 “` 开头，以 “` 结尾。</p><p>在 “` 后另起一行，书写graph XX，用以确定将要绘制的流程图及其类型（XX表示流程图类型）。</p><p>流程图分为竖向和横向两大类，竖向包括自上而下和自下而上两种顺序，横向包括从右到左和从左到右两种顺序。</p><p>其对应语法分别为：graph TB/graph BT/graph RL/graph LR。</p><ul><li>TB - top bottom（自上而下）</li><li>BT - bottom top（自下而上）</li><li>RL - right left（从右到左）</li><li>LR - left right（从左到右）</li></ul><p>示例如图：</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><p><strong>①对框线形状的调整，如，</strong> </p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/++.png" alt></p><p><strong>②对箭头的调整，如，</strong> </p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/+++.png" alt></p><h4 id="序列图："><a href="#序列图：" class="headerlink" title="序列图："></a>序列图：</h4><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/%E5%BA%8F%E5%88%97%E5%9B%BE.png" alt></p><h4 id="甘特图："><a href="#甘特图：" class="headerlink" title="甘特图："></a>甘特图：</h4><p>我们在工作中用甘特图作计划进度表、项目进度表再合适不过了。与流程图一样，Markdown 中，甘特图的语法也是以 “` 开头，以 “` 结尾。</p><p>在 “` 后另起一行，书写 gantt ，用以确定将要绘制的是甘特图。</p><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/%E7%94%98%E7%89%B9%E5%9B%BE.png" alt></p><h4 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h4><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/1-3%E8%A1%A8%E6%A0%BC.png" alt></p><h3 id="4-书写数学公式（注：GitHub不支持）"><a href="#4-书写数学公式（注：GitHub不支持）" class="headerlink" title="4. 书写数学公式（注：GitHub不支持）"></a>4. 书写数学公式（注：GitHub不支持）</h3><p><img src="http://note.youdao.com/iyoudao/wp-content/uploads/2016/09/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F.png" alt></p><h2 id="三、补充：GitHub支持的Markdown"><a href="#三、补充：GitHub支持的Markdown" class="headerlink" title="三、补充：GitHub支持的Markdown"></a>三、补充：GitHub支持的Markdown</h2><p>一、二节 Markdown 语法格式以及图片链接都是摘自有道云笔记官方的 Markdown 指南。大部分 Markdown 写作平台应该基本都能支持的上面的语法 ，部分不支持再参考下面的内容。</p><h3 id="1-目录索引"><a href="#1-目录索引" class="headerlink" title="1. 目录索引"></a>1. 目录索引</h3><p>使用 <code>[TOC]</code>自动生成目录，即不支持如下格式生成目录：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br><span class="line"></span><br><span class="line">### 技术</span><br><span class="line">#### Java</span><br><span class="line">#### Python</span><br></pre></td></tr></table></figure><p>目前 CSDN、有道云笔记、Typora 等都是支持的，掘金、GitHub 不支持。对于在 GitHub 写作来说，可以利用锚记手动写一个目录，示例代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TOC --&gt;</span></span><br><span class="line"></span><br><span class="line">- [编程技术](#编程技术)</span><br><span class="line">  - [Java编程](#Java编程)</span><br><span class="line">  - [Python编程](#Python编程)</span><br><span class="line">- [编程之外](#编程之外)</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- /TOC --&gt;</span></span><br></pre></td></tr></table></figure><p>其中，注意的地方，也是正确的操作姿势：</p><blockquote><p>这里的格式：<code>[这里写上你要显示的目录名称](#这里是标题名称)</code>，# 后面的标题名称不能完全复制粘贴标题名称，实质需要修改，这样修改：如果标题中含有逗号<code>,</code>、顿号<code>、</code>、句号<code>。</code>、点<code>.</code>、括号<code>(</code>、<code>)</code>、引号<code>“ ”</code>、问号<code>?</code>等这样的符号（包括全角、半角）都去除掉，空格符号用<code>-</code>代替，这样就可以目录索引了。（注：标题中含有英文的话，不管是大写小写，在 # 后都可以随意大小写，不一定要一样。）</p><p>PS：我也是使用该项目：<a href="https://github.com/CyC2018/GFM-Converter" target="_blank" rel="noopener">CyC2018/GFM-Converter</a> 发现这些的。该项目可以直接把 [TOC] 格式生成的目录转换为 GitHub 支持的目录， <strong>推荐使用！</strong> 使用步骤：</p><ol><li>先编译：<code>javac App.java</code>；</li><li>在运行：<code>java App</code>，然后会提示输入文件的路径；</li><li>输入需要转换的文件的完整路径（带文件名的那个路径，且包含后缀），点击“Enter”即可转换完成。</li></ol><p>PS：该项目还有些符号没考虑到，比如代码还未对问号做去除处理，2019-01-31。我 fork 了一份，哈哈，考虑今后或许我要是有能力修改呢：<a href="https://github.com/strivebo/GFM-Converter" target="_blank" rel="noopener">strivebo/GFM-Converter</a>。</p><p>另外该项目还支持把 LaTex 转换为 GitHub 支持的形式，赞。</p></blockquote><h3 id="2-返回顶部"><a href="#2-返回顶部" class="headerlink" title="2. 返回顶部"></a>2. 返回顶部</h3><p>①如返回到文章开头的标题：<code>GitHub支持的Markdown的语法使用指南</code>，直接使用 Markdown 方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[回到顶部](#GitHub支持的Markdown的语法使用指南)</span><br></pre></td></tr></table></figure><p>效果：<a href="#GitHub支持的Markdown的语法使用指南">回到顶部</a></p><p>②或是使用 HTML 方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#GitHub支持的Markdown的语法使用指南"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><div align="center"><br>        <a href="#GitHub支持的Markdown的语法使用指南">回到顶部</a><br></div><br>注意的地方，也是正确的操作姿势：</p><blockquote><p>这里的格式：<code>[这里写上你要显示的目录名称](#这里是标题名称)</code>，# 后面的标题名称不能完全复制粘贴标题名称，实质需要修改，这样修改：如果标题中含有逗号<code>,</code>、顿号<code>、</code>、句号<code>。</code>、点<code>.</code>、括号<code>(</code>、<code>)</code>、引号<code>“ ”</code>、问号<code>?</code>等这样的符号（包括全角、半角）都去除掉，空格符号用<code>-</code>代替，这样就可以目录索引了。（注：标题中含有英文的话，不管是大写小写，在 # 后都可以随意大小写，不一定要一样。）</p></blockquote><h3 id="3-定义锚点实现页面随处跳转"><a href="#3-定义锚点实现页面随处跳转" class="headerlink" title="3. 定义锚点实现页面随处跳转"></a>3. 定义锚点实现页面随处跳转</h3><p>锚点（英文名：anchor）：是网页制作中超级链接的一种，又叫命名锚记。命名锚记像一个迅速定位器一样是一种页面内的超级链接，运用相当普遍。</p><p>锚点用法：锚点用 id 属性来设置，一个标签如果有 id 属性（或者 name 属性），那么就是页面的一个锚点。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"anchor"</span>&gt;</span>我的作品<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">或者</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"anchor"</span>&gt;</span>我的作品<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">或者使用别的标签也都可以</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"anchor"</span>&gt;</span>我的作品<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>①那么实现页面内跳转，这样即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#anchor"</span>&gt;</span>查看我的作品<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    //超级链接，链接的该页面的锚点</span><br></pre></td></tr></table></figure><p>②跨页面跳转：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"页面.html#anchor"</span>&gt;</span>点击查看我的作品<span class="tag">&lt;/<span class="name">a</span>&gt;</span>      //超级链接，链接的事另一个界面的锚点</span><br></pre></td></tr></table></figure><p>GitHub 是支持可以这样做的。这样话，假设想要在页面 B 处返回到 A 处，可以在 A 处定义一个没有文字的锚记，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"mao"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：A 处可以是任何地方，包括标题处，只要是没有文字，文档 Push 到 GitHub 页面也不会显示的。</p><p>然后 B 处：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#mao"</span>&gt;</span>返回到前文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就可以点击 B 处的「返回到前文」返回到 A 处。当然在 B 处定义锚记（添加个 id 属性即可）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#mao"</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span>返回到前文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后 A 处想要返回到 B 处来，形式类似。前面小节关于目录索引、返回顶部实质也是利用的锚记。</p><h3 id="4-代码折叠"><a href="#4-代码折叠" class="headerlink" title="4. 代码折叠"></a>4. 代码折叠</h3><p>折腾效果，使用格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>示例：Hello World 程序<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">summary</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">?``` java</span><br><span class="line">代码</span><br><span class="line">?</span><br></pre></td></tr></table></figure><p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例如下：</span><br><span class="line"></span><br><span class="line">``` xml</span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;&lt;b&gt;示例：Hello World 程序&lt;/b&gt;&lt;/summary&gt; </span><br><span class="line"></span><br><span class="line">?``` java</span><br><span class="line">public class Hello&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?</span><br></pre></td></tr></table></figure></p><p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;&lt;b&gt;示例：Hello World 程序&lt;/b&gt;&lt;/summary&gt; </span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">public class Hello&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p></p><p><em>注：<code>&lt;details&gt;</code>为 HTML5 标签，与<code>&lt;summary&gt;</code>配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。</em></p><h3 id="5-LaTex数学公式（GitHub不支持）"><a href="#5-LaTex数学公式（GitHub不支持）" class="headerlink" title="5. LaTex数学公式（GitHub不支持）"></a>5. LaTex数学公式（GitHub不支持）</h3><p>在前面有提到该项目：<a href="https://github.com/CyC2018/GFM-Converter" target="_blank" rel="noopener">CyC2018/GFM-Converter</a> 代码，可以支持把 LaTex 书写的数学公式转换为 GitHub 支持的形式。另外，推荐下这个软件：<a href="https://mathpix.com/" target="_blank" rel="noopener">Mathpix</a>，可以将方程式截图转为 LaTex 格式。</p><h3 id="6-文字高亮（GitHub不支持）"><a href="#6-文字高亮（GitHub不支持）" class="headerlink" title="6. 文字高亮（GitHub不支持）"></a>6. 文字高亮（GitHub不支持）</h3><p>文字高亮显示，有道云笔记、Typora 支持，格式：<code>==需要高亮的文字==</code>。有道云笔记效果：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190127205122.png" alt></p><h3 id="7-文字下划线（GitHub不支持）"><a href="#7-文字下划线（GitHub不支持）" class="headerlink" title="7. 文字下划线（GitHub不支持）"></a>7. 文字下划线（GitHub不支持）</h3><p>①为文字添加下划线，格式：<code>++需要下划线的文字++</code>，有道云笔记支持，Typora、GitHub 不支持。有道云笔记效果：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190127205207.png" alt></p><p>②为文字添加下划线，格式：<code>&lt;u&gt;需要下划线的文字&lt;/u&gt;</code>，有道云笔记、Typora 支持，GitHub 不支持。</p><h3 id="8-文字添加删除线"><a href="#8-文字添加删除线" class="headerlink" title="8. 文字添加删除线"></a>8. 文字添加删除线</h3><p>为文字添加删除线，格式：<code>~~需要添加删除线的文字~~</code>。效果：<del>需要添加删除线的文字</del>。</p><h3 id="9-GitHub支持的表情符号"><a href="#9-GitHub支持的表情符号" class="headerlink" title="9. GitHub支持的表情符号"></a>9. GitHub支持的表情符号</h3><p>每个表情的符号码，可以查询 GitHub 官方网页：<a href="http://www.emoji-cheat-sheet.com" target="_blank" rel="noopener">http://www.emoji-cheat-sheet.com</a></p><p>查看：<a href="./Emoji表情中文翻译版.md">Emoji表情中文翻译版</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>GitHub：<a href="https://github.com/guodongxiaren/README#%E6%A8%AA%E7%BA%BF" target="_blank" rel="noopener">guodongxiaren/README</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="noopener">【简明版】有道云笔记Markdown指南</a></li><li><a href="http://note.youdao.com/iyoudao/?p=2445" target="_blank" rel="noopener">【进阶版】有道云笔记Markdown指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 的 MarkDown 语法在标准的 Markdown 语法基础上做了扩充，称之为 GitHub Flavored Markdown，简称 GFM，GFM 在 GitHub 上有广泛应用，除了 README 文件外，issues 和 wiki 均支持 Markdown语法。
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>关于写作(2)：使用七牛云作为图床获取外链方式总结（已更换为使用PicGO+腾讯云COS）</title>
    <link href="http://yoursite.com/2019/02/13/%E5%85%B3%E4%BA%8E%E5%86%99%E4%BD%9C(2)%EF%BC%9A%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%E8%8E%B7%E5%8F%96%E5%A4%96%E9%93%BE%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93%EF%BC%88%E5%B7%B2%E6%9B%B4%E6%8D%A2%E4%B8%BA%E4%BD%BF%E7%94%A8PicGO+%E8%85%BE%E8%AE%AF%E4%BA%91COS%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/13/关于写作(2)：使用七牛云作为图床获取外链方式总结（已更换为使用PicGO+腾讯云COS）/</id>
    <published>2019-02-13T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.472Z</updated>
    
    <content type="html"><![CDATA[<p>使用七牛云作为图床获取外链方式总结。注：已更换为使用 腾讯云 COS 做图床，上传工具使用的 PicGo。<a id="more"></a></p><h1 id="一、图床的选择"><a href="#一、图床的选择" class="headerlink" title="一、图床的选择"></a>一、图床的选择</h1><h2 id="1-什么是图床？"><a href="#1-什么是图床？" class="headerlink" title="1. 什么是图床？"></a>1. 什么是图床？</h2><p>很多技术人写作都有在用 Markdown 轻量级标记语言进行博客写作，这种写作让我们不用像使用 Word 那么麻烦调整排版和格式，而只需专心写作照样完成排版的一种写作方式。但是，基本所有支持 Markdown 本地写作工具都只能采用导入本地图片引用的方式，对于一篇需要大量图片阐述的文章，或者是文章发布于网络后图片丢失问题，这不得不是经常要面对的问题。</p><p>那么有什么比较好的解决方式吗？哈哈，有的。很多人采用的图片寄存于网络，用服务厂商作为图片存储的地方，大家称为图床。好了，那像 CSDN 博客、简书平台不是都可以做到图片存储吗？是的，在这些平台写文章的时候可以通过上传图片然后得到一个图片网络地址，但当图片数量多，一张一张上传，这也是非常麻烦，另外，也是担心万一人家平台做防盗链呢（不了解防盗链话自行谷歌下~）。其实我们想要图床功能，有很多专业的服务商免费提供一定容量和流量可以让我们方便干这些事情，比如七牛云。</p><h2 id="2-图床种类"><a href="#2-图床种类" class="headerlink" title="2. 图床种类"></a>2. 图床种类</h2><p>谷歌搜索下图床能搜到很多图床网站，列举一些供参考使用：</p><ul><li><a href="https://jiantuku.com/#/" target="_blank" rel="noopener">极简图床</a><br>默认公共图床使用 sm.ms、微博图床，可以自定义支持七牛，界面简洁美观，支持 <a href="https://chrome.google.com/webstore/detail/heebflcbemenefckkgfnnklbhdbdkagg" target="_blank" rel="noopener">Chrome 插件</a>，注册后还可以同步上传历史。</li><li><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></li><li><a href="http://tuchuang.org/" target="_blank" rel="noopener">Qchan图床</a></li><li><a href="http://pic.xiaojianjian.net/" target="_blank" rel="noopener">小贱贱图床</a></li><li><a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a> - SM.MS 由 V2EX @<a href="https://www.v2ex.com/member/Showfom" target="_blank" rel="noopener">Showfom</a> 自建的，无外链限制，无流量限制的图床，支持 HTTPS，速度不错。</li><li><a href="http://weibo.com/minipublish" target="_blank" rel="noopener">微博图床</a></li></ul><p><strong>(1) 图床分类</strong></p><ul><li>公共图床</li><li>自建图床：云服务（如七牛云、又拍云、阿里云 OSS）</li><li>自建图床：开源方案 （如 Lychee 开源方案、树洞外链）</li></ul><p>目前图床可以分为两种，一种是<strong>公共图床，一种是自建图床。</strong></p><p>公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如「微博图床」。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛云、Lychee 开源自建图床方案。</p><p>目前自建图床方案有两种，一种是利用云服务商提供的存储服务来作为图床，通过 API 来管理图片，另一种是在 VPS 上安装开源的图片或文件管理程序，只要能提供外链，基本都可以作为图床来用。</p><blockquote><p>图床服务最重要的是稳定性，大厂的云服务也都比较有保障，大家只要考虑下价格和易用性就可以了。就我个人而言，我首先推荐七牛，它的价格比较厚道，免费用户也有一定额度，数据可以自己掌控，另外各大平台的图床工具也基本都支持，易用性很高。其次推荐微博图床，对于不是很重要的图片，都可以存到微博图床，毕竟流量存储都免费，速度也不错。至于图床工具，就看自己的喜好了，只要顺手就行。但是不论选择哪一个服务或者工具，我觉得首先要自己可以掌控数据。</p><p>总之，适合自己的才是最好的。</p></blockquote><p><strong>(2) 图床工具</strong>   </p><p>虽然图床选择好，但是对普通用户来说，直接使用图床 API 很麻烦，我们可以借助一些工具方便的上传图片，下面就根据 macOS、Windows、Web 分别推荐几款工具。</p><p>macOS： </p><ul><li><p><a href="https://itunes.apple.com/cn/app/id1101244278?ls=1&amp;mt=12" target="_blank" rel="noopener">iPic - Markdown 图床、文件上传工具</a></p></li><li><p><a href="https://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a>（Markdown 写作工具，也支持上传图片）</p></li></ul><p>Windows： </p><ul><li><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPic-图床神器</a></li></ul><p>Web：</p><ul><li>比如「极简图床」插件、「微博图床」等等</li></ul><h1 id="二、七牛云图床使用"><a href="#二、七牛云图床使用" class="headerlink" title="二、七牛云图床使用"></a>二、七牛云图床使用</h1><p>关于七牛云的介绍：七牛是一个云存储服务商，注册并实名认证之后，你将免费享有 10GB 存储空间，每月 10GB 下载流量、100 万次 GET 请求、 10 万次 PUT/DELETE 请求。七牛的定位不是像百度云一样的网盘 ，也不是同坚果云一般的同步云 ，而是 CDN，让你在浏览网页的时候最快的接收到页面中的图片、音频等文件，所以非常适合个人、企业用户用来储存站点资源。对于个人博主来说，你可以把博客中的图片、音频、视频等媒体上传到七牛，在博客中引用；也可以将站点需要加载的 CSS、JS 等文件上传到七牛，以加速网站。</p><h2 id="1-最原始上传"><a href="#1-最原始上传" class="headerlink" title="1. 最原始上传"></a>1. 最原始上传</h2><p>①到 <a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a> 网站注册；</p><p>②实名认证（实名认证了才能享受 免费 10Gb 存储空间；<strong>实名认证需要「本人手持身份证」的正反面两张照片，请提前准备好</strong>）；</p><p>③点击「管理控制台」；</p><p>④「资源主页」–&gt; 点击「对象存储」，立即添加（即创建存储空间，七牛云把这个叫作”Bucket“），其中包括以下三个项：</p><ul><li>存储空间名称：存储空间名称作为唯一的 Bucket 识别符</li><li>存储区域：区域选择自己附近的</li><li>访问控制：作为图床的话，访问控制只能选择为「公开空间」</li></ul><p>点击创建，Ok。</p><p>⑤然后打开存储空间，选择内容管理，点击上传文件，上传你所需要用到的图片；</p><p>⑥上传完成后，在存储空间文件列表中点击某一文件的右侧按钮，可以看到外链地址，复制粘贴即可用。</p><p>现在来梳理下一张图片上传图片所经历的步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 登录打开七牛云网页个人存储空间</span><br><span class="line">2. 上传图片</span><br><span class="line">3. 复制外链</span><br><span class="line">4. 粘贴到 Markdown</span><br></pre></td></tr></table></figure><p>一张图片用了四步呐，要是图片很多，那不是作死嘛。有什么方法解决方便快捷上传吗？当然有，方法有三个：</p><ol><li><p>七牛云插件上传：简单</p></li><li><p>使用 dropzone 上传：方便</p><ul><li><a href="http://yansu.org/2015/01/10/use-dropzone-and-qiniu-to-store-blog-images.html" target="_blank" rel="noopener">使用Dropzone和七牛优化博客图床</a></li><li><a href="http://azeril.me/blog/How-To-Use-Image-Hosting-Quickly.html" target="_blank" rel="noopener">Mac OS 图床运用优化模式 - Microdust</a></li></ul></li><li><p>使用命令行上传：快捷，尤其适合需要目录及协作的团队</p><p>官方有个「开发者工具」页面，提供一些工具进行上传，包括后面讲的 <a href="https://developer.qiniu.com/sdk#official-tool" target="_blank" rel="noopener">qshell</a>， 其中有个「QSunSync」的 Windows 版本图片同步上传客户端。</p></li></ol><h2 id="2-七牛云插件上传：简单"><a href="#2-七牛云插件上传：简单" class="headerlink" title="2. 七牛云插件上传：简单"></a>2. 七牛云插件上传：简单</h2><p>浏览器插件 <del><a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc" target="_blank" rel="noopener">qiniu upload files</a></del></p><blockquote><p>七牛云插件，像使用桌面系统一样管理你的七牛云空间；支持拖拽上传，批量操作，文件处理等功能</p><p>如何操作：<a href="https://www.jianshu.com/p/44d818f781a7" target="_blank" rel="noopener">https://www.jianshu.com/p/44d818f781a7</a></p></blockquote><p>还可以利用在线「极简图床」工具，默认使用的为公共图床 sm.ms，但是也可以自定义的，自定义图床为七牛云图床，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在最前面有关七牛云的注册等等操作，前面已经讲了，不絮叨了，之后：</span><br><span class="line"></span><br><span class="line">1. 在“个人面板”-&gt;“密钥管理”中查看 AccessKey/SecretKey；</span><br><span class="line">2. 在储存空间的“空间概览”里，记住这里的“测试域名”；</span><br><span class="line">3. 在「极简图床」上配置上刚才七牛储存的“空间名称”、“AccessKey”、“SecretKey”、“域名”后，保存。然后就可以上传到自己专属的七牛空间上了。</span><br><span class="line"></span><br><span class="line">“AccessKey”、“SecretKey”：在“个人面板”-&gt;“密钥管理”中查看AccessKey/SecretKey；</span><br><span class="line"></span><br><span class="line">“域名”：在储存空间的“空间概览”里可以看到。</span><br></pre></td></tr></table></figure><h2 id="3-使用-dropzone-上传：方便"><a href="#3-使用-dropzone-上传：方便" class="headerlink" title="3. 使用 dropzone 上传：方便"></a>3. 使用 dropzone 上传：方便</h2><p>参考文章：</p><ul><li><a href="http://yansu.org/2015/01/10/use-dropzone-and-qiniu-to-store-blog-images.html" target="_blank" rel="noopener">使用Dropzone和七牛云存储来优化博客图床</a></li><li><a href="http://azeril.me/blog/How-To-Use-Image-Hosting-Quickly.html" target="_blank" rel="noopener">Mac OS 图床运用优化模式 - Microdust</a></li></ul><h2 id="4-使用命令行上传"><a href="#4-使用命令行上传" class="headerlink" title="4. 使用命令行上传"></a>4. 使用命令行上传</h2><p><strong>(1) qshell</strong></p><p>使命命令行方式，可以不用手动上传文件到七牛，它会自动帮你将本地目录的文件同步到七牛之前设定的存储空间下。</p><p>详细教程，参考「参考资料」②文章的方法三，但是参考资料②中所说的 qrsync  已经失效，现在使用的 qshell 命令行，操作方式其实类似。</p><p>先引用官方的 qshell 介绍：qshell 是利用七牛文档上公开的 API 实现的一个方便开发者测试和使用七牛 API 服务的命令行工具。该工具设计和开发的主要目的就是帮助开发者快速解决问题。目前该工具融合了七牛存储，CDN，以及其他的一些七牛服务中经常使用到的方法对应的便捷命令，比如 b64decode，就是用来解码七牛的 URL 安全的 Base 编码用的，所以这是一个面向开发者的工具，任何新的被认为适合加到该工具中的命令需求，都可以在 <a href="https://github.com/qiniu/qshell/issues" target="_blank" rel="noopener">ISSUE列表</a> 里面提出来，我们会尽快评估实现，以帮助大家更好地使用七牛服务。</p><p>配置教程：<a href="https://developer.qiniu.com/kodo/tools/1302/qshell" target="_blank" rel="noopener">官方文档</a> | <a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">官方GitHub</a>，同时官方也有视频教程：<a href="https://developer.qiniu.com/kodo/kb/3858/video-of-how-to-use-qrs-tools" target="_blank" rel="noopener">视频教程–命令行工具使用</a>。</p><p><strong>(2) hexo-qinqiu-sync</strong>  </p><p><del>网上看到有通过命令安装 <code>hexo-qiniu-sync</code> 插件的方式：<a href="http://skyhacks.org/2017/08/02/UseQiniudnToStorePic/、" target="_blank" rel="noopener">http://skyhacks.org/2017/08/02/UseQiniudnToStorePic/、</a> <a href="https://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/" target="_blank" rel="noopener">https://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/</a></del></p><p>GitHub 上也有教程：<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">gyk001/hexo-qiniu-sync</a></p><h2 id="5-图片优化"><a href="#5-图片优化" class="headerlink" title="5. 图片优化"></a>5. 图片优化</h2><p>图片搜身、水印处理、自动旋正解决照片莫名其妙发生旋转：<a href="http://masikkk.com/article/hexo-19-qiniu-cloud/" target="_blank" rel="noopener">Hexo博客(19)使用七牛云图床 | masikkk</a></p><h1 id="三、图片上传方案选择"><a href="#三、图片上传方案选择" class="headerlink" title="三、图片上传方案选择"></a>三、图片上传方案选择</h1><p>由于笔者用的 Windows，并且目前对图片上传的要求不大，只要能保证方便上传图片就行，目前有考虑以下几种方式。</p><ol><li><p>第一种：使用本文一开始提到的谷歌搜索出来的那些在线图床进行上传就是，比如 <a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，不过可能会有某些限制，比如「小贱贱图床 」每日上传图片限制数：20张。</p></li><li><p>第二种：使用本文提到 Chrome 浏览器插件 <del><a href="https://chrome.google.com/webstore/detail/qiniu-upload-files/emmfkgdgapbjphdolealbojmcmnphdcc" target="_blank" rel="noopener">qiniu upload files</a> 插件</del>，填写空间名称、AK、SK、域名等设置即可从电脑拖拽图片至浏览器即可完成上传，得到外链地址。</p></li><li><p>第三种：使用本文提到的 <del><a href="https://jiantuku.com/#/" target="_blank" rel="noopener">极简图床</a></del>，设置七牛云为图床，填写空间名称、AK、SK、域名、样式，上传图片即可得到外链地址。PS：其中，样式为可选设置，其作用是 <a href="https://shimo.im/docs/IUQsi7cDPOwL9aZc" target="_blank" rel="noopener">通过添加七牛样式后缀，实现水印、缩略图功能，查看使用说明</a></p></li><li><p>第四种：使用上传工具 <a href="http://mpic.lzhaofu.cn/" target="_blank" rel="noopener">MPic</a> 。操作步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 打开文件，启动程序请点击 MPic.exe，为方便启用可点击右键发送到‘桌面快捷方式’。</span><br><span class="line">2. 使用前先设置七牛云存储账号，即输入七牛云空间名、AK、SK、域名，保存；</span><br><span class="line">3. 然后就可以直接拖拽图片至客户端就能上传。</span><br><span class="line"></span><br><span class="line">说明：下载的文件中包含的 CSkin.dll 文件，它是程序的核心文件，请与 MPic.exe 文件保持在同一目录中；需要查看历史上传记录请点击“我的上传”即可查看。</span><br></pre></td></tr></table></figure></li><li><p>第五种：①使用官网 <a href="https://developer.qiniu.com/sdk#official-tool" target="_blank" rel="noopener">开发者工具页面</a> 的「QSunSync」同步上传 Windows 客户端，亲测了下，没有成功，还不知道哪的问题；②或者使用官网的开发者工具页面的 qshell 工具（基于七牛 API 服务的命令行工具），教程都在官网。</p></li></ol><p>考虑到可以绑定七牛云，我最后考虑的是第二、第三、第四种方式（这几种方式都可以绑定七牛云为图床），也都差不多，都可以选择。当然若只是偶尔上传图片而已，可以考虑公共图床，如使用 <a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>  也 Ok。</p><p>参考：</p><ul><li>利用「极简图床」网站页面上传图片至七牛云存储：<a href="http://blog.csdn.net/itvincent/article/details/54292591" target="_blank" rel="noopener">使用七牛云存储markdown用的图片</a></li><li>这篇文章关于把七牛云作为图床的教程写的很详细、全面：<a href="http://www.cnfeat.com/blog/2015/11/30/cli-qiniu/" target="_blank" rel="noopener">如何使用七牛云做为图床？</a></li><li><a href="https://justin94lee.github.io/2016-11-02/Use-Qinyin-As-Image-Host.html" target="_blank" rel="noopener">使用七牛云作为博客的图床</a></li></ul><h1 id="四、目前使用的方法-荐"><a href="#四、目前使用的方法-荐" class="headerlink" title="四、目前使用的方法  [荐]"></a>四、目前使用的方法  [荐]</h1><h2 id="1-腾讯云-COS"><a href="#1-腾讯云-COS" class="headerlink" title="1. 腾讯云 COS"></a>1. 腾讯云 COS</h2><p>一开始我使用的是七牛云，但七牛云后来改了规则，测试域名使用 30 天需要绑定自己备案的域名才能继续使用，我觉得麻烦，后来知道腾讯 COS 有免费存储，于是干脆选择了腾讯 COS 做图床。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190201174237.png" alt></p><p>当时看官方说明，腾讯云 COS 有 50G 的永久免费存储空间，不过截止到现在 2019-02-01 登陆了官网查看，才发现了 2019-01-25 腾讯云对象存储 COS 免费额度已经发生了变更，变成了这样：</p><table><thead><tr><th>用户类型</th><th>免费额度</th><th>有效期</th></tr></thead><tbody><tr><td>个人用户</td><td>50GB标准存储容量</td><td>6个月</td></tr><tr><td>企业用户</td><td>1TB标准存储容量</td><td>6个月</td></tr></tbody></table><p>个人用户免费额度有效时间 6 个月。不过发现站内信给我的通知，我未受此次变更影响，也就是说我还是能享受 50G 的永久免费存储空间，突然有种「早就是优势」的赶脚。</p><h2 id="2-上传工具-PicGo"><a href="#2-上传工具-PicGo" class="headerlink" title="2. 上传工具 PicGo"></a>2. 上传工具 PicGo</h2><p>使用 PicGo 工具，配置自定义的快捷键，上传图片简直不能太方便了，墙裂推荐。</p><p>GitHub 地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Molunerfinn/PicGo</a>，如何使用 PicGo 可以参考该文：<a href="https://sspai.com/post/42310" target="_blank" rel="noopener">PicGo：基于 Electron 的图片上传工具 - 少数派</a>。该工具支持微博图床、七牛图床、腾讯云 COS、GitHub 等等。</p><p>使用 PicGo 上传图片到腾讯云 COS，参考：<a href="https://sspai.com/post/44495" target="_blank" rel="noopener">图床上传工具PicGo v1.5更新：支持腾讯云COSv5版本、支持GitHub图床、支持上传前重命名文件等等 - 少数派</a></p><p>另外 PicGo 还支持微博图床、阿里云OSS、又拍云等作为图床，甚至 GitHub 图床。如果不嫌图片加载速度可能不那么快，可以考虑一下 GitHub 作为图床，记得我在哪里看到过，GitHub 单个仓库存储容量可以达到 1000G，所以放心用吧，我觉得也考虑把这个作为文件备份的地方。</p><p>具体如何配置参考：<a href="https://sspai.com/post/44495" target="_blank" rel="noopener">传送门</a>。我有实际操作了一遍，有几点要说的：</p><ol><li><p>在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 中生成的 token，记得复制以下存放在其他地方留着备用，因为这个 token 只会显示一次；</p></li><li><p>PicGo 设置中，域名为空即可，另外，如果需要把图片存放在图床仓库 img 文件夹，则先第一步，在仓库新建 img 文件夹（如何在 GitHub 仓库新建文件夹相信你有办法的），然后在 PicGo 的存储路径指定为 <code>img/</code> 即可，这样得到的地址如下格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/strivebo/backup/master/img/20190218004624.png</span><br></pre></td></tr></table></figure></li><li><p>使用 GitHub 作为图床，图床仓库不要去设置为私有，如果设置为了私有仓库，在其他人浏览器不会显示；</p></li></ol><hr><p><em>update：2019-07-21</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用七牛云作为图床获取外链方式总结。注：已更换为使用 腾讯云 COS 做图床，上传工具使用的 PicGo。
    
    </summary>
    
      <category term="Blog" scheme="http://yoursite.com/categories/Blog/"/>
    
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="PicGo" scheme="http://yoursite.com/tags/PicGo/"/>
    
      <category term="腾讯云" scheme="http://yoursite.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub 学习1：Git学习(不断更新)</title>
    <link href="http://yoursite.com/2019/02/12/Git&amp;GitHub%20%E5%AD%A6%E4%B9%A01%EF%BC%9AGit%E5%AD%A6%E4%B9%A0(%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0)/"/>
    <id>http://yoursite.com/2019/02/12/Git&amp;GitHub 学习1：Git学习(不断更新)/</id>
    <published>2019-02-12T13:08:54.000Z</published>
    <updated>2019-09-20T10:45:01.470Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名程序员如果你还不知道 Git 和 GitHub，说不过去吧，赶紧来学习一波。<a id="more"></a></p><h1 id="一、认识-Git-和-GitHub"><a href="#一、认识-Git-和-GitHub" class="headerlink" title="一、认识 Git 和 GitHub"></a>一、认识 Git 和 GitHub</h1><p>Git 是个版本控制系统，说明白点就是进行代码的各种管理，比如你写错代码进行回滚、追寻 BUG 是哪个家伙造成的、合并别人代码等等，从而达到协同进行软件开发工作。</p><p>这里要提下：版本管理控制系统分为「集中式版本控制系统」和「分布式版本控制系统」，很多人可能用过 SVN，就是属于集中式版本控制系统，而 Git 属于分布式版本控制系统。关于两者区别自行搜索资料了解下。当然学习起来，Git 相对更难上手些。</p><p>如果说准备学习 Git，我觉得结合 GitHub 来学习是很好的。说到这，或许还有人不知道 GitHub 是什么，没关系，我来解释下，简单讲就是一个开源社区网站（也被大家叫为「同性恋社区」，因为活跃着基本都是程序员呀，而这个群体基本又都是 ♂ 捂脸.jpg）。</p><p>GitHub 汇集了全球非常多的程序大牛，包括 Linux 之父  Linus（这是他的 <a href="https://github.com/torvalds" target="_blank" rel="noopener">GitHub地址</a>），并且 Linux 系统的代码也是公开存放在这个网站（地址：<a href="https://github.com/torvalds/linux" target="_blank" rel="noopener">https://github.com/torvalds/linux</a>），任何人都可以查看整个源代码。对于这样一个社区网站，如果只是人人可以把代码开源在上面以让其他人可以阅读并学习这样的功能，这未免太单一了。实际，GitHub 网站有很多「好玩的」，包括允许用户追踪其他用户、组织、软件库的动态，对软件代码提出问题，发表评论等。</p><p>社群功能再多，但最重要的还是版本控制，比如 A 同学开源了某个项目代码，B、C 等同学可以先 fork A 的代码到自己的账户，再 clone，即下载下来进行阅读、修改。等修改了好代码，可以发起 Pull Request 提交 A，A 最后若是觉得代码写的没任何问题，可以同意 Pull Request 并进行代码合并。这样通过多人努力，这个项目代码将会越来越好。</p><p>但整个过程必定离不开 Git 操作。虽然可以选择 Git GUI 客户端软件使用，但我还是强烈建议一开始先学 Git 命令操作。学习 Git 命令操作能更好达到对 Git 的深层理解，之后可以考虑使用 Git GUI。</p><p>这里补充下，对于如何为别人的开源的项目贡献代码？假设你是 B 同学，其大致流程如下：</p><ol><li>先点击 A 同学的项目仓库站点的 fork 的按钮，这样的你的 GitHub 账户下也会有一个相同的仓库；</li><li>然后把这个 fork 过来的仓库代码 Clone 到本地，然后你就开始对该项目代码进行修改了，觉得修改 OK 了，就可以 push 到你远程仓库(即你 GitHub 账户下 fork 来的那个仓库)，最后通过内建的“pull request”机制向项目负责人申请代码合并；</li><li>A 要是觉得你修改的代码没啥问题，就可以同意 pull request 了，同意之后，你的代码就合并到该项目了。这样你就是该项目的贡献者之一了。</li></ol><p>说到这，估计还是会存在部分人对 GitHub 觉得很陌生。这里摘入网上一些文章和资料先了解和学习下吧：</p><p>系列文章： <a href="https://blog.csdn.net/googdev/article/details/52787516" target="_blank" rel="noopener">从0开始学习 GitHub 系列 - stormzhang</a>，推荐看完该系列文章。</p><p>如何创建项目：</p><ul><li><a href="http://blog.csdn.net/chaishen10000/article/details/52444384" target="_blank" rel="noopener">史上最全github使用方法：github入门到精通之一</a></li><li><a href="http://blog.csdn.net/jiao_zg/article/details/56496099" target="_blank" rel="noopener">【编程初学者】创建自己的开源项目1-创建远程代码仓库</a></li></ul><p>关于 GitHub 网站：</p><ul><li><a href="https://www.jianshu.com/p/6c366b53ea41" target="_blank" rel="noopener">如何用好 github 中的 watch、star、fork</a></li><li><a href="http://www.cnblogs.com/allzy/p/5068214.html" target="_blank" rel="noopener">Github上如何取消fork别人的repository </a></li><li><a href="https://lpd-ios.github.io/2017/07/11/GitHub-Wiki-Introduction/" target="_blank" rel="noopener">GitHub Wiki 页面的添加和设置</a></li><li>……</li></ul><h1 id="二、Git-命令"><a href="#二、Git-命令" class="headerlink" title="二、Git 命令"></a>二、Git 命令</h1><h2 id="2-1-认识-Git"><a href="#2-1-认识-Git" class="headerlink" title="2.1 认识 Git"></a>2.1 认识 Git</h2><p>简单讲讲我的认识：首先 Git 属于「分布式版本控制系统」，先要好好理解这个分布式与集中式的不同。</p><p>集中式的如 SVN，是有一台中央服务器（其实就是某台电脑安装了 SVN 软件），所有开发人员从自己电脑（比如 Eclipse 下安装 SVN 插件）检出项目代码，任何一人修改了代码就可以提交至中央服务器，然后其他人检出（即更新、合并了代码），这样反复重复的过程，其中包括冲突的解决等，这所有的代码操作都记录在中央服务器 SVN 中的。从中可以看出这台中央服务器的作用和重要性吧，说一个很明显的问题：万一中央服务器宕机了，你就不能提交，也不能更新代码了。</p><p>分布式的如 Git，是每个人本地维护一个版本控制管理信息，那怎么做到的呢？首先你本地需要安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> ，这个软件安装完毕，新建目录并在该目录下执行 <code>git init</code> 就会有一个 <code>.git</code> 隐藏文件夹及内容，这个文件夹下内容维护着该目录下的项目代码情况。但怎么就分布式呢？——大概是这样的，GitHub （其实就可以理解为某台电脑/服务器）上有别人提交上去的项目代码，然后你 Clone （克隆/下载）来，你本地这份项目代码就包含 <code>.git</code> 文件夹，里面就有这个项目代码的所有的版本信息，类似的，其他任何人也可以同样 Clone 下来，也是有这样一份这个项目代码的所有的版本信息，然后你们都可以基于自己 Clone 下来的项目代码进行代码的修改了，本地会记录你的修改、提交、回滚等等代码操作信息，就算 GitHub 网站挂了也没事，你们<strong>本地都有保持着这个项目代码的所有版本控制信息。</strong> 大概意思大家再体会下。</p><p>然后这里可以涉及到很多关于 Git 的操作，还有一些概念，比如分支。我简单说下分支，以某个 Android 项目为例，比如该项目有个主分支 master 是专门用来对外发布上线的代码，但是开发过程中某个节点遇到某个 Bug 需要修复，则可以在此开发节点新建一个比如 hotfix 分支来进行代码的修复，修复好了再合并到主分支 master 上，然后可以删除掉 hotfix 分支。</p><p>可以看出 Git 命令是学习的重点，要学的深刻，最好懂得原理和本质。本文仅是个人的学习记录，我把常用的命令整理和记录在此，方便以后查找。</p><h2 id="2-2-操作本地库常用-Git-命令"><a href="#2-2-操作本地库常用-Git-命令" class="headerlink" title="2.2 操作本地库常用 Git 命令"></a>2.2 操作本地库常用 Git 命令</h2><p>1、<code>git init</code></p><p>初始化一个目录，其实初始化完毕然后本地多出了一个 <code>.git</code>的隐藏目录，这个目录管理着一个代码库的版本信息。</p><p>2、<code>git add</code></p><p>把一个文件从<code>untracked</code>（未被追踪）状态转为到 <code>staged</code>状态，直白的讲，就是把文件提交到<code>暂缓区</code>，这个时候还没真正意义上的代码提交。格式为：<code>git add .</code>提交所有改动，<code>git add hello.txt</code>提交指定文件的改动。</p><p>3、<code>git commit</code> </p><p>这步才是真正的代码提交到仓库，格式为：<code>git commit</code>或者加参数<code>git commit -m “这次的提交说明信息”</code>，前者会进入一个页面，输入 i 可以进入编辑界面，再写上这次的提交的注释说明信息（一般用来记录本次提交的主要意图），然后按 ESC 键退出编辑返回到命令模式，然后连续输入两个大写的 “Z”（用 Shift 键或 Capslock 键都可以），就保存并退出了；后者的话直接可以写上提交的注释说明信息。</p><blockquote><p>如果在提交的时候出现提示设置邮箱和用户名，是为了保证提交的准确性，在提交的时候 user.name 和 user.email 会进入日志，这些信息，是追踪代码变更的关键，比如是谁修改的。以后会随更新内容一起被永久纳入历史记录。</p><p>PS：在设置用户名的时候，可以使用任意的字符。Git 实际上是使用 email 进行关联每次提交的，只不过使用 username 作为标示符来进行显示。当你的 email 地址和 github上的 email 地址一致时，则会使用 Github 上面的 name 来进行显示。</p><p>如果工作中只涉及一个 git 服务器，用一个全局配置就可以了。</p><p><strong>全局配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global user.name &quot;strivebo&quot;</span><br><span class="line">&gt; git config --global user.email &quot;ishuzb@gmail.com&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><strong>非全局配置，某个项目下的配置：</strong>(去掉<code>--global</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config user.name &quot;strivebo&quot;</span><br><span class="line">&gt; git config user.email &quot;ishuzb@gmail.com&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><strong>可以使用命令来查看修改后的配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global user.name 或 git config user.name</span><br><span class="line">&gt; git config --global user.email 或 git config user.email</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><strong>取消全局配置：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global --unset user.name</span><br><span class="line">&gt; git config --global --unset user.email</span><br><span class="line">&gt; </span><br><span class="line">&gt; git config --global user.name    #(查看)全局配置账户是否已经移除</span><br><span class="line">&gt; git config --global user.email   #(查看)全局配置邮箱是否已经移除</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>4、<code>git reset --hard</code> </p><p>版本回退操作，比如我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下 2 种命令，第一种是：<code>git reset --hard HEAD^</code>。那么如果要回退到上上个版本只需把 <code>HEAD^</code> 改成 <code>HEAD^^</code> 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：<code>git reset --hard HEAD~100</code> 即可。</p><blockquote><p>假设： 我进行了两次修改，第一次 readme.txt 文件添加了 2222，第二次添加了 3333，我已经使用回退操作回到了第一次的修改，即现在文本内容为 2222，但我其实又想回到第二次的修改，该怎么办呢（如何恢复 3333 内容呢）？可以这样：</p><p>通过如下命令即可获取到版本号：<code>git reflog</code>，可以看到增加内容 3333 的版本号是多少比如为 6fcfc89，我们现在可以命令：<code>git reset --hard 6fcfc89</code> 来恢复了。    </p></blockquote><p>5、<code>git status</code> </p><p>查看仓库文件状态。可以加参数 -s，即<code>git status -s</code>，加个 -s 用简洁模式查看当前修改和仓库里面差别多少，可以看到有多少文件被新增了，多少被修改了，多少被删除了。</p><p>6、<code>git log</code> </p><p>查看提交历史记录，即版本历史信息，比如谁提交的，什么时间啊。</p><p>7、<code>git diff</code></p><p>可以显示工作目录和暂存区之间的不同（不加选项参数）。换句话说，这条指令可以让你看到「如果你现在把所有文件都 add，你会向暂存区中增加哪些内容」。比如<code>git diff develop</code>，查看当前版本和 develop 分支的差异。 </p><p>8、<code>git diff –cached</code> </p><p>查看已经暂存起来的文件和上次提交的版本之间的差异。<code>git diff –cached filename</code> 查看已经暂存起来的某个文件和上次提交的版本之间的差异。</p><p>9、<code>git diff --staged</code> </p><p>使用 <code>git diff --staged</code> 可以显示暂存区和上一条提交之间的不同。换句话说，这条指令可以让你看到「如果你立即输入 git commit，你将会提交什么」。</p><p>10、<code>git branch</code> </p><p>查看有哪些分支，并且能看到当前处于哪个分支上。注：初始化仓库后默认有 master 这个主分支，一般情况下不会轻易在该主分支操作。新建分支可以使用<code>git branch &lt;newBranch&gt;</code>格式，如 <code>git branch dev</code>新建分支 dev，其内容和和主分支一模一样。</p><p>11、<code>git branch -a</code>：查看本地和远程所有分支</p><p>12、<code>git branch -r</code>：查看远程所有分支</p><p>13、<code>git branch -v</code>：查看远程分支详细信息</p><p>14、<code>git checkout a</code>： 切换到 a 分支。</p><p>15、<code>git checkout -b a</code>： </p><p>有人就说了，我要先新建再切换，未免有点麻烦，有没有一步到位的，有的：<code>git checkout -b a</code> 表示新建分支 a 并同时切换到分支 a。</p><p>16、<code>git merge</code>： </p><p>合并分支代码，比如合并 dev 分代码，需要先切换到 master 分支，再<code>git merge dev</code>即可合并 dev 分支代码。</p><p>17、<code>git merge -- about</code> </p><p>会尝试恢复到你运行合并前的状态。 但当运行命令前，在工作目录中有未储藏、未提交的修改时它不能完美处理，除此之外它都工作地很好。由于现在 Git 仓库处于冲突待解决的中间状态，所以如果你最终决定放弃这次 merge，也需要执行一次 merge –abort 来手动取消它。输入这行代码，你的 Git 仓库就会回到 merge 前的状态。</p><p>18、<code>git branch -d</code> </p><p>删除分支。 假如这个分支新建错了，或者a分支的代码已经顺利合并到 master 分支来了，那么 a 分支没用了，需要删除，这个时候执行 <code>git branch -d a</code> 就可以把a分支删除了。</p><p>19、<code>git branch -D</code>：</p><p>强制删除。有些时候可能会删除失败，比如如果 a 分支的代码还没有合并到 master，你执行 <code>git branch -d a</code> 是删除不了的，它会智能的提示你 a 分支还有未合并的代码，但是如果你非要删除，那就执行 <code>git branch -D a</code> 就可以<strong>强制删除</strong> a 分支。</p><p>20、<code>git tag</code></p><p>新建标签。我们在客户端开发的时候经常有版本的概念，比如 v1.0、v1.1 之类的，不同的版本肯定对应不同的代码，所以我一般要给我们的代码加上标签（即把某次提交标记为某个 tags，如 v1.0），这样假设 v1.1 版本出了一个新 bug，但是又不晓得 v1.0 是不是有这个 bug，有了标签就可以顺利切换到 v1.0 的代码，重新打个包测试了。所以如果想要新建一个标签很简单，比如 <code>git tag v1.0</code> 就代表我在当前代码状态下新建了一个 v1.0 的标签，输入 git tag 可以查看历史 tag 记录。 想要切换到某个 tag，执行：<code>git checkout v1.0</code>，就可以切换到 v1.0 的代码状态。</p><p>21、<code>git branch -vv</code></p><p>查看本地分支关联（跟踪）的远程分支之间的对应关系，本地分支对应哪个远程分支。</p><p>22、<code>git push origin v0.1.2</code></p><p>表示将 v0.1.2 标签提交到 Git 服务器（通常的 <code>git push</code> 不会将标签对象提交到 Git 服务器，我们需要进行该显式操作）。如果将本地所有标签一次性提交到 Git 服务器，可以 <code>git push origin –tags</code>。</p><p>22、合并多次 commit，参考如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~4  #可以看到最近 4 次的 commits，然后修改 commit 前面的为 squash，改完后保存，后继也会出现可以填写该次的 message</span><br><span class="line">git add .</span><br><span class="line">git rebase --continue </span><br><span class="line">git push -f #  -f 强制推送到远程服务器</span><br></pre></td></tr></table></figure><h2 id="2-3-操作远程库相关-Git-命令"><a href="#2-3-操作远程库相关-Git-命令" class="headerlink" title="2.3 操作远程库相关 Git 命令"></a>2.3 操作远程库相关 Git 命令</h2><p>1、<code>git clone</code> </p><p>远程 clone 即复制/克隆一个完整的 repository (仓库，即项目代码)到本地，克隆仓库时所使用的远程主机自动被 Git 命名为 <code>origin</code>，如果想用其他的主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。格式为：<code>git clone -o jQuery https://github.com/jquery/jquery.git</code>，然后<code>git remote</code>命令查看，可以看到名字为远程主机名 jQuery。</p><blockquote><p>这里要特别说下，这里克隆可以有两种方式，一种 https 方式，一种 ssh 。</p><p>①如果是 https 方式，复制仓库 https 地址进行 clone 操作，如：<code>git clone https://github.com/strivebo/git-practice.git</code></p><p>这样克隆下来的项目仓库，注意观察<code>.git</code>文件夹下的<code>config</code>中的文件 url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [remote &quot;origin&quot;]</span><br><span class="line">&gt; url = https://github.com/strivebo/git-practice.git</span><br><span class="line">&gt; fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">&gt; [branch &quot;master&quot;]</span><br><span class="line">&gt; remote = origin</span><br><span class="line">&gt; merge = refs/heads/master</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>②如果是 ssh 方式，复制仓库的 ssh 地址进行 clone 操作，如：<code>git clone git@github.com:strivebo/git-practice.git</code></p><p>这样克隆下来的项目仓库，注意观察<code>.git</code>文件夹下的<code>config</code>中的文件 url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [remote &quot;origin&quot;]</span><br><span class="line">&gt; url = git@github.com:strivebo/git-practice.git</span><br><span class="line">&gt; fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">&gt; [branch &quot;master&quot;]</span><br><span class="line">&gt; remote = origin</span><br><span class="line">&gt; merge = refs/heads/master</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><strong>注1：</strong> 可以看到，https 方式下 url 为 「https 地址」，ssh 方式下 url 为「ssh 地址」（我就这么任性表达了，反正意思明白就行），所以假设你采用的 https 方式 clone 下来的项目可以通过修改这个 url 为「ssh 地址」，这样本地仓库就相当于是使用了 「ssh 方式 clone 下来的」。</p><p><strong>注2：</strong>两者的区别有，若采用的 https 方式，则每次提交代码至 GitHub 时，都要求输入 GitHub 账号和密码才能提交，若 ssh 方式，则不需要每次的输入。但当然这前提是你已经添加 ssh 。</p><p>关于 SSH 协议的历史，可以看看这篇文章：<a href="http://www.cnblogs.com/ifantastic/p/3984544.html" target="_blank" rel="noopener">SSH 协议（Secure Shell 协议）</a>。 </p><p>这里引用我看到的网上资料关于 https 和 SSH 的区别说下：</p><ol><li>前者可以随意克隆 github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</li><li>https url 在 push 的时候是需要验证用户名和密码的；而 SSH 在 push 的时候，是不需要输入用户名的，如果配置 SSH key 的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</li></ol><p><strong>关于如何添加 ssh 下面是步骤：</strong> </p><ol><li><p>Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash（即安装了 Git 就有这个） 应该也是带了 SSH 的，在终端输入<code>ssh</code>命令可以查看是否安装了 ssh；</p></li><li><p>紧接着输入 <code>ssh-keygen -t rsa</code> 或者<code>ssh-keygen -t rsa -C &quot;注释&quot;</code>格式 ，就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码）然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成： Linux/Mac 系统 在 <code>~/.ssh</code> 下，win系统在 <code>/c/Documents and Settings/username/.ssh</code> 下， 都是隐藏目录，大家应该能找到的；</p><p><strong>注：</strong> 其实在连续安回车键中会提示输入一个密码以及确认密码，这个密码会在你提交项目时使用，如果为<code>空</code>的话（即直接按回车键，也即未设置密码）提交项目代码时则不用输入密码；</p></li><li><p>接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上（PS：如何添加自行网上搜下，就不多说了），这样你本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，授权成功，这样就可以不用像 https 方式每次输入账号和密码进行验证身份才能提交了。（你就理解为，SSH 就好比进行了身份验证的这种理解。）</p></li><li><p>SSH key 添加成功之后，输入 <code>ssh -T git@github.com</code> 进行测试，如果出现以下提示，再输入 yes 出现如下图则证明添加成功了。（图我就不截了，我觉得问题应该不大）</p></li></ol><p>补充：对于命令 <code>ssh-keygen</code>添加不同参数的含义—— <a href="http://blog.csdn.net/u011686226/article/details/52412393" target="_blank" rel="noopener"> ssh-keygen参数说明</a>。</p></blockquote><p>2、<code>git remote</code> </p><p>列出所有的远程仓库。从别处 clone 来的，默认都会有一个别名”origin”的仓库。带上 -v 可以看到具体 URL。</p><p>3、<code>git remote add</code> </p><p>添加远程仓库地址。其实这些操作都是在本地，并没有实际牵涉到远程。另外 github 里面fork 过来的，默认叫”upstream”。该命令完整格式为：<code>git remote add &lt;主机名&gt; &lt;网址&gt;</code>，如<code>git remote add orgin git@github.com:strivebo/git-practice.git</code></p><p>4、<code>git remote rw</code></p><p>删除远程仓库地址。格式为：<code>git remote rm &lt;主机名&gt;</code>。</p><p>5、<code>git remote rename</code>： </p><p>用于远程主机的改名。完整格式为：<strong><code>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</code></strong> 。</p><p>6、<code>git fetch</code></p><p>一旦远程主机的版本库有了更新（Git 术语叫做 commit），需要将这些更新取回本地，这时就要用到<code>git fetch</code>命令。格式为：<code>git fetch &lt;远程主机名&gt;</code>，默认情况下，<code>git fetch</code>取回所有分支（branch）的更新。</p><ul><li>如果只想取回特定分支的更新，可以指定分支名，格式为：<strong><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code></strong>， 另外，所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取，比如<code>origin</code>主机的<code>master</code>，就要用<code>origin/master</code>读取。</li><li>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支，<code>git checkout -b newBrach origin/master</code>，该命令表示，在<code>origin/master</code>的基础上，创建一个新分支。此外，也可以使用<code>git merge</code>命令或者<code>git rebase</code>命令，在本地分支上合并远程分支。</li></ul><p>7、<code>git pull</code></p><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。相当于 fetch后，再进行 merge。其完整格式为：<strong><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></strong>，如取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，可以这样写：<code>git pull origin next:master</code></p><ul><li>如果远程分支是与当前分支合并，则冒号后面的部分可以省略，即<code>git pull origin next</code>，该命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code></li></ul><p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，<strong>在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</strong> Git也允许手动建立追踪关系。</p><ul><li><p><code>git branch --set-upstream master origin/next</code>该命令指定<code>master</code>分支追踪<code>origin/next</code>分支</p></li><li><p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。<code>git pull origin</code>该命令表示，本地的当前分支自动与对应的<code>origin</code>主机”追踪分支”（remote-tracking branch）进行合并</p></li><li><p>如果当前分支只有一个追踪分支，连远程主机名都可以省略，<code>git pull</code>该命令表示，当前分支自动与唯一一个追踪分支进行合并</p></li><li><p>合并需要采用rebase模式，可以使用<code>--rebase</code>选项。<code>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p></li><li><p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。<code>git pull -p</code> 该命令等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --prune origin </span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure></li></ul><p>8、<code>git push</code></p><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。其完整格式为：<strong><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></strong> </p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。<code>git push origin master</code>该命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。<code>git push origin :master</code>等同于<code>git push origin --delete master</code>该命令表示删除<code>origin</code>主机的<code>master</code>分支。</li><li>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。<code>git push origin</code>该命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</li><li>如果当前分支只有一个追踪分支，那么主机名都可以省略。<code>git push</code></li><li>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。<code>git push -u origin master</code>该命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</li></ul><p>注：不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做 simple 方式。此外，还有一种matching 方式，会推送所有有对应的远程分支的本地分支。Git 2.0 版本之前，默认采用 matching 方法，现在改为默认采用 simple 方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global push.default matching</span><br><span class="line"># 或者</span><br><span class="line">$ git config --global push.default simple</span><br></pre></td></tr></table></figure><p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --all origin</span><br></pre></td></tr></table></figure><p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p><p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin</span><br></pre></td></tr></table></figure><p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p><p>最后，<code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。<code>git push origin --tags</code>。</p><p>9、删除远程分支：<code>git push origin --delete &lt;branchName&gt;</code></p><p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：<code>git push origin :&lt;branchName&gt;</code>。</p><p>10、删除 tag：<code>git push origin --delete tag &lt;tagname&gt;</code></p><p>另外，这也是删除 tag 的方法，推送一个空 tag 到远程tag：<code>git tag -d &lt;tagname&gt;</code>、<code>git push origin :refs/tags/&lt;tagname&gt;</code>。</p><p>11、修改还未 push 的注释：<code>git commit --amend</code>，修改后保存退出。刚刚 push 到远端还没有人其他人下载或改动的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>进入修改页面修改注释信息，修改后 :wq 保存退出。 再使用<code>git push --force-with-lease origin master</code>。如果其他人已经下载或改动：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><p>来源：<a href="https://blog.csdn.net/yulsh/article/details/54613189" target="_blank" rel="noopener">git修改未push和已经push的注释信息</a></p><h2 id="2-4-参考资料"><a href="#2-4-参考资料" class="headerlink" title="2.4 参考资料"></a>2.4 参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git远程操作详解</a> - 阮一峰网络日志</li><li><a href="https://juejin.im/book/5a124b29f265da431d3c472e/section" target="_blank" rel="noopener">Git 原理详解及实用指南 - 掘金小册</a> - 抛物线。</li><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">Git–版本控制</a> - 官方文档。</li><li><a href="https://github.com/muwenzi/Program-Blog/issues/13" target="_blank" rel="noopener">Git常用操作小结</a></li><li><a href="http://blog.csdn.net/sxh951026/article/details/77200003" target="_blank" rel="noopener">Git的点点滴滴，结合了部分Android Studio自带的版本控制功能</a></li><li><a href="https://www.zybuluo.com/yangfch3/note/159758" target="_blank" rel="noopener">git 有用却易忘的知识与命令</a></li></ul><h1 id="三、实战学习"><a href="#三、实战学习" class="headerlink" title="三、实战学习"></a>三、实战学习</h1><h2 id="3-1-代码提交到-GitHub-上"><a href="#3-1-代码提交到-GitHub-上" class="headerlink" title="3.1 代码提交到 GitHub 上"></a>3.1 代码提交到 GitHub 上</h2><h3 id="1-两种克隆-Clone-方式"><a href="#1-两种克隆-Clone-方式" class="headerlink" title="1) 两种克隆 Clone 方式"></a>1) 两种克隆 Clone 方式</h3><p>1、采用 HTTPS 方式克隆 GitHub 上仓库(项目)：<code>git clone https://github.com/strivebo/git-practice.git</code></p><p>2、采用 SSH 方式克隆：<code>git clone git@github.com:strivebo/git-practice.git</code></p><ul><li>如果想要在克隆至本地时指定别的目录名称，可以在后面加个参数，如：<code>git clone https://github.com/strivebo/git-practice.git git-practice-another</code>，手动指定本地仓库的根目录名称为 git-practice-another。</li></ul><p>提下，GitHub 中的 SSH 和 HTTPS 提交区别：<a href="http://blog.csdn.net/itzhongzi/article/details/62250419" target="_blank" rel="noopener">github中ssh和https提交的区别</a>  | <a href="http://www.cnblogs.com/softidea/p/5448118.html" target="_blank" rel="noopener">git使用ssh密钥和https两种认证方式汇总（转） </a>。</p><p>解释下：从 GitHub 上 Clone 一个项目到本地的时候，有 use https 和 use ssh 两种方式，这两种主要是在 push 项到 GitHub 上时有所不同。完成一个 push 操作，需要对其内容进行安全管理，这里提供了 ssh 和 https 两种方式。而在 Clone 项目到本地时，做出选择后，就已经决定了 push 的方式。</p><p>SSH 使用了 RSA，即非对称加密的方式，存在一个公钥和私钥。可以生成一个本地的一组秘钥，然后将公钥复制到 GitHub 的 settings/profile 下。使用 https 方式，每次需要验证用户身份信息。</p><h3 id="2-采用-https-方式克隆"><a href="#2-采用-https-方式克隆" class="headerlink" title="2) 采用 https 方式克隆"></a>2) 采用 https 方式克隆</h3><p>在使用 <code>git status</code> 命令查看仓库状态若是看到： <code>your branch is ahead of &#39;origin/master&#39; by 2 commits.</code> ，解释下：</p><ol><li>Git 提示你的当前 branch 已经领先于（ “ahead of” ）’origin/master’ 两个提交了</li><li>origin/master 的中的 origin 是远端仓库的名称，是你在用 Clone 指令初始化本地仓库时 Git 自动帮你起的默认名称；master 是 origin 上的分支名称。</li></ol><p>可以暂时把 origin/master 简单理解为「中央仓库」，也就是说，这句话是告诉你，你的本地仓库已经领先中央仓库两个提交了。然后可以使用 <code>git push</code> 提交发布至中央服务器（这里即指 GitHub）。</p><p>因为采用的是 https 方式克隆，所以在这个过程 GitHub 会向你索要账户和密码。填入正确的账户和密码，push 操作就完成了。这时你再去你的 GitHub 仓库页面可以看到提交记录。说明你已经成功把本地仓库的提交推送到了服务器了。</p><p>PS：如果觉得一遍遍地输入密码很烦，可以按照 <a href="https://help.github.com/articles/caching-your-github-password-in-git/" target="_blank" rel="noopener">这个页面</a> 提供的方案来把密码保存起来。另外还有一个更简单但安全性低一些的方案。执行这行代码：<code>git config credential.helper store</code>，在这之后你只需要再输入一次密码， Git 就会把你的密码保存下来，这之后就再也不用输入了。说它「安全性低」，是因为这条指令会让 Git 把你的密码以明文形式保存在你的电脑上。具体这两种保存密码的方案选择哪个，看你自己了。</p><p>总结下：</p><ol><li>从 GitHub 把中央仓库 Clone 到本地把写完的代码提交。即先使用命令：<code>git clone</code>，再用 <code>git add 文件名</code> 把文件添加到暂存区，再用 <code>git commit</code> 提交；</li><li>在这个过程中，可以使用 <code>git status</code> 来随时查看工作目录的状态。每个文件有 “changed / unstaged”（已修改）, “staged”（已修改并暂存）, “commited”（已提交） 三种状态，以及一种特殊状态 “untracked”（未跟踪）；</li><li>提交一次或多次之后，把本地提交 push 到中央仓库（命令：<code>git push</code>）。</li></ol><h3 id="3-采用-ssh-方式克隆"><a href="#3-采用-ssh-方式克隆" class="headerlink" title="3) 采用 ssh 方式克隆"></a>3) 采用 ssh 方式克隆</h3><p>在拥有了一个 GitHub 账号之后，就可以自由的 Clone 或者下载其他项目，也可以创建自己的项目，但是你没法提交代码。仔细想想也知道，肯定不可能随意就能提交代码的，如果随意可以提交代码，那么 GitHub 上的项目岂不乱了套了，所以提交代码之前一定是需要某种授权的，而 GitHub 上一般都是基于 SSH 授权的。那么什么是 SSH 呢？ 简单点说，SSH 是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。</p><p>添加 SSH 步骤：</p><ol><li>Git Bash下输入 <code>ssh</code> 查看电脑是否安装了 ssh；</li><li>紧接着输入 <code>ssh-keygen -t rsa</code>，什么意思呢？就是指定 rsa 算法生成密钥，接着连续三个回<br> 车键（不需要输入密码） ，然后就会生成两个文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code> ，而 id_rsa 是密钥，id_rsa.pub 就是公钥。这两文件默认分别在如下目录里生成： Linux/Mac 系统 在 ~/.ssh 下，Windows 系统在 /c/Documents and Settings/username/.ssh 下， 都是隐藏文件。</li><li>接下来要做的是把 id_rsa.pub 的内容添加到 GitHub 上，这样你本地的 id_rsa 密钥跟 GitHub 上的 id_rsa.pub 公钥进行配对，授权成功才可以提交代码。</li><li>SSH key 添加成功之后，输入 <code>ssh -T git@github.com</code> 进行测试。</li></ol><p>最后就是 push、pull 的操作了。添加 SSH key 成功之后，我们就有权限向 GitHub 上我们自己的项目提交代码了。执行：<code>git push origin master</code> 进行代码提交。</p><p><strong>实践：</strong> 假设我们本地有个 test2 的项目，我们需要的是在 GitHub 上建一个 test 的项目，然后把本地 test2 上的所有代码 commit 记录提交到 GitHub 上的 test 项目。</p><ol><li><p>第一步就是在 GitHub 上建一个 test 仓库，具体怎么操作我就不多说了吧；</p></li><li><p>第二步切换到 test2 目录，打开 Git Bash，把本地 test2 项目与 GitHub 上的 test 项目进行关联：<code>git remote add origin git@github.com:strivebo/test.git</code>；</p><p>什么意思呢？就是添加一个远程仓库，地址是 <code>git@github.com:strivebo/test.git</code>，而 origin 是给这个项目的远程仓库起的名字，是的，名字你可以随便取，只不过大家公认的只有一个远程仓库时名字就是 origin ，为什么要给远程仓库取名字？因为我们可能一个项目有多个远程仓库？比如 GitHub 一个，比如公司一个，这样的话提交到不同的远程仓库就需要指定不同的仓库名字了。</p></li></ol><p>注：查看我们当前项目有哪些远程仓库可以执行如下命令： <code>git remote -v</code>，接下来，我们本地的仓库就可以向远程仓库进行代码提交了：<code>git push origin master</code>，就是默认向 GitHub 上的 test 仓库提交了代码，而这个代码是在 master 分支，当然你可以提交到指定的分支。</p><p><strong>再次强调：</strong> Git 使用 https 协议，每次 pull，push 都要输入密码，相当的烦。使用 Git 协议，然后使用 ssh 密钥，这样可以省去每次都输密码。</p><h1 id="四、问题和笔记"><a href="#四、问题和笔记" class="headerlink" title="四、问题和笔记"></a>四、问题和笔记</h1><h2 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h2><h3 id="1-fatal-the-current-branch-master-has-no-upstream-branch"><a href="#1-fatal-the-current-branch-master-has-no-upstream-branch" class="headerlink" title="1. fatal the current branch master has no upstream branch"></a>1. fatal the current branch master has no upstream branch</h3><p>对于前面这个「假设我们本地有个 test2 的项目，我们需要的是在 GitHub 上建一个 test 的项目，然后把本地 test2 上的所有代码 commit 记录提交到 GitHub 上的 test 项目。」实践练习有出现了问题，报错是：fatal the current branch master has no upstream branch.</p><p>参考网上资料：</p><ul><li><a href="http://blog.csdn.net/qqb123456/article/details/25319659" target="_blank" rel="noopener">git：fatal the current branch master has no upstream branch</a></li><li><a href="http://www.cnblogs.com/mengdd/p/3447464.html" target="_blank" rel="noopener">在GitHub上管理项目</a></li><li><a href="http://blog.csdn.net/xhl_will/article/details/8442546" target="_blank" rel="noopener">git push 操作</a></li></ul><p>我的总结：如果没有添加 ssh，没采用 ssh 方式克隆，那采用 https 方式克隆，如：<code>git remote add origin https://github.com/strivebo/test.git</code>，然后，下面是引用的网上一个人的解决方式：</p><blockquote><p>此时如果 origin 的 master 分支上有一些本地没有的提交，push 会失败。所以解决的办法是，首先设定本地 master 的上游分支:<code>git branch --set-upstream-to=origin/master</code>，然后 pull：<code>git pull --rebase</code>，最后再 push：<code>git push</code>。</p></blockquote><h3 id="2-官网下载的-Git-与-TortoiseGit-客户端的关系？"><a href="#2-官网下载的-Git-与-TortoiseGit-客户端的关系？" class="headerlink" title="2. 官网下载的 Git 与 TortoiseGit 客户端的关系？"></a>2. 官网下载的 Git 与 TortoiseGit 客户端的关系？</h3><p>Git 自带GUI界面。使用 <code>git gui</code> 命令可以打开它。在这个界面中可以完成 commit、merge、push、pull 等等常用操作。</p><p>…….</p><p>TortoiseGit 没有集成 Git。在 <a href="http://code.google.com/p/tortoisegit/" target="_blank" rel="noopener">TortoiseGit</a> 官方网站可以下载到它。有 32bit 和 64bit 版本，同时也有中文语言包（但我不建议你安装）。安装完毕之后，如果你没有安装过 Git，那么还需要去下载 <a href="http://msysgit.github.com/" target="_blank" rel="noopener">msysGit</a> 来安装。因为 TortoiseGit 其实只是一个壳，它需要调用 Git 命令行才能发挥作用。（现在你知道我为什么推荐你用命令行了么？）</p><p>为什么 TortoiseGit 不像 TortoiseSVN 一样，把 SVN 命令行工具集成在安装包中呢？我猜想是以下几点原因：</p><ul><li>Git 官方从未出过 Windows 版本二进制包；</li><li>msysGit 和 TortoiseGit 是两个不同的团队开发的；</li><li>msysGit 和 TortoiseGit 的更新周期差异较大；</li><li>TortoiseGit 团队希望安装包更小；</li><li>TortoiseGit 团队给用户更灵活的选择 Git 版本的权利。</li></ul><p>来源：<a href="https://blog.zengrong.net/post/1722.html#" target="_blank" rel="noopener">使用Git、Git GUI和TortoiseGit</a>​</p><h3 id="3-Git-如何-Clone-非-master-分支代码"><a href="#3-Git-如何-Clone-非-master-分支代码" class="headerlink" title="3. Git 如何 Clone 非 master 分支代码"></a>3. Git 如何 Clone 非 master 分支代码</h3><p>问题描述：在从 GitHub 上 Clone 项目下来的时候，如 https 方式克隆某个具有多个分支的项目：<code>git clone https://github.com/TeamNewPipe/NewPipe.git</code>     </p><p>注：该分支默认分支为 dev 分支，其他分支有 master 、multyservice 分支。</p><p>出现的问题是：克隆完毕，使用 <code>git branch</code> 查看本地分支，只能看到 dev 分支。如果想要是查看或是说克隆非默认分支代码，如何操作呢？以下两种解决方式供参考：</p><p>①第一种：</p><p>新的解决方法：先 <code>git branch -a</code> 列出本地和远程所有分支，比如某个远程分支为 origin/daily/1.4.1，然后再直接使用 <code>git checkout origin/daily/1.4.1</code>​</p><p>旧的解决方法：1、先在本地建立与远程分支同名分支名称；2、切换到该本地分支；3、建立上游分支，即 <code>git branch --set-upstream-to=origin/daily/1.4.1 daily/1.4.1</code>，这样完成与上游分支的关联，然后 pull 就好了。</p><p>参考：<a href="https://gaohaoyang.github.io/2016/07/07/git-clone-not-master-branch/" target="_blank" rel="noopener">Git 如何 clone 非 master 分支的代码</a></p><p>②第二种：</p><p>Git 默认只显示默认分支的数据，需要手动切换到我们需要的分支并显示出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">git checkout -b &lt;本地分支名字&gt; origin/&lt;远程分支名字&gt;</span><br></pre></td></tr></table></figure><p>这样大功告成。</p><p>参考：<a href="https://www.jianshu.com/p/79cdb8d514ed" target="_blank" rel="noopener">克隆Github上项目的非Master分支</a></p><p>亲测第二种方式是可以的。</p><h3 id="4-git-pull-和-git-fetch-有什么区别？"><a href="#4-git-pull-和-git-fetch-有什么区别？" class="headerlink" title="4. git pull 和 git fetch 有什么区别？"></a>4. git pull 和 git fetch 有什么区别？</h3><p>首先，你的每一个操作都是要指明【来源】和【目标】的，而对于 pull 来说，【目标】就是当前分支；</p><p>其次，你得清楚 Git 是有 tracking 的概念的，所谓 tracking 就是把【来源】和【目标】绑定在一起，节省一些操作是需要输入的参数。</p><p>那么，假设你的 master 和 develop 都是 tracking 了的，于是：</p><ul><li>当你在 master 下，<code>git pull</code>等于 fetch origin，然后 merge origin/master</li><li>当你在 develop 下，<code>git pull</code>等于 fetch origin，然后 merge origin/develop</li></ul><p>参考：<a href="https://ruby-china.org/topics/15729" target="_blank" rel="noopener">git pull 和 git fetch 有什么区别？</a></p><h2 id="4-2-笔记"><a href="#4-2-笔记" class="headerlink" title="4.2 笔记"></a>4.2 笔记</h2><h3 id="1-在本地仓库初始化后，不进行-commit-提交，则新建不了分支；进行了commit提交，则真正建立了-master-分支"><a href="#1-在本地仓库初始化后，不进行-commit-提交，则新建不了分支；进行了commit提交，则真正建立了-master-分支" class="headerlink" title="1. 在本地仓库初始化后，不进行 commit 提交，则新建不了分支；进行了commit提交，则真正建立了 master 分支"></a>1. 在本地仓库初始化后，不进行 commit 提交，则新建不了分支；进行了commit提交，则真正建立了 master 分支</h3><p>在某些场合，Git 会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master分支自动”追踪” origin/master 分支。Git 也允许手动建立追踪关系：<code>git branch --set-upstream master origin/next</code> 该命令指定 master 分支追踪 origin/next 分支。</p><p>——<em>来自阮一峰老师的 Git 文章。</em> </p><h3 id="2-重命名本地和远程分支名称"><a href="#2-重命名本地和远程分支名称" class="headerlink" title="2. 重命名本地和远程分支名称"></a>2. 重命名本地和远程分支名称</h3><p>在 Git 中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p><ol><li>删除分支的命令是：在 Git1.7 之后可以使用这个命令 <code>git push origin --delete &lt;远程分支名称&gt;</code>，否则用这个也可以：<code>git push origin :&lt;远程分支名称&gt;</code>表示推送一个空分支到远程分支，其实就相当于删除远程分支；</li><li>重命名本地分支：<code>git branch -m &lt;旧名称&gt; &lt;新名称&gt;</code>；</li><li>重新提交：<code>git push origin &lt;新名称&gt;:&lt;新名称&gt;</code>。</li></ol><h1 id="五、Git-图形化客户端-SourceTree"><a href="#五、Git-图形化客户端-SourceTree" class="headerlink" title="五、Git 图形化客户端 SourceTree"></a>五、Git 图形化客户端 SourceTree</h1><p>SourceTree 是 Windows 和 Mac OS X 下免费的 Git 和 Hg 客户端，拥有可视化界面，容易上手操作。同时它也是 Mercurial 和 Subversion 版本控制系统工具。支持创建、提交、clone、push、pull 和 merge 等操作。</p><p>SourceTree 官方下载：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">传送门</a>。</p><p>Sourcetree 可简化 Mercurial 和 Git 存储库的交互，让我们集中精力编写代码。通过 Sourcetree 简单的 Git 图形用户界面查看和管理您的存储库。</p><ul><li>非常简单，适合初学者：告别命令行 - 通过 Git 客户端简化分发版本的控制，快速为每个人提供最新信息。</li><li>让专家如虎添翼：非常适合用于提高高级用户的工作效率。查看分支之间的变更集、stash、cherry-pick 等等。</li><li>可视化代码：眼见真的为实。单击一次即可获取有关所有分支或提交的信息。</li><li>桌面上的 Git 和 Hg：功能完善的图形用户界面，开箱即用，可提供高效、一致的开发流程。可与 Git 和 Mercurial 搭配使用。</li></ul><p>网上的教程：</p><ul><li><a href="http://blog.csdn.net/collonn/article/details/39259227" target="_blank" rel="noopener">图解GitHub和SourceTree入门教程</a></li><li><a href="http://blog.csdn.net/u012792686/article/details/63684248" target="_blank" rel="noopener">SourceTree+Git简单使用(Windows)</a></li></ul><hr><p><em>update：2019-07-21</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名程序员如果你还不知道 Git 和 GitHub，说不过去吧，赶紧来学习一波。
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>篇1：科学上网方式总结</title>
    <link href="http://yoursite.com/2019/02/12/%E7%AF%871%EF%BC%9A%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/12/篇1：科学上网方式总结/</id>
    <published>2019-02-12T12:01:08.000Z</published>
    <updated>2019-09-20T10:45:01.474Z</updated>
    
    <content type="html"><![CDATA[<p>总结下我使用过得以及我知道的 XX 上网方式。<a id="more"></a></p><h1 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h1><p>在计算机技术/程序开发学习的道路上，真的是瞎折腾了很多，浪费了很多时间，走了好多的弯路，也一直没觉悟到那些大牛、大 v 的所做作为的作用和影响，通过不断的反思和交流以及实践，我才深刻体会到那些所带来的改变和价值。</p><p>在讲该文主要内容之前，我想先列举一些关于技术人在学习道路该有的「所做所为」，这也是我有看到的很多优秀技术人都多少有所具备的，我觉得确实也是一名优秀程序员该有的必备姿势。 </p><ol><li><p>掌握 Git，熟悉 GitHub，多逛逛像 GitHub 这样的开源社区，这会为你打开一片广阔的代码世界，会见识多很多程序大牛。一般经常使用 GitHub 的人技术水平至少可以肯定不会是编程小白。</p><p>想起早前的我：那个时候，只听过 Git 和 GitHub，连什么区别都不知道，直到去年(2017年)我有慢慢了解和学习，才发现 GitHub 是广阔天地 。</p></li><li><p>把学习的内容记录下来，写博客、写公众号都可以，「好记性不如烂笔头」，真的 ，把自己所学内容再用文字表达一遍，对自己成长真的帮助很大。当然有写的好，可以总结成教程，弄份精美电子书（比如可以利用 GitBook 制作电子书），这个记录过程，不仅让自己再思考了一遍，而且写的文章可以随时拿出来翻阅复习，另外，还能锻炼写作能力。当然这里有一个点是，选择是否分享就看个人想法了；</p></li><li><p>善用谷歌搜索。遇到问题，会首先自己网上找解决办法，那么肯定会用到搜索引擎，建议多使用谷歌搜索；</p></li><li><p>掌握一些效率软件、工具以及电脑技巧，达到事半功倍效果，高效率完成事情；</p></li><li><p>多阅读和学习，这个行业技术更新太快，不汲取新鲜的知识可能要掉队了；</p></li><li><p>还有诸如学会提问，善于沟通，真诚请教，关注行业内容等等，这都是需要的，毕竟我们在学习过程必定会遇到很多问题；</p></li><li><p>当然还有，多观察观察那些优秀的人相信会有更多收获的…….</p></li></ol><p>好了，不说那么多，回到正题。本文主要是针对这些年我使用过的 FQ 方式做个总结，这项在我看来是首要掌握的一个必备姿势。</p><blockquote><p>注：不能使用的方式我已标注了删除线。</p></blockquote><h1 id="二、方式总结"><a href="#二、方式总结" class="headerlink" title="二、方式总结"></a>二、方式总结</h1><h2 id="2-1-Win7创建-VPN-连接"><a href="#2-1-Win7创建-VPN-连接" class="headerlink" title="2.1 Win7创建 VPN 连接"></a>2.1 <del>Win7创建 VPN 连接</del></h2><p>最早的时候，我不知道在哪看到的一个方式，当时有用，但现在亲测已经失效了，方法如下。</p><p>按照正常创建 VPN 连接就行，以 Win7 为例文字说明一下步骤就行</p><ol><li>打开控制面板-网络共享中心</li><li>设置新的连接或网络</li><li>连接到工作区</li><li>使用我的 Internet 连接（VPN）</li><li>键入要连接的 Internet 地址</li><li>键入你的用户名和密码</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在这里 你可以得到一个免费的VPN账号 。 </span><br><span class="line">美国IP免费VPN</span><br><span class="line">http://www.freevpnhosting.com</span><br><span class="line">http://www.bestvpnusa.com</span><br><span class="line">http://www.freehostedvpn.com/usa-free-vpn</span><br><span class="line">http://www.usipvpn.com</span><br><span class="line">http://us.hotfreevpn.com</span><br><span class="line">http://www.ufreevpn.com/usa-free-vpn</span><br><span class="line">英国IP免费VPN</span><br><span class="line">http://www.getukvpn.com</span><br><span class="line">http://www.freehostedvpn.com/uk-free-vpn</span><br><span class="line">http://uk.hotfreevpn.com</span><br><span class="line">http://www.ufreevpn.com/uk-free-vpn</span><br><span class="line">加拿大IP免费VPN</span><br><span class="line">http://www.bestcanadavpn.com </span><br><span class="line">http://www.freehostedvpn.com/canada-free-vpn</span><br><span class="line">http://ca.hotfreevpn.com</span><br><span class="line">http://www.ufreevpn.com/canada-free-vpn</span><br><span class="line">荷南的IP免费VPN</span><br><span class="line">http://www.nlfreevpn.com</span><br><span class="line">http://www.freevpn.nl</span><br><span class="line">http://www.justfreevpn.com</span><br></pre></td></tr></table></figure><p>注：我当时用的第一个，英国的 VPN：<code>www.getukvpn.com</code>，密码：<code>getukvpn</code>  </p><h2 id="2-2-修改hosts文件"><a href="#2-2-修改hosts文件" class="headerlink" title="2.2 修改hosts文件"></a>2.2 修改hosts文件</h2><p><strong>(1) 介绍 Hosts</strong> </p><p>hosts 文件是一个特殊的文件，没有扩展名，其文件所在的位置通常是 Windows 系统安装目录下。Win7 系统hosts 文件位于 <code>C:\Windows\System32\drivers\etc\hosts</code>，没有拓展名。</p><p>这个文件可以用记事本等工具打开，其作用就是将网址域名与 IP 地址对应起来，建立一个关联“数据库”，这样的话，当用户在浏览器中输入一个网址时，系统会首先从 hosts 文件中寻找对应的 IP 地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。</p><p><strong>那么，为什么修改 HOSTS 文件可以实现翻墙呢？</strong></p><p>无论你上网打的什么网站地址，实际上最终总归是要转换成一个 IP 地址才能访问的，平时这个转换工作是有网络上的 DNS 服务器来完成的。但是有些时候，某些网站，处于某些原因， 网络上的 DNS 服务器无法给出正确的或可用 IP 地址（具体原因不多说…）。</p><blockquote><p>简单来说 Hosts 文件负责将主机名映射到相应的 IP 地址。hosts 文件通常用于补充或取代网络中 DNS 的功能。和 DNS 不同的是，计算机的用户可以直接对hosts文件进行控制。</p><p>以下专业性较强，小白请绕道！为了方便用户记忆，我们将 IP 变成一个个的域名来输入到浏览器进行访问。而这使得访问网站时要先将其域名解析成 IP 。DNS (Domain Name Server) 的作用就是进行 IP 解析，把域名对应到 IP。</p><p>在 Great FireWall 的 5 种封锁方法中，有一种简单而效果很好的方法是 DNS 污染。GFW 会对 DNS 的解析过程进行干扰，这会使对某些被干扰的域名返回一个错误的 IP 地址给你的主机，使你无法正确连接到你要的服务器上读取正确的信息。</p><p>Hosts 文件本来是用来提高解析效率。在进行 DNS 请求以前，系统会先检查自己的 Hosts 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。也就是说 Hosts 的请求级别比 DNS 高。当你的 Hosts 文件里面有对应的 IP 时，它就会直接访问那个 IP，而不用通过 DNS。</p><p>所以，当我们直接将 Google、Twitter、Facebook 之类的 IP 放入 Hosts 文件后，就可以跳过 DNS 的解析这一步，直接就行 IP 访问，不受 GFW 的 DNS 污染干扰了。</p><p>——<em>From：<a href="https://weibo.com/ttarticle/p/show?id=2309403947633059219674" target="_blank" rel="noopener">为什么修改Hosts可以实现翻墙？</a></em></p></blockquote><p>补充：修改本地 hosts 能 FQ 的原因，因为不少的国外大站，比如像 YouTube，Facebook，Google 或者 Twitter在全球有<strong>多个 IP 地址</strong>，有些 IP 地址是没有被封锁的，这样就可以使用修改 hosts 直接指向可用的 IP 地址，这样就可以绕过国内防火墙。网上有不少网址都在提供可用 hosts 文件下载，唯一的缺点就是需要经常更换 hosts 文件，目前的 hosts 谷歌文件较多，但 YouTube，Facebook，Twitter 基本上没有，所以这种方法也不是一个完美的解决方法，但偶尔可以使用一下。</p><p>但是为什么 Hosts 的 IP 要时不时更改呢？因为 Hosts 文件配置的映射是静态的，如果网络上的网站的 IP 地址更改了需要及时更新 IP 地址，否则就不能访问了。</p><p>注：该 Git 项目持续更新可用的 Hosts 文件，<a href="https://github.com/racaljk/hosts" target="_blank" rel="noopener">传送门</a>。</p><p><strong>(2) 如何修改Hosts</strong> </p><p>比如谷歌网站的 IP 为：<code>172.217.6.127</code>，那么你想要 <code>www.google.com</code> 来访问，只要在 <code>C:\Windows\System32\drivers\etc\hosts</code> 该文件末尾添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">172.217</span><span class="number">.6</span><span class="number">.127</span>www.google.com</span><br></pre></td></tr></table></figure><p>即可。</p><p>如上，hosts 就是手动建立一个 IP 与域名网址间的对应关系。而修改 hosts 文件这种行为有无危险性，要看建立的对应关系来确定。</p><p>如果是可信任的 IP 对应修改，则没什么大的危险，但如果是一些恶意的，就比较危险了。比如 IP 对应的是个木马网站，那么你每次访问都会自动引导至这个站点。</p><p>顺带补充： <code>www.google.com/ncr</code> 中的”/ncr”是什么意思？</p><blockquote><p>ncr : no country redirect</p></blockquote><h2 id="2-3-免费软件和插件"><a href="#2-3-免费软件和插件" class="headerlink" title="2.3 免费软件和插件"></a>2.3 免费软件和插件</h2><p>对于一些免费的软件、工具和插件，使用过一些，下面介绍下。</p><p><strong>1、<del>自由门</del>：</strong> </p><p>自由门是世界顶级网络公司 Dynamic 开发的公益性的全自动代理软件，永久免费；自 2002 年第一版问世以来，已在全球拥有大量忠实用户；FQ 能力极强，可以让你畅游 Facebook、YouTube、Twitter 等被封网站。 除此之外，通过本软件，你还可以浏览海内外新闻资讯，观看海外中文电视直播，下载影音视频、各种资料等。<a href="http://dongtaiwang.com/loc/phome.php?v=7.54p" target="_blank" rel="noopener">自由门下载</a></p><p>平台：Windows</p><p>很早的时候就听说了自由门这个软件，当时用倒是能用下，不过后来发现不能使用了。2018-02-12</p><p><strong>2、<del>无界浏览</del>：</strong></p><p>无界是世界顶级网络公司“极景”开发的全自动代理软件，也是公益性质的，永久免费；软件具有极强的翻墙能力，无需安装，双击运行后，就可以让你畅游 Facebook、YouTube、Twitter 等被封网站了。无界浏览下载：<a href="http://www.wujieliulan.com/download.php。平台：Windows、Android" target="_blank" rel="noopener">http://www.wujieliulan.com/download.php。平台：Windows、Android</a></p><p>也自由门一样，很早也不能使用了。2018-02-12</p><p><strong>3、赛风：</strong> </p><p>赛风是一个规避审查的工具，它的设计目的是访问开房的互联网，绕过审核和防火墙。它是开源并且开发于加拿大多伦多市。psiphon 在 android 和 windows 平台上可用。赛风下载：<a href="https://s3.amazonaws.com/psiphon/web/mjr4-p23r-puwl/zh/download.html" target="_blank" rel="noopener">https://s3.amazonaws.com/psiphon/web/mjr4-p23r-puwl/zh/download.html</a>。平台：Win、Android、iOS</p><p>赛风目前还能正常使用，但速度、稳定性都不太好。2018-02-12</p><p><strong>4、<del>翻墙路由器(fqrouter)</del>：</strong> </p><p>这是一款比较轻量级的 Android 系统翻墙工具，而且是开源的（GitHub 地址：<a href="https://github.com/fqrouter/fqrouter" target="_blank" rel="noopener">fqrouter/fqrouter</a>），作者是天朝网友。平台：Android</p><p>现在也没用过，估计应该不能用了吧。网上搜了下资料，据说 2015 年 1 月 8 日 fqrouter开发者在 Twitter 宣布终止该项目的开发。同时找到篇文章：<a href="https://chinadigitaltimes.net/chinese/2016/02/gfw-%E7%9A%84%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90%E5%8F%8A%E7%BF%BB%E5%A2%99%E8%B7%AF%E7%94%B1%E5%99%A8-fqrouter-%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">GFW 的详细分析及翻墙路由器 (fqrouter) 的原理和实现</a>， 可以看看。</p><p><strong>5、蓝灯：</strong> </p><p>Lantern，中文译为“灯笼”，据说是谷歌出资打造的一款 FQ 软件，其口号为“人人可享的开放网络”。<a href="https://www.getlantern.org/zh_CN/" target="_blank" rel="noopener">官网</a> &amp; <a href="https://github.com/getlantern/forum" target="_blank" rel="noopener">Github 下载</a>。</p><p>免费版每个月有 500MB 流量限制。免费版流量使用完毕之后每个 TCP 连接会限速到 10KB/s。专业版流量无限，速度无限。 支持同时连接多台服务器，有专门的专业版优质线路。<a href="https://github.com/getlantern/forum/issues/378" target="_blank" rel="noopener">蓝灯专业版和免费版的区别</a>。</p><p>平台：Windows、macOS、Ubuntu、Andorid，iOS 版本将在 2018 年发布</p><p>注：对于突然着急需要一把梯子，蓝灯是个非常好的选择。</p><p><strong>6、Chrome 插件 - 谷歌访问助手：</strong></p><blockquote><p>插件介绍：最简单易用的谷歌访问助手，为 Chrome 扩展用户量身打造。可以解决 Chrome 扩展无法自动更新的问题，同时可以访问谷歌 Google 搜索，Gmail 邮箱，Google+ 等谷歌服务。使用该插件可以免费上： </p><ul><li><p>google.com（谷歌搜索）</p></li><li><p>mail.google.com（gmail邮箱）</p></li><li><p>Chrome 商店。</p></li></ul><p>使用该插件需要简单激活：有一定免激活时间，安装后按说明激活使用。该插件需要用户手工设置 hao123 导航为首页，才能激活使用。</p><p>chrome 网上应用商店： <a href="https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E8%AE%BF%E9%97%AE%E5%8A%A9%E6%89%8B/gocklaboggjfkolaknpbhddbaopcepfp?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">谷歌访问助手</a>。</p></blockquote><p>7、<a href="https://chrome.google.com/webstore/detail/setupvpn-lifetime-free-vp/oofgbpoabipfcfjapgnbbjjaenockbdp/related?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Chrome 插件 - SetupVPN</a></p><p>免费 VPN，无需技术知识，只需下载扩展程序，创建一个帐户即可完成。可能是最最最简单的访问外网的方式了。</p><p>当然了，相信还有很多电脑端、手机端能 FQ 的软件和工具，我也看到很多人有提到，就不记录了。</p><h2 id="2-4-XX-Net"><a href="#2-4-XX-Net" class="headerlink" title="2.4 XX-Net"></a>2.4 XX-Net</h2><p>XX-NET，系 GAE 类代理，即通过可用 Google ip 连接 Google App Engine 项目，然后把所有 tcp 请求发送给 Google App Engine，最终实现科学式网络的一种代理工具。过程中，GAE 类代理会伪造次证书，跳过证书验证机制。几年前，所有人用一套证书，安全性很差。近几年，用户量大增，也实现了每个人的证书都不同，安全性相对提高了不少。此外，由于替换了证书，实际上是个假 http 代理，所以不支持做任何其他代理的前置代理。至于 XX-NET 的优势，可以自动扫 Google IP，并进行 IP 筛选机制，使得用户可以非常稳定的使用 XX-NET，这是其他 GAE 类代理所没有的机制。当然，也有其他 GAE 类代理所共同的优点，流量可以说几乎无限制！ GitHub 地址：<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">XX-net/XX-Net</a></p><p>平台：浏览器</p><p>如何设置看这里：<a href="https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3" target="_blank" rel="noopener">xx-net 中文文档</a> ，也可以参考网上其他文档，如：<a href="https://cloudfra.com/xx-net-important.html" target="_blank" rel="noopener">XX-NET史上最详细完整教程</a></p><p>PS：在用影梭之前我都是用的 xx-net，当时一直都是可以的。</p><p>关于 GAE 一些说明：</p><blockquote><p>1、每个 GAE 应用每天限额流量 1G，因此如果你不够用的话，可以多注册几个，我注册了 12 个，想想怎么也够用了，每天 12G 的流量必然是用不完了。</p><p>2、我所处的网络环境对于速度的响应是比较敏感的，可以达到我的带宽上限，在 YouTube 上看 1080P 的视频没有任何问题。视网络环境的不同，也许你的情况会比我更好也可能更差，请放平心态，这与软件无关。</p></blockquote><h2 id="2-5-购买VPN"><a href="#2-5-购买VPN" class="headerlink" title="2.5 购买VPN"></a>2.5 购买VPN</h2><p>VPN：英文全称是“Virtual Private Network”，翻译过来就是「虚拟专用网络」。VPN 通常拿来做 2 个事情，一个是可以让世界上任意 2 台机器进入一个虚拟的局域网中（当然这个局域网的数据通讯是加密的，很安全，用起来和一个家庭局域网没有区别），一个是可以用来翻墙。</p><p>VPN 比 SS(影梭)更加底层，它通过操作系统的接口直接虚拟出一张网卡，后续整个操作系统的网络通讯都将通过这张虚拟的网卡进行收发。这和任何一个代理的实现思路都差不多，应用层并不知道网卡是虚拟的，这样 VPN 虚拟网卡将以中间人的身份对数据进行加工，从而实现各种神奇的效果。具体来说，VPN 是通过编写一套网卡驱动并注册到操作系统实现的虚拟网卡，这样数据只要经过网卡收发就可以进行拦截处理。</p><p>本来 VPN 这玩意儿主要是用于商业公司，为了让那些不在公司里的员工（比如出差在外的）能够方便地访问公司的内部网络。为了防止黑客冒充公司的员工，从外部访问公司的内部网络，VPN 软件都会提供强大的加密功能。而这个加密功能，也就让它顺便成为 FQ 的利器。</p><p><strong>VPN 的 FQ 原理：</strong> </p><blockquote><p>使用 VPN 通常需要先安装客户端软件。当你运行 VPN 客户端，它会尝试联到 VPN 服务器（这点跟加密代理类似）。一旦和 VPN 服务器建立连接，VPN 客户端就会在你的系统中建立了一个虚拟局域网。而且，你的系统中也会多出一个虚拟网卡（在 Windows 下，可以用 ipconfig /all 命令，看到这多出来的网卡）。这样一来，你的系统中就有不止一块网卡。这就引出一个问题：那些访问网络的程序，它的数据流应该通过哪个网卡进出？</p><p>为了解决此问题，VPN 客户端通常会修改你系统的路由表，让那些数据流，优先从虚拟的网卡进出。由于虚拟的网卡是通往 VPN 服务器的，当数据流到达 VPN 服务器之后，VPN 服务器再帮你把数据流转向到真正的目的地。</p><p>前面说了，VPN 为了保证安全，都采用强加密的方式传输数据。这样一来，GFW 就无法分析你的网络数据流，进行敏感词过滤。所以，使用墙外的 VPN 服务器，无形中就能达到翻墙的效果。</p></blockquote><p><strong>VPN 优点：</strong> </p><blockquote><p>由于 VPN 客户端会建立虚拟局域网并修改路由表，所以系统中所有涉及到网络的应用程序（比如：浏览器、邮件客户端、聊天工具）都会通过这个虚拟局域网来访问互联网。也就是说，你无需进行额外的配置，就可以让各种软件翻墙。这就是 VPN 翻墙同加密代理翻墙，最主要的区别。</p></blockquote><p><strong>VPN 缺点：</strong> </p><blockquote><p>其一，很多 VPN 是通过客户端软件来建立虚拟局域网的。这些客户端软件通常都需要在系统中装驱动。因此，这类 VPN 的客户端软件都不是绿色软件，而且还需要管理员权限才能安装。这样一来，那些通过网吧上网的同学，就无福享用此类 VPN了。像俺这样，非常偏爱绿色软件的，估计也不太喜欢这类 VPN。（某些基于 PPTP/L2TP/IPsec 的 VPN，由于无需安装客户端软件，没有此缺点）</p><p>其二，虽然 GFW 对 VPN 加密的数据流无可奈何。但是别忘了，GFW 还有另外的招数——域名封锁和 IP 封锁。如果某个 VPN 用的人太多，GFW 会针对这个 VPN 的服务器进行域名封锁和 IP 封锁。让这个 VPN 彻底用不了。</p></blockquote><p><em>新闻：</em> </p><blockquote><p>2017 年初，工信部发布了新的政策，基本内容可以理解为禁止国内公司未经政府允许提供 VPN 服务，其结果是国内 VPN 供应商将面临被封的危险。2017 年 6 月，著名国内 VPN 服务商 <a href="https://www.vpndada.com/greenvpn-closed-cn/" target="_blank" rel="noopener">GreenVPN被迫关闭、停止服务</a>，证明了这种趋势。所以我们不推荐大家使用任何由中国大陆 VPN 公司提供的服务。海外 VPN 公司不受中国大陆政策影响，不会面临被迫关门的危险，当然国外 VPN 服务商的网站存在被封。</p></blockquote><p>需要从技术层面了解原理的话，我在网上找了几篇文章：</p><ul><li><a href="https://program-think.blogspot.com/2011/09/gfw-vpn-hotspot-shield.html" target="_blank" rel="noopener">“如何翻墙”系列：扫盲 VPN 翻墙——以 Hotspot Shield 为例</a></li><li><a href="http://blog.021xt.cc/archives/85" target="_blank" rel="noopener">上网限制和翻墙基本原理</a> </li><li><a href="https://yuerblog.cc/2017/01/03/how-vpn-works-and-how-to-setup-pptp/" target="_blank" rel="noopener">vpn工作原理和搭建方法</a> </li></ul><p><em>翻墙 VPN 推荐话，可参考：<a href="https://www.fanqiangzhe.com/software/" target="_blank" rel="noopener">翻墙软件指南</a></em>  </p><h2 id="2-6-杀手锏——影梭-Shadowsocks"><a href="#2-6-杀手锏——影梭-Shadowsocks" class="headerlink" title="2.6 杀手锏——影梭(Shadowsocks)"></a>2.6 杀手锏——影梭(Shadowsocks)</h2><h3 id="1-基础知识了解"><a href="#1-基础知识了解" class="headerlink" title="1. 基础知识了解"></a>1. 基础知识了解</h3><p>先了解什么是 VPS，SSH 以及原理，看该文：<a href="https://medium.com/@zoomyale/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E7%BB%88%E6%9E%81%E5%A7%BF%E5%8A%BF-%E5%9C%A8-vultr-vps-%E4%B8%8A%E6%90%AD%E5%BB%BA-shadowsocks-fd57c807d97e" target="_blank" rel="noopener">科学上网的终极姿势</a> 、<a href="https://yuerblog.cc/2016/11/23/the-principles-of-shadowsocks/" target="_blank" rel="noopener">关于shadowsocks的一些思考</a></p><p><img src="https://yuerblog.cc/wp-content/uploads/2016/11/WechatIMG938.jpeg" alt></p><p>对于影梭原理的总结：shadowsocks 在客户端机器本地部署了一个 socks5 server 端，用户使用一个支持 sock5 的客户端软件（最常见的如：浏览器）连接这个 sock5 server 发送数据。这个 sock5 server 是 shadowsocks 按照 socks5 协议开发的，它解密数据为明文后按照 shadowsocks 自定义的一种新的通讯协议加密发送给在 GFW 外部署的 shadowsocks server，这个 server 按照 shadowsocks 协议解密数据为明文，并将明文发给墙外的目标机。简单举个例子，<strong>你部署了 SS 服务在香港某 VPS，你需要访问谷歌，其过程为：你通过你本地 SS Local 发送数据到 SS Server，然后在请求谷歌网站。</strong>但 VPN 的过程，则为你发送数据到某台服务器，该服务器代理你的请求，把你的请求再发往谷歌。</p><p>关于 SS/SSR 客户端的功能介绍和使用教程可以看这两篇：</p><ul><li><a href="https://lolico.moe/tutorial/shadowsocksr.html/comment-page-2#%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">大概是萌新也看得懂的SSR功能详细介绍&amp;使用教程</a></li><li><del><a href="https://doub.io/ss-jc10/" target="_blank" rel="noopener">ShadowsocksR 客户端 小白使用教程 - 逗比基地</a></del>（已经无法访问~）</li></ul><p><del>关于这方面内容可以在 [逗比基地] 网站学习到：<a href="https://doub.io/ss-jc35/" target="_blank" rel="noopener">关于Shadowsocks的小白常见问题 总结篇 - 逗比基地</a>，看完你会了解得更清楚！</del></p><p>Putty 的使用：<a href="http://www.bandwagonvps.com/40.html" target="_blank" rel="noopener">PUTTY工具应用及登录VPS主机SSH账户</a></p><p>VPN 和影梭 FQ 的原理的区别：<a href="https://deeponion.org/community/threads/vpnss-ssr.901/" target="_blank" rel="noopener">Vpn与ss/ssr的区别</a>、<a href="https://doub.io/ss-jc9/" target="_blank" rel="noopener">Shadowsocks（Sock5代理）的PAC模式与全局模式与VPN的区别</a></p><h3 id="2-对影梭的认识"><a href="#2-对影梭的认识" class="headerlink" title="2. 对影梭的认识"></a>2. 对影梭的认识</h3><p><strong>VPN：</strong> 就是一个软件一个帐号和密码，我们登陆了以后，我们的机器访问网站或者是上 QQ 或者是登陆一些网络软件的时候，所显示的和使用的IP都是国外的。也就是说，VPN 是一个可以让我们的机器直接连接到国外的网线上的东西，就这么理解就行了。</p><p><strong>VPS：</strong> 就是 Virtual Private Server 的英文件缩写，说得是在一台服务器上创建多个相互隔离的虚拟服务器。我们可以把 VPS 理解为一台服务器用软件分割开以后，就成了多台服务器，他们有独立的操作系统，具有独立的 IP，这个时候每一个小的独立操作系统，就是一个 VPS，也可以理解为，VPS 就是一个配置低了点的服务器。这些虚拟服务器以最大化的效率共享硬件、软件许可证以及管理资源。对其用户和应用程序来讲，每一个 VPS 平台的运行和管理都和一台独立主机完全相同，因为每一个 VPS 都可以独立进行重启，并拥有自己的 root 访问权限、用户、IP 地址、内存、过程、文件、应用程序、系统函数库以及配置文件。</p><p><strong>ss：</strong>ss 作者是 <a href="https://github.com/clowwindy" target="_blank" rel="noopener">clowwindy</a>，大约两年前，他自己为了翻墙写了 shadowsocks，简称 ss 或者叫影梭，后来他觉得这个东西非常好用，速度快，而且不会被封锁，他就把源码共享在了 GitHub 上，然后就火了，但是后来作者被请去喝茶，删了代码，并且保证不再参与维护更新。注：但 Shadowsocks 属于开源项目，所以删除前已经有人备份，同时由另一个志愿者跟进维护原版 <a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Shadowsocks</a> 客户端，而其他基于 Shadowsocks 项目的第三方项目有： ShadowsocksR、Shadowsocks-qt5、ShadowsocksCap 等来维护更新 Window/Linux 客户端（其他系统的不一一举例了）。</p><p><strong>ssr：</strong>在 ss 作者被喝茶之后，GitHub 上出现了一个叫 breakwa11(破娃)的帐号，声称 ss 容易被防火墙检测到，所以在混淆和协议方面做了改进，更加不容易被检测到，而且兼容 ss，改进后的项目叫 shadowsocks-R，简称 ssr，然后 ss 用户和 ssr 用户自然分成了两个派别，互相撕逼，直到前阵子，破娃被人肉出来，无奈之下删除了 ssr 的代码，并且解散了所有相关群组。</p><blockquote><p>注：其改进的地方主要特点是增加了一些人性化功能，<strong>比如服务器连接统计、连接管理、协议转换、多重代理等。</strong>最主要的是 ShadowsocksR 的混淆协议和插件功能，因为 Shadowsocks 原版项目已经无人维护，同时 Qiang 的工作人员也在不停的寻找效率批量匹配特征的方法，目前 SS 原版协议在大部分地区已经被匹配流量特征 QOS 限速了。所以 ShadowsocksR 的混淆协议和插件就应运而生，其目的就是欺骗 Qiang 目前的流量匹配功能和 QOS 限速。需要说明的是，ShadowsocksR 目前最新的协议和混淆是会增加延迟和损耗 15% 的速度(因为混淆需要时间，越复杂的混淆越不容易被墙发现，同时混淆时间越长)，所以如果你没有限速，或许用原版协议和混淆会更好。</p></blockquote><p>ss 和 ssr 它的原理都是一样的，就是 socks5 代理。socks 代理只是简单的传递数据包，而不必关心是何种协议，所以 socks 代理比其他应用层代理要快的多。socks5 代理是把你的网络数据请求通过一条连接你和代理服务器之间的通道，由服务器转发到目的地，这个过程中你是没有通过一条专用通道的，只是数据包的发出，然后被代理服务器收到，整个过程并没有额外的处理。通俗的说，现在你有一个代理服务器在香港，比如你现在想要访问 Google，你的电脑发出请求，流量通过 socks5 连接发到你在香港的服务器上，然后再由你在香港的服务器去访问 Google，再把访问结果传回你的电脑，这样就实现了翻墙。</p><p>问题：shadowsocks 会不会被和谐？我认为很难。首先，我认为 GFW 也不会过度干预跨境流量，因为用途并不能完全确定，因此我们 GFW 外的 shadowsocks server 的 IP 地址通常不会被无脑拦截，除非 IP 所在的机房做了什么过份的事情，因此 shadowsocks server 的连通性应该可以保障。</p><h3 id="3-搭建实战"><a href="#3-搭建实战" class="headerlink" title="3. 搭建实战"></a>3. 搭建实战</h3><p><strong>注：在搭建过程中，如果想要 SS、SSR客户端都能使用，设置协议为<code>origin</code>。混淆为<code>plain</code> 就可以。</strong> </p><p>选择你购买的 VPS 搭建，参考：</p><ul><li><p><strong>搬瓦工VPS搭建参考：</strong> </p><ul><li><a href="http://www.thinkite.com/?p=720" target="_blank" rel="noopener">免费的是最贵的——5分钟自购VPS搭梯科学上网</a></li></ul></li><li><p><strong>Vlutr VPS搭建参考：</strong> </p><ul><li><a href="https://www.qcgzxw.cn/1640.html" target="_blank" rel="noopener">实战vultr搭建SSR+锐速——超速看youtube1080p</a></li><li><a href="http://spechles.cn/2016/03/01/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E4%B8%AA%E6%A2%AF%E5%AD%90/" target="_blank" rel="noopener">利用VPS搭个梯子（Mac操作）</a></li></ul></li><li><p><strong>DigitalOcean VPS搭建参考：</strong></p><ul><li><a href="https://segmentfault.com/a/1190000011564797" target="_blank" rel="noopener">DigitalOcean搭建shadowsocks梯子完全图文记录（Win+Android）</a></li></ul></li></ul><p>由于我有申请到了 GitHub 学生包，有送 DigitalOcean 的 50 美元优惠券，只需要再付 5美元定金，然后总共有 55 美元，选择最低的套餐 5$/月，这样我相当于花 30 多人民币可以享受 11个月的梯子。</p><p>如果你还是在校学生，可以像我试着申请一个，参考我这里写的【Github学生包的介绍与申请】。</p><p>搭建过程选择哪个系统，网上看到有的人选择 Ubuntu，有人选择 CentOS。最后我参考的是 Github 上这篇文章搭建的：<a href="https://github.com/XX-net/XX-Net/issues/6506" target="_blank" rel="noopener">自己搭建ss/ssr服务器教程（适合初学者，最低2.5美元/月）</a>。按文章来，遂我也基于 CentOS 系统搭建了。</p><p><em>注：创建 DigitalOcean 的  VPS 服务器的时候我选择的新加坡节点，这个节点对我来说是最快的，测试地址为：<a href="https://digitalocean.me/location-and-test-server" target="_blank" rel="noopener">https://digitalocean.me/location-and-test-server</a></em>。</p><p>我把主要的步骤和内容记录下：</p><ol><li><p>使用叫 Putty 或者 Xshell 的软件登录购买的远程 VPS，，如果有配置 SSH，则干脆使用 Git Bash，输入命令：<code>ssh 用户名@ip</code> 即可登录远程 VPS，默认端口为 22；</p></li><li><p>部署 VPS 服务器：连接成功后，之后就可以复制粘贴代码部署了，CentOS6/Debian6/Ubuntu14 ShadowsocksR 一键部署管理脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"></span><br><span class="line"># 下面是备用脚本：</span><br><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>复制上面的代码到 VPS 服务器里，按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：<code>bash ssr.sh</code></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png" alt></p></li></ol><p>   如上图出现管理界面后，输入数字 1 来安装 SSR 服务端。如果输入 1 后不能进入下一步，那么退出下，重新连接 VPS 服务器，然后输入快捷管理命令 <code>bash ssr.sh</code> 再尝试。</p><p>   然后会出现账号有关信息的自定义，依次输入自己想设置的端口和密码（密码建议用复杂点的字母组合，端口号为 1-65535 之间的数字），回车键用于确认，再选择想设置的加密方式，接下来是选择协议插件，选择并确认后，会出现提示你是否选择兼容原版，这里的原版指的是 SS 客户端（SS 客户端没有协议和混淆的选项），可以根据需求进行选择，我选择了 y，继续，之后进行混淆插件的设置。</p><blockquote><p><strong>注意：有的地区需要把混淆设置成 plain 才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</strong></p><p>PS：在搭建过程中，如果想要 SS、SSR 客户端都能使用，设置协议为<code>origin</code>。混淆为<code>plain</code> 就可以。</p></blockquote><p>   进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>   之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p><p>   <img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png" alt></p><p>   耐心等待一会，出现部署完成的界面。</p><p>   也可以看到自己设置的 SSR 账号信息，包括 IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的 SSR 客户端。如果之后想修改账号信息，直接输入快捷管理命令：<code>bash ssr.sh</code> 进入管理界面，选择相应的数字来进行一键修改。</p><ol><li><p>一键加速 VPS 服务器</p><p>此加速教程为谷歌 BBR 加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>按照第二步的步骤，连接服务器 IP，登录成功后，在命令栏里粘贴以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启 VPS 服务器即可。</p><p>最后输入 y 重启服务器或者手动输入代码 reboot 来确保加速生效，BBR 加速脚本是开机自动启动。</p></li><li><p>最后就是本地客户端 SS 或者 SSR 的设置，这就不多讲了，填上相应信息就可以。在我开启 BBR 加速之前和之后，我观察到观看油管视频的连接速度由大概 5M/s 增加了一倍达到大概 10M/s。Nice！​</p></li></ol><p>这里提下：提供 VPS 厂商还有很多，比如 <a href="https://bandwagonhost.com/" target="_blank" rel="noopener">搬瓦工</a>（最便宜的套餐为 2.99刀/月、19.99刀/年，刚去官网看了下现在该套餐竟没货了，其后台有一键搭建 SS/SSR 服务，搭建方便，但是因为实惠，用的人很多，有人反映有些 IP 被封以及速度一般。）</p><hr><blockquote><p><em>声明：本文仅供学习研究，请勿用于政治及商业非法目的。</em> </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结下我使用过得以及我知道的 XX 上网方式。
    
    </summary>
    
      <category term="程序人生" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>篇2：科学上网之SSR和V2Ray的搭建</title>
    <link href="http://yoursite.com/2019/02/12/%E7%AF%872%EF%BC%9A%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E4%B9%8BSSR%E5%92%8CV2Ray%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/12/篇2：科学上网之SSR和V2Ray的搭建/</id>
    <published>2019-02-12T12:01:08.000Z</published>
    <updated>2019-09-23T03:26:18.271Z</updated>
    
    <content type="html"><![CDATA[<p>该文主要记录 Shadowsocks/ShadowsocksR 和 V2Ray 的搭建过程要点。<a id="more"></a></p><h1 id="一、SS-或-SSR-的搭建"><a href="#一、SS-或-SSR-的搭建" class="headerlink" title="一、SS 或 SSR 的搭建"></a>一、SS 或 SSR 的搭建</h1><p>可以先看我写的一篇总结：【篇1：科学上网总结】，该文有记录如何搭建影梭，可以当做先了解下相关知识也可以。</p><h2 id="Step01：安装脚本"><a href="#Step01：安装脚本" class="headerlink" title="Step01：安装脚本"></a>Step01：安装脚本</h2><h3 id="安装脚本1"><a href="#安装脚本1" class="headerlink" title="安装脚本1"></a>安装脚本1</h3><p>参考：<a href="https://github.com/XX-net/XX-Net/issues/6506" target="_blank" rel="noopener">自己搭建ss/ssr服务器教程（适合初学者，最低2.5美元/月）</a></p><p>注：以下操作都是在 CentOS 系统下进行的。当然以防万一，建议大家选择 <code>CentOS 6</code>，看网上有人说 <code>CentOS 7</code> 默认的防火墙可能会干扰 SSR 的正常连接。</p><p>购买好了 VPS，则可以开始搭建了。首先我们需要远程连接上你的 VPS，这里可以使用 Putty、XShell 等客户端工具，也可以使用 Git Bash 下的 ssh 命令（但记得要先配置 SSH，这个就不多赘述了）。</p><p>命令：<code>ssh -p xx user@ip</code>，xx 为 端口号    user 为用户名   ip 为要登陆的 ip。</p><p>使用 Git Bash 连接 VPS 的命令：<code>ssh -p 22 root@ip</code>或<code>ssh root@ip</code>，其中“ip”替换成 VPS 的 ip，按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br><span class="line"></span><br><span class="line"># 下面是备用脚本：</span><br><span class="line"></span><br><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><p>要是想要查看或重新设置输入：<code>bash ssr.sh</code></p><blockquote><p><em>PS：亲测，第一个脚本文件已经不可用了，第二个还能使用，以防下次第二个也不正常使用，于是我下载下来了，以及下面的 BBR 加速脚本也给下载了，放在 tools 文件夹下的【脚本备份】目录下。</em> </p></blockquote><h3 id="或者安装脚本2"><a href="#或者安装脚本2" class="headerlink" title="或者安装脚本2"></a>或者安装脚本2</h3><p>参考：<a href="https://segmentfault.com/a/1190000015699248" target="_blank" rel="noopener">Vultr最简单的梯子搭建SS教程，只需30分钟，畅游互联网世界</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install wget -y</span><br><span class="line">$ wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>这个脚本会自动给你进行所有的设置。</p><p>安装锐速：</p><p>一键更换内核脚本（Vultr 需先执行此脚本）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh &amp;&amp;</span><br><span class="line">bash ruisu.sh</span><br></pre></td></tr></table></figure><p>脚本安装需要 1-3 分钟，耐心等待服务器重启，服务器重启之后，重新连接继续安装就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br><span class="line"></span><br><span class="line"># 下面这个是备用脚本：</span><br><span class="line"></span><br><span class="line">wget -N --n</span><br><span class="line">o-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><p>出现这些就算大功告成：<img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190217004426.png" alt></p><ul><li>要深入了解相关「影梭」的 FQ 知识可以看：<a href="https://lvii.gitbooks.io/outman/content/" target="_blank" rel="noopener">科学上网漫游指南</a></li></ul><h3 id="或者安装脚本3"><a href="#或者安装脚本3" class="headerlink" title="或者安装脚本3"></a>或者安装脚本3</h3><p>关于 SSR 的服务器安装、客户端下载，可以仔细查阅该网站——<a href="https://ssr.tools/" target="_blank" rel="noopener">SSR中文网</a>。</p><p>参考：<a href="https://ssr.tools/31" target="_blank" rel="noopener">SSR一键安装脚本 (ShadowsocksR一键安装教程)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><p>小提示：如果运行上面第一条命令时，出现找不到 wget 之类的提示，则表明系统没有预装 wget，先运行以下命令完成 wget 的安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#CentOS：</span><br><span class="line">yum -y install wget</span><br><span class="line">#Ubuntu/Debian：</span><br><span class="line">apt-get -y install wget</span><br></pre></td></tr></table></figure><p>Putty 连接至 VPS 服务器，分别运行如下各命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#启动SSR：</span><br><span class="line">/etc/init.d/shadowsocks-r start</span><br><span class="line">#退出SSR：</span><br><span class="line">/etc/init.d/shadowsocks-r stop</span><br><span class="line">#重启SSR：</span><br><span class="line">/etc/init.d/shadowsocks-r restart</span><br><span class="line">#SSR状态：</span><br><span class="line">/etc/init.d/shadowsocks-r status</span><br><span class="line">#卸载SSR：</span><br><span class="line">./shadowsocks-all.sh uninstall</span><br></pre></td></tr></table></figure><p>BBR加速脚本：<a href="https://ssr.tools/199" target="_blank" rel="noopener">VPS服务器Google BBR一键安装脚本</a>，同【第二步：谷歌BBR加速】小节的 BBR 加速脚本。</p><h3 id="ShadowsocksR-推荐协议混淆设置"><a href="#ShadowsocksR-推荐协议混淆设置" class="headerlink" title="ShadowsocksR 推荐协议混淆设置"></a>ShadowsocksR 推荐协议混淆设置</h3><p>协议推荐：</p><ul><li>协议用 auth_chain_a 最佳，此时推荐不使用加密（设置为 none），混淆随意</li><li>加密选择：若协议用 auth_chain_a，那加密用 none（但不代表密码可以不写或两边不匹配）</li><li>若协议不是 auth_aes128_md5 或 auth_aes128_sha1，那么不能使用 rc4 加密（可用 rc4-md5）。这时加密可以在 rc4-md5、salsa20、chacha20-ietf 三个里面选择（rc4-md5 可换为 aes 系列，salsa20 可换为 chacha20 或 bf-cfb），</li><li>如果使用 SSR 还可特别选择 rc4-md5-6。</li></ul><p>混淆推荐：</p><ul><li>如果 QoS 在你的地区明显，混淆建议在 http_simple 与 tls1.2_ticket_auth 中选择，具体选择可以通过自己的试验得出。</li><li>如果选择混淆后反而变慢，那么混淆请选择 plain。如果你不在乎 QoS，但担心你的个人 vps 能不能持久使用，那么混淆选择 plain 或 tls1.2_ticket_auth，协议选择 auth_chain_a 或 auth_aes128_md5 或 auth_aes128_sha1</li><li>如果你用于玩游戏，或对连接延迟有要求的情况下，建议不要使用 tls1.2_ticket_auth 混淆，用其它混淆或 plain 服务端里，http_simple 与 http_post 是相互兼容的，没有使用上的区别</li><li>如果你在公司，或学校，或某些环境下，发现原版 SS 协议不可用，建议你启用 http_simple、http_post 或 tls1.2_ticket_auth 混淆，同时端口相应使用 80 或 443，通常能解决问题。同时能躲避你所在环境下的网络封锁（如禁止访问网盘禁止上传等等）</li><li>如果使用 tls1.2_ticket_auth 混淆或不开启混淆，那么协议最好不要使用 origin 或 verify_sha1</li><li>如果使用二重代理，一般你只需要考虑越过防火墙的那一段使用混淆或加强协议，除非为了匿名</li></ul><p>参考：</p><ul><li><a href="https://github.com/cg3s/forum/wiki/%E5%BD%93%E5%89%8D%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%EF%BC%8CSS%E5%8F%8ASSR%E8%AF%A5%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE%E5%8D%8F%E8%AE%AE%E6%B7%B7%E6%B7%86%E6%89%8D%E6%98%AF%E6%9C%80%E4%BD%B3%EF%BC%9F" target="_blank" rel="noopener">当前网络环境，SS及SSR该怎么配置协议混淆才是最佳？ · cg3s/forum Wiki</a></li><li><a href="https://my.oschina.net/niithub/blog/1812936" target="_blank" rel="noopener">ShadowsocksR 推荐协议混淆设置 - 开源中国</a></li></ul><h2 id="Step02：谷歌BBR加速"><a href="#Step02：谷歌BBR加速" class="headerlink" title="Step02：谷歌BBR加速"></a>Step02：谷歌BBR加速</h2><h3 id="BBR加速脚本1"><a href="#BBR加速脚本1" class="headerlink" title="BBR加速脚本1"></a>BBR加速脚本1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line"></span><br><span class="line">chmod +x bbr.sh</span><br><span class="line"></span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启 VPS 服务器即可。重启命令：<code>reboot</code></p><p><em>关于什么是 BBR 加速，看这篇文章了解下：<a href="https://www.moidea.info/archives/445.html" target="_blank" rel="noopener">SSR开启Google的BBR内核脚本加速TCP（附BBR一键安装脚本）</a></em></p><blockquote><p>Google 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。  </p><p>BBR 是来自于 Google 的黑科技，目的是通过优化和控制TCP的拥塞，充分利用带宽并降低延迟，起到神奇般的加速效果。在BBR之前，比较有名的就是国产的锐速了，不过由于锐速是个国产的闭源软件，所以一直纠结不想装在VPS上。正好，BBR的出现，又成为一个可供折腾的对象。</p><p>BBR 这个特性其实是在 Linux 内核 4.9 才计划加入的。所以，要开启BBR，需要内核版本在Linux kernel 4.9以上，根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。</p><p>查看内核版本：<code>uname -r</code></p></blockquote><h3 id="或者安装BBR加速脚本2"><a href="#或者安装BBR加速脚本2" class="headerlink" title="或者安装BBR加速脚本2"></a>或者安装BBR加速脚本2</h3><p><strong>如果前面那个 BBR 加速安装失败！</strong>那么可以看下该文安装这个 BBR 加速：<a href="https://github.com/XX-net/XX-Net/issues/6506" target="_blank" rel="noopener">BBR+BBR魔改+Lotsever(锐速)一键脚本 for Centos/Debian/Ubuntu</a></p><blockquote><p>支持系统：<code>Centos 6+</code>/<code>Debian 8+</code>/<code>Ubuntu 14+</code></p><p>加速脚本安装，先运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>使用脚本后会出现如下选项：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190217004302.png" alt></p><p>根据自己需求操作，重启后再使用<code>./tcp.sh</code>命令接着操作 —&gt; 按 3或4 使用 BBR 加速 —&gt; 基于前面介绍的方法判断是否开启 BBR 加速，比如输入命令：<code>lsmod|grep bbr</code>，如果出现 tcp_bbr 字样表示bbr已安装并启动成功。</p><p>关于什么是「魔改版 BBR」解释下：<a href="https://www.moerats.com/archives/190/" target="_blank" rel="noopener">魔改Google BBR一键安装脚本，比正常版BBR强</a>  —&gt; 本方法出自于<code>hostloc</code>论坛大佬<code>Yankee</code>发布的<code>BBR</code>魔改，并由<code>Vicer</code>博主制作的一键包。魔改基本就是修改<code>BBR</code>源码，调整参数，使其更强劲。</p><p>PS：如果在删除内核环节出现这样一张图</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190217004340.png" alt></p><p>注意选择<code>NO</code>，然后根据提示重启系统。</p></blockquote><h2 id="Step02：或安装锐速加速"><a href="#Step02：或安装锐速加速" class="headerlink" title="Step02：或安装锐速加速"></a>Step02：或安装锐速加速</h2><p>1、安装锐速需降级系统内核，而安装 Google BBR 则需升级系统内核，故两者不能同时安装。</p><p>2、安装锐速需降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。</p><p>执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>回车后输出当前系统内核版本。主要分三种情况：</p><p><em>1、结果以 2 开头，例如 2.6.32-696.18.7.el6.x86_64。</em></p><p>这种输出结果说明我们的服务器为 CentOS6 x64 系统。</p><p><em>2、结果以 3 开头，例如 3.10.0-693.11.6.el7.x86_64。</em></p><p>这种输出结果说明我们的服务器为 CentOS7 x64 系统。</p><p><em>3、结果以 4 开头，例如 4.12.10-1.el7.elrepo.x86_64。</em></p><p>这种输出结果说明我们的服务器已经安装 Google BBR 拥塞控制算法，此时已经无法继续安装锐速。</p><h3 id="1-若系统为-CentOS7-x64，如何安装锐速加速"><a href="#1-若系统为-CentOS7-x64，如何安装锐速加速" class="headerlink" title="1. 若系统为 CentOS7 x64，如何安装锐速加速"></a>1. 若系统为 CentOS7 x64，如何安装锐速加速</h3><p>如下图：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190605200822.png" alt></p><p>以 3 开头，说明使用的 CentOS7 x64 系统，内核版本高。若要安装锐速加速，先降低系统内核：</p><p>1、首先更换内核，执行下面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>等待内核更换完毕后系统会自动重启并断开连接。系统重启后，会断开连接。等待 1~2 分钟服务器即可重启完毕，我们重新连接服务器再次连接服务器，输入下面安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>回车。然后再按回车键继续，系统会自动安装锐速，同时会先后要求我们设置锐速的三项信息。按照下图提示，我们每次都直接回车继续即可。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190605201351.png" alt></p><p>出现下面信息，就说明锐速安装成功了。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190605201410.png" alt></p><h3 id="2-若系统为-CentOS6-x64，如何安装锐速加速"><a href="#2-若系统为-CentOS6-x64，如何安装锐速加速" class="headerlink" title="2. 若系统为 CentOS6 x64，如何安装锐速加速"></a>2. 若系统为 CentOS6 x64，如何安装锐速加速</h3><p>若你的系统选择是 CentOS6 x64，不需要更换内核，直接执行下列安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install &apos;2.6.32-642.el6.x86_64&apos;</span><br></pre></td></tr></table></figure><p>安装步骤一路回车就行了。</p><p>参考：<a href="https://www.baishitou.cn/1524.html" target="_blank" rel="noopener">https://www.baishitou.cn/1524.html</a></p><hr><h2 id="各平台影梭下载"><a href="#各平台影梭下载" class="headerlink" title="各平台影梭下载"></a>各平台影梭下载</h2><p>1、各平台 Shadowsocks 客户端下载地址：<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">Shadowsocks - Clients</a></p><p>2、SSR Mac 客户端下载：<a href="https://ssr.tools/164" target="_blank" rel="noopener">SSR MAC客户端ShadowsocksX-NG-R下载、安装及使用教程</a></p><blockquote><p>Shadowsocks 的 MAC 客户端，主要有两个版本：ShadowsocksX 和 ShadowsocksX-NG，其中ShadowsocksX-NG 为ShadowsocksX 的最新版本 。<strong>目前这两个版本仅支持 SS 原版，不支持 SSR 的混淆功能。</strong> </p><p>目前更建议安装 Shadowsocks-NG-R 版本。</p><p>ShadowsocksX-NG-R 目前最新版本为 ShadowsocksX-NG-R8 1.4.4，适用于 iMac/Macbook。</p><p>下载：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.4-r8/ShadowsocksX-NG-R8.dmg" target="_blank" rel="noopener">ShadowsocksX-NG-R8.dmg</a></p></blockquote><p>3、另外这篇文章 <a href="https://congcong0806.github.io/2018/04/20/SS/#%E5%AE%A2%E6%88%B7%E7%AB%AF" target="_blank" rel="noopener">SS/SSR 简介 - 聪聪 Blog</a> 列举了很多各个平台 SS/SSR 客户端并且能点击链接到下载处。下面截图是文章中列举的 SS/SSR 部分 iOS 客户端：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190228153320.png" alt></p><p>Shadowrocket 下载（需切换到美区下载）：<a href="https://apps.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">https://apps.apple.com/us/app/shadowrocket/id932747118</a></p><h2 id="VPS推荐"><a href="#VPS推荐" class="headerlink" title="VPS推荐"></a>VPS推荐</h2><p><a href="https://ssr.tools/55" target="_blank" rel="noopener">适合搭建SSR的国外VPS服务器推荐汇总</a></p><ul><li>搬瓦工</li><li>Vultr</li><li>Linode</li><li>DigitalOcean</li></ul><p>也可以考虑下 Google Cloud，有信用卡可以薅下该羊毛：</p><ul><li><a href="[https://freeleox.github.io/2018/11/02/Google%20Cloud%20SSR/](https://freeleox.github.io/2018/11/02/Google Cloud SSR/">谷歌云免费搭建一年SSR服务器</a>)</li><li><a href="https://elephantnose.github.io/2018/09/24/10%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E7%94%A8%20Google%20Cloud%20Platform%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VPN/" target="_blank" rel="noopener">10分钟教你用 Google Cloud Platform 搭建自己的VPN</a></li><li><p><a href="https://www.wmsoho.com/google-cloud-platform-ssr-bbr-tutorial/" target="_blank" rel="noopener">Google Cloud Platform免费申请&amp;一键搭建SSR &amp; BBR加速教程</a></p><blockquote><p>Google 云服务平台对新用户赠送 300 美元，可以免费使用 1 年。并且到期后如果不打算续费，也不会额外收取费用 （像亚马逊AWS就直接扣你费用）。</p><p>如果还想继续用，直接新注册个账号，免费 (现在需要新卡了)。用来搭 SS 的话, 最低配置的机型 $5/月, 出口大陆流量 1T 以内为 0.23$/1G，算下来每个月可用 80 多 G 的流量，足够用了, 当然你还可以顺便搭个网站之类的。</p><p>注意：需要用到信用卡!!!</p></blockquote></li></ul><h2 id="补充：关于DigitalOcean-VPS的说明"><a href="#补充：关于DigitalOcean-VPS的说明" class="headerlink" title="补充：关于DigitalOcean VPS的说明"></a>补充：关于DigitalOcean VPS的说明</h2><p>本人目前一直在用 DigitalOcean。如果你也打算使用这家 VPS，可以考虑使用我这个分<a href="https://m.do.co/c/632db6a2a3e4" target="_blank" rel="noopener">链接</a>注册。下面是官网给出的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Give $50, Get $25</span><br><span class="line">Everyone you refer gets $50 in credit over 30 days. Once they’ve spent $25 with us, you&apos;ll get $25. There is no limit to the amount of credit you can earn through referrals.</span><br></pre></td></tr></table></figure><p>下面是关于 DigitalOcean 流量和计费方式的问题：</p><p><strong>（1）流量</strong></p><p><em><a href="https://www.vpsrb.com/735.html" target="_blank" rel="noopener">Digitalocean套餐全面升级，价格不变，内存翻倍：KVM/IPv6/按时付费</a>：</em></p><blockquote><p>Digitalocean 2018 年给所有的套餐都升了个级，在价格不变的基础上，所有套餐内存翻倍。从原先的 512M 内存起，变成了 1G 内存起，付费方式依然为按时付费，1G1 核，25G SSD，不限流量的最低套餐每小时 0.007 美元，用多少算多少，用满一个月则需 5 美元。套餐明面上写着月流量 1T 起，实际上是不限流量的。</p></blockquote><p><em><a href="https://www.v2ex.com/t/450840" target="_blank" rel="noopener">DigitalOcean 对超出流量收费了</a>：</em></p><blockquote><p>之前一直是超出不另外计费，相当于无限流量，从 4 月开始，超出流量开始收费…</p></blockquote><p><strong>（2）计费</strong> </p><p><em>2014-05-15 <a href="http://moe.mwulu.com/digitalocean-feiyong/" target="_blank" rel="noopener">DigitalOcean是如何计算费用</a></em></p><p>1) 按月和按小时计费</p><p>如果你整月使用 DigitalOcean 的服务器，则按月和按小时计费是没有任何差别。账单中是显示按小时计费，每小时扣费直到每月付款上限。DigitalOcean 按照每个月 672 小时（28天）计算费用，如果你使用不到 672 小时，则按照实际使用小时数计算费用；如果每月使用超过 672 小时，超过 672 小时的部分不收取任何费用，只收取每月付款上限，如 5 美元。具体本人测试大约一小时 0.01 美元。</p><p>2) 如何分清扣款</p><p>很多使用 DigitalOcean 的同学都不知道 DigitalOcean 到底是怎么计费的，按照官方的最低配置是 5 刀一个月，那么我们充值了 5 刀后直接开通最低配置就扣除账户 5 刀的余额没？答案是：错的！DigitalOcean 的计费是按时计费，按照你开通的云服务器的使用时间来计费，当你删除云服务器液滴后将会停止计费（关机还会在依旧扣费）。他们官方已经有具体的配置价格对照表，而且在开通液滴的时候也有显示每小时计费多少钱，扣除的余额是从您充值的账户里面慢慢扣，非常灵活的计费系统功能。</p><p><em><a href="http://digitalocean.lofter.com/post/2040f2_6c3214" target="_blank" rel="noopener">DigitalOcean 扣费方法/DigitalOcean怎么月付？</a></em></p><p>DigitalOcean 使用小时计费模式，删除后便不再计费，非常合理。每小时的价格为0.007美元。<code>0.007美元/小时x每天24小时x每月30天=5.04美元=30.8992人民币</code>。<code>0.007x24x365=61.32美元=375.9407人民币</code>。之前我也奇怪，为什么在购买的时候没有选择按月计费呢？仔细研究下才知道按小时扣费和按月扣费没有区别，反而更节省。</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190112140010.png" alt></p><p><strong>（3）关于欠费问题</strong></p><p>本人在使用 DigitalOcean 欠费后还能继续使用，欠费好多天后还能用，纳闷了，总觉得要了解清楚，于是发起了一个 Ticket，得到的回复大概意思是，到了一定时间会自动关掉的。</p><p>那我便没放在心上，因为觉得再欠费几天就会被自动停掉，但没有想到的是欠费二十多天，欠费 6.73$，依旧能使用，而且每天给我发邮件提示欠费金额。看着每天都在扣费，但又不给我自动关闭，心里着实不够踏实，于是我打开网站准备主动删除 Droplet，发现删不掉，看到网上有人说可以试试注销账号方式，于是试着注销账号，注销不了，很坑啊，再到网上找解决方式，看到有人提到发起 Ticket，于是我第二次发起一个 Ticket，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hello,I'm your old friend. Last year I heard about Digital Ocean from Github,I also got an exclusive education offer on github.I got a $50 coupon so l used it to buy ur server.I used ur vps to build up my web services ..... That's all reasons that I should thank you!</span><br><span class="line"></span><br><span class="line">I usually recommend your service to my classmates and friends, some of them choose to sign up as your paying users..…Due to my recent negligence and I didn't often check my email in time, my account owed $6.73, I thought you would stop my service as long as my account balance runs out. I remember I started a ticket last time and mentioned this problem. Now I am very anxious, and want to stop my service, but it won't work.I don't konw why.</span><br><span class="line"></span><br><span class="line">I am not deliberately do that, can you don't ask me pay for the bilng that I overuse, or can you allow me to destroy my service?My account is ishuzb@sina.com. I would appreciate it if you can help me!</span><br><span class="line"></span><br><span class="line">One way or another,I love your service and I will recommend Digital Ocean to my friend!</span><br><span class="line">Thanks a lotl!</span><br></pre></td></tr></table></figure><p>然后过不多久就收到好几封邮件，其中一封：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Hello,</span><br><span class="line"></span><br><span class="line">I have added a $10 credit to your account to cover the small balance. This should remove the hold on your account and allow you to login. </span><br><span class="line"></span><br><span class="line">Please remove all active services before deactivating the account. </span><br><span class="line"></span><br><span class="line">If you have any further questions or concerns, please feel free to reach back out to us at any time.</span><br><span class="line"></span><br><span class="line">Best, </span><br><span class="line">Wendy</span><br><span class="line">Platform Support Specialist</span><br></pre></td></tr></table></figure><p>直接给了我账户 10$，DigitalOcean 真是牛逼。哈哈，总算可以删除了。</p><p>注：这里多说下我的「经验教训」，如果你是第一次使用，可以使用通过链接（这个网上搜下，我搜到的是这个：<a href="https://try.digitalocean.com/virtual-private-servers/" target="_blank" rel="noopener">https://try.digitalocean.com/virtual-private-servers/</a>）注册可以获得对新用户的 100 美刀，但有效期时间 60 天，然后你付款 5 美刀定金就可以使用了 digitalocean 了，但是这个时候如果你要是还有 digitalocean 的优惠码，就不能使用了。所以如果你有优惠码的话，就不要通过那个链接注册，直接进入官网注册账户就好，这样才可以使用优惠码。</p><h1 id="二、V2Ray-的搭建"><a href="#二、V2Ray-的搭建" class="headerlink" title="二、V2Ray 的搭建"></a>二、V2Ray 的搭建</h1><h2 id="1-V2Ray介绍"><a href="#1-V2Ray介绍" class="headerlink" title="1. V2Ray介绍"></a>1. V2Ray介绍</h2><p>类似影梭代理方式，有个叫 V2Ray 也可以关注下，教程 <a href="https://toutyrater.github.io/" target="_blank" rel="noopener">V2Ray 配置指南</a>。</p><blockquote><p>V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。</p></blockquote><p>V2Ray 跟 Shadowsocks 有什么区别？</p><blockquote><p>区别还是有的，Shadowsocks 只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。</p><p>了解 Shadowsocks 历史的同学都知道，Shadowsocks 是 clowwindy 开发的自用的软件，开发的初衷只是为了让自己能够简单高效地科学上网，自己使用了很长一段时间后觉得不错才共享出来的。V2Ray 是 clowwindy 被喝茶之后 V2Ray 项目组为表示抗议开发的，一开始就致力于让大家更好更快的科学上网。</p><p>由于出生时的历史背景不同，导致了它们性格特点的差异。</p><p>简单来说，Shadowsocks 功能单一，V2Ray 功能强大。听起来似乎有点贬低 Shadowsocks 呢？当然不！换一个角度来看，Shadowsocks 简单好上手，V2Ray 复杂配置多。</p></blockquote><p>相关教程：</p><ul><li><p><a href="https://ssr.tools/265" target="_blank" rel="noopener">科学上网工具 V2Ray 简介及具体搭建流程-SSR中文网</a></p></li><li><p><a href="https://fangeqiang.com/2030.html" target="_blank" rel="noopener">V2Ray搭建教程：小白图解版 | 翻个墙翻个墙</a></p></li></ul><h2 id="2-客户端介绍"><a href="#2-客户端介绍" class="headerlink" title="2. 客户端介绍"></a>2. 客户端介绍</h2><p>V2Ray服务器搭建完成后，就可以在本地设备中安装客户端进行连接了。下面我们分别介绍 V2Ray 的各平台客户端的下载和使用，包括：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">V2Ray Windows客户端</span><br><span class="line">V2Ray 安卓客户端</span><br><span class="line">V2Ray iOS客户端</span><br><span class="line">V2Ray Mac客户端</span><br></pre></td></tr></table></figure><p>注意：V2Ray 官方仅提供内核，没有图形化界面，所以各平台客户端，为第三方在官方内核基础上发展出的图形化界面，或者是兼容 V2Ray 协议的 APP。</p><p>鉴于 V2Ray 版本更新很快，并且 Windows 客户端需要分别下载 V2Ray 内核、V2Ray 图形化界面，所以此处不直接给出下载地址。参考：<a href="https://ssr.tools/314" target="_blank" rel="noopener">V2Ray各平台客户端下载汇总 带图形化界面！-SSR中文网</a></p><p>客户端下载：</p><p><img src="https://img-1256179949.cos.ap-shanghai.myqcloud.com/20190124153425.png" alt></p><h1 id="三、实现路由器科学上网"><a href="#三、实现路由器科学上网" class="headerlink" title="三、实现路由器科学上网"></a>三、实现路由器科学上网</h1><p>参考：</p><ul><li><a href="https://jizusun.github.io/openwrt-router-intro" target="_blank" rel="noopener">改造路由器实现“无痛的科学上网”——其实没那么难</a></li><li><a href="https://ssr.tools/136" target="_blank" rel="noopener">SSR 路由器客户端下载、安装及使用教程（openwrt ShadowsocksR）-SSR中文网</a></li></ul><hr><p><em>update：2019-04-12</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文主要记录 Shadowsocks/ShadowsocksR 和 V2Ray 的搭建过程要点。
    
    </summary>
    
      <category term="程序人生" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>自学编程成功概率有多少可能</title>
    <link href="http://yoursite.com/2017/05/26/%E8%87%AA%E5%AD%A6%E7%BC%96%E7%A8%8B%E6%88%90%E5%8A%9F%E6%A6%82%E7%8E%87%E6%9C%89%E5%A4%9A%E5%B0%91%E5%8F%AF%E8%83%BD/"/>
    <id>http://yoursite.com/2017/05/26/自学编程成功概率有多少可能/</id>
    <published>2017-05-26T11:57:47.000Z</published>
    <updated>2019-09-20T10:45:01.476Z</updated>
    
    <content type="html"><![CDATA[<p>一个人获得知识的方法有两种，一个是通过别人教，另一种就是自己学，然而通过别人教的方式一般都是需要付出一些金钱的，比如我上学的时候需要教学费，培训的时候就需要教培训费，而且越是有专业性的东西支付的费用就越高；</p><p>相对于第一种方法另一种方法自学就显得经济的多，也更能体现出一个人的能力，然而自学却不是每一个人都能很好的掌控的，他需要这个人有控制力，毅力，分析力，理解力，阅读能力，实践能力以良好的逻辑思维能力。是不是感觉自学的学问很大，如果有很强的自学能力是不是感觉牛逼闪闪？任何事都是有风险的，自学也是，很可能你自学的很长时间可能最后就会以失败告终了。<a id="more"></a></p><p><strong>那么自学计算机的编程成功的概率怎么样的？</strong>首先我们来分析一下计算机语言的特点：</p><ol><li>他是需要在计算上运行的语言；</li><li>他需要有数学知识的支撑；</li><li>很多计算机编程语言关键很想英语；</li><li>计算机编程需语言是没事逻辑思维的，所以就需要编程的人为他加入逻辑思维；分析过计算机语言的特点，我们就要转化成自学的时候对应的能力；</li></ol><p><strong>(1) 在计算机上运行，这就需要有很强的操作能力与实践能力</strong></p><p>如果你只能背下来一些概念，一些理论而不能很好的在计算机上运行起来，那么就是传说中的至上谈兵了；</p><p><strong>(2) 数学知识的支撑</strong></p><p>这个就是自学分析力，当阅读一段代码的时候如果不知道他运用的是什么数学知识，或者是不能把一段算法转换成一种知道或是不知道的数学算法的时候，那么想学成功编程语言也是很难得，因为，程序是很灵活的东西，同一个题目，十个人写就有可能是十种不一样的结果；</p><p><strong>(3) 英语</strong></p><p>自学中这点很关键，也可以说是阅读理解的能力，阅读理解需要的时候什么，就是平时我们对语言的积累，英语或是汉语或是其他的语言都一样，不用的时候当然没有什么，但是真的用上了，没用那是一件非常悲哀的事情；</p><p><strong>(4) 逻辑思维</strong></p><p>自学中最最重要的一点，当要做一件事情之前，如果没有很多的分析就开始做的话，就很容易做到一半出现逻辑不清晰，也很出现自己的知识或是理解模型了，不管是学习程序语言，或是用编程语言写一种功能，逻辑思维能力都是必不可少的一种能力；</p><p><strong>(5) 最后的一点</strong> </p><p>既然是自学，就证明没有人监督你，这个动作是自发的，所以就需要对自己的控制力与坚持不懈的毅力，一次两次的失败可能是不可以避免的，但是失败后，能整理原因站起来在来那么想不成功都难。</p><hr><blockquote><p>——<em>文章来源网络。</em>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个人获得知识的方法有两种，一个是通过别人教，另一种就是自己学，然而通过别人教的方式一般都是需要付出一些金钱的，比如我上学的时候需要教学费，培训的时候就需要教培训费，而且越是有专业性的东西支付的费用就越高；&lt;/p&gt;
&lt;p&gt;相对于第一种方法另一种方法自学就显得经济的多，也更能体现出一个人的能力，然而自学却不是每一个人都能很好的掌控的，他需要这个人有控制力，毅力，分析力，理解力，阅读能力，实践能力以良好的逻辑思维能力。是不是感觉自学的学问很大，如果有很强的自学能力是不是感觉牛逼闪闪？任何事都是有风险的，自学也是，很可能你自学的很长时间可能最后就会以失败告终了。
    
    </summary>
    
      <category term="程序人生" scheme="http://yoursite.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="人生" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
</feed>
